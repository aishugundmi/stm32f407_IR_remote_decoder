
2_stm32f4_IR_remote_decoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ac  0800928c  0800928c  0001928c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009938  08009938  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009938  08009938  00019938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009940  08009940  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009940  08009940  00019940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009944  08009944  00019944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aa4  20000090  080099d8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b34  080099d8  00020b34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021b27  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004832  00000000  00000000  00041be7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001950  00000000  00000000  00046420  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001748  00000000  00000000  00047d70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002723a  00000000  00000000  000494b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a8aa  00000000  00000000  000706f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5e8b  00000000  00000000  0008af9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00160e27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070e8  00000000  00000000  00160ea4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009274 	.word	0x08009274

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08009274 	.word	0x08009274

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08c      	sub	sp, #48	; 0x30
 8000574:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 031c 	add.w	r3, r7, #28
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	61bb      	str	r3, [r7, #24]
 800058a:	4b71      	ldr	r3, [pc, #452]	; (8000750 <MX_GPIO_Init+0x1e0>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a70      	ldr	r2, [pc, #448]	; (8000750 <MX_GPIO_Init+0x1e0>)
 8000590:	f043 0310 	orr.w	r3, r3, #16
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b6e      	ldr	r3, [pc, #440]	; (8000750 <MX_GPIO_Init+0x1e0>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0310 	and.w	r3, r3, #16
 800059e:	61bb      	str	r3, [r7, #24]
 80005a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
 80005a6:	4b6a      	ldr	r3, [pc, #424]	; (8000750 <MX_GPIO_Init+0x1e0>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a69      	ldr	r2, [pc, #420]	; (8000750 <MX_GPIO_Init+0x1e0>)
 80005ac:	f043 0304 	orr.w	r3, r3, #4
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b67      	ldr	r3, [pc, #412]	; (8000750 <MX_GPIO_Init+0x1e0>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0304 	and.w	r3, r3, #4
 80005ba:	617b      	str	r3, [r7, #20]
 80005bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]
 80005c2:	4b63      	ldr	r3, [pc, #396]	; (8000750 <MX_GPIO_Init+0x1e0>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a62      	ldr	r2, [pc, #392]	; (8000750 <MX_GPIO_Init+0x1e0>)
 80005c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b60      	ldr	r3, [pc, #384]	; (8000750 <MX_GPIO_Init+0x1e0>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	4b5c      	ldr	r3, [pc, #368]	; (8000750 <MX_GPIO_Init+0x1e0>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a5b      	ldr	r2, [pc, #364]	; (8000750 <MX_GPIO_Init+0x1e0>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b59      	ldr	r3, [pc, #356]	; (8000750 <MX_GPIO_Init+0x1e0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	4b55      	ldr	r3, [pc, #340]	; (8000750 <MX_GPIO_Init+0x1e0>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a54      	ldr	r2, [pc, #336]	; (8000750 <MX_GPIO_Init+0x1e0>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b52      	ldr	r3, [pc, #328]	; (8000750 <MX_GPIO_Init+0x1e0>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	4b4e      	ldr	r3, [pc, #312]	; (8000750 <MX_GPIO_Init+0x1e0>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a4d      	ldr	r2, [pc, #308]	; (8000750 <MX_GPIO_Init+0x1e0>)
 800061c:	f043 0308 	orr.w	r3, r3, #8
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b4b      	ldr	r3, [pc, #300]	; (8000750 <MX_GPIO_Init+0x1e0>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2108      	movs	r1, #8
 8000632:	4848      	ldr	r0, [pc, #288]	; (8000754 <MX_GPIO_Init+0x1e4>)
 8000634:	f001 f9da 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	2101      	movs	r1, #1
 800063c:	4846      	ldr	r0, [pc, #280]	; (8000758 <MX_GPIO_Init+0x1e8>)
 800063e:	f001 f9d5 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000642:	2200      	movs	r2, #0
 8000644:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000648:	4844      	ldr	r0, [pc, #272]	; (800075c <MX_GPIO_Init+0x1ec>)
 800064a:	f001 f9cf 	bl	80019ec <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800064e:	2308      	movs	r3, #8
 8000650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2300      	movs	r3, #0
 800065c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	4619      	mov	r1, r3
 8000664:	483b      	ldr	r0, [pc, #236]	; (8000754 <MX_GPIO_Init+0x1e4>)
 8000666:	f001 f827 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800066a:	2301      	movs	r3, #1
 800066c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	2301      	movs	r3, #1
 8000670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2300      	movs	r3, #0
 8000678:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	4619      	mov	r1, r3
 8000680:	4835      	ldr	r0, [pc, #212]	; (8000758 <MX_GPIO_Init+0x1e8>)
 8000682:	f001 f819 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000686:	2308      	movs	r3, #8
 8000688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	2302      	movs	r3, #2
 800068c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2300      	movs	r3, #0
 8000694:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000696:	2305      	movs	r3, #5
 8000698:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	4619      	mov	r1, r3
 80006a0:	482d      	ldr	r0, [pc, #180]	; (8000758 <MX_GPIO_Init+0x1e8>)
 80006a2:	f001 f809 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006a6:	2301      	movs	r3, #1
 80006a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006aa:	4b2d      	ldr	r3, [pc, #180]	; (8000760 <MX_GPIO_Init+0x1f0>)
 80006ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4619      	mov	r1, r3
 80006b8:	482a      	ldr	r0, [pc, #168]	; (8000764 <MX_GPIO_Init+0x1f4>)
 80006ba:	f000 fffd 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006be:	2304      	movs	r3, #4
 80006c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c2:	2300      	movs	r3, #0
 80006c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	4619      	mov	r1, r3
 80006d0:	4825      	ldr	r0, [pc, #148]	; (8000768 <MX_GPIO_Init+0x1f8>)
 80006d2:	f000 fff1 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80006d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006dc:	2302      	movs	r3, #2
 80006de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	2300      	movs	r3, #0
 80006e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006e8:	2305      	movs	r3, #5
 80006ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	4619      	mov	r1, r3
 80006f2:	481d      	ldr	r0, [pc, #116]	; (8000768 <MX_GPIO_Init+0x1f8>)
 80006f4:	f000 ffe0 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80006f8:	f24f 0310 	movw	r3, #61456	; 0xf010
 80006fc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	2301      	movs	r3, #1
 8000700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	2300      	movs	r3, #0
 8000708:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	4619      	mov	r1, r3
 8000710:	4812      	ldr	r0, [pc, #72]	; (800075c <MX_GPIO_Init+0x1ec>)
 8000712:	f000 ffd1 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000716:	2320      	movs	r3, #32
 8000718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071a:	2300      	movs	r3, #0
 800071c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	4619      	mov	r1, r3
 8000728:	480c      	ldr	r0, [pc, #48]	; (800075c <MX_GPIO_Init+0x1ec>)
 800072a:	f000 ffc5 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800072e:	2302      	movs	r3, #2
 8000730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_GPIO_Init+0x1f0>)
 8000734:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	4619      	mov	r1, r3
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <MX_GPIO_Init+0x1e4>)
 8000742:	f000 ffb9 	bl	80016b8 <HAL_GPIO_Init>

}
 8000746:	bf00      	nop
 8000748:	3730      	adds	r7, #48	; 0x30
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40021000 	.word	0x40021000
 8000758:	40020800 	.word	0x40020800
 800075c:	40020c00 	.word	0x40020c00
 8000760:	10120000 	.word	0x10120000
 8000764:	40020000 	.word	0x40020000
 8000768:	40020400 	.word	0x40020400

0800076c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_I2C1_Init+0x50>)
 8000772:	4a13      	ldr	r2, [pc, #76]	; (80007c0 <MX_I2C1_Init+0x54>)
 8000774:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_I2C1_Init+0x50>)
 8000778:	4a12      	ldr	r2, [pc, #72]	; (80007c4 <MX_I2C1_Init+0x58>)
 800077a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_I2C1_Init+0x50>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_I2C1_Init+0x50>)
 8000784:	2200      	movs	r2, #0
 8000786:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_I2C1_Init+0x50>)
 800078a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800078e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <MX_I2C1_Init+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_I2C1_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <MX_I2C1_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_I2C1_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <MX_I2C1_Init+0x50>)
 80007aa:	f002 fd83 	bl	80032b4 <HAL_I2C_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007b4:	f000 faf6 	bl	8000da4 <Error_Handler>
  }

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	200000c8 	.word	0x200000c8
 80007c0:	40005400 	.word	0x40005400
 80007c4:	000186a0 	.word	0x000186a0

080007c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	; 0x28
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a19      	ldr	r2, [pc, #100]	; (800084c <HAL_I2C_MspInit+0x84>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d12c      	bne.n	8000844 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	4b18      	ldr	r3, [pc, #96]	; (8000850 <HAL_I2C_MspInit+0x88>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a17      	ldr	r2, [pc, #92]	; (8000850 <HAL_I2C_MspInit+0x88>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <HAL_I2C_MspInit+0x88>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000806:	f44f 7310 	mov.w	r3, #576	; 0x240
 800080a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800080c:	2312      	movs	r3, #18
 800080e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000810:	2301      	movs	r3, #1
 8000812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000818:	2304      	movs	r3, #4
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	480c      	ldr	r0, [pc, #48]	; (8000854 <HAL_I2C_MspInit+0x8c>)
 8000824:	f000 ff48 	bl	80016b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <HAL_I2C_MspInit+0x88>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000830:	4a07      	ldr	r2, [pc, #28]	; (8000850 <HAL_I2C_MspInit+0x88>)
 8000832:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000836:	6413      	str	r3, [r2, #64]	; 0x40
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <HAL_I2C_MspInit+0x88>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000844:	bf00      	nop
 8000846:	3728      	adds	r7, #40	; 0x28
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40005400 	.word	0x40005400
 8000850:	40023800 	.word	0x40023800
 8000854:	40020400 	.word	0x40020400

08000858 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 800085c:	4b13      	ldr	r3, [pc, #76]	; (80008ac <MX_I2S3_Init+0x54>)
 800085e:	4a14      	ldr	r2, [pc, #80]	; (80008b0 <MX_I2S3_Init+0x58>)
 8000860:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <MX_I2S3_Init+0x54>)
 8000864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000868:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <MX_I2S3_Init+0x54>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000870:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_I2S3_Init+0x54>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <MX_I2S3_Init+0x54>)
 8000878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800087c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <MX_I2S3_Init+0x54>)
 8000880:	4a0c      	ldr	r2, [pc, #48]	; (80008b4 <MX_I2S3_Init+0x5c>)
 8000882:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_I2S3_Init+0x54>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <MX_I2S3_Init+0x54>)
 800088c:	2200      	movs	r2, #0
 800088e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_I2S3_Init+0x54>)
 8000892:	2200      	movs	r2, #0
 8000894:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_I2S3_Init+0x54>)
 8000898:	f002 fe44 	bl	8003524 <HAL_I2S_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008a2:	f000 fa7f 	bl	8000da4 <Error_Handler>
  }

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	2000011c 	.word	0x2000011c
 80008b0:	40003c00 	.word	0x40003c00
 80008b4:	00017700 	.word	0x00017700

080008b8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	; 0x28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI3)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a28      	ldr	r2, [pc, #160]	; (8000978 <HAL_I2S_MspInit+0xc0>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d14a      	bne.n	8000970 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	4b27      	ldr	r3, [pc, #156]	; (800097c <HAL_I2S_MspInit+0xc4>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	4a26      	ldr	r2, [pc, #152]	; (800097c <HAL_I2S_MspInit+0xc4>)
 80008e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008e8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ea:	4b24      	ldr	r3, [pc, #144]	; (800097c <HAL_I2S_MspInit+0xc4>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	4b20      	ldr	r3, [pc, #128]	; (800097c <HAL_I2S_MspInit+0xc4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a1f      	ldr	r2, [pc, #124]	; (800097c <HAL_I2S_MspInit+0xc4>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b1d      	ldr	r3, [pc, #116]	; (800097c <HAL_I2S_MspInit+0xc4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <HAL_I2S_MspInit+0xc4>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a18      	ldr	r2, [pc, #96]	; (800097c <HAL_I2S_MspInit+0xc4>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b16      	ldr	r3, [pc, #88]	; (800097c <HAL_I2S_MspInit+0xc4>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800092e:	2310      	movs	r3, #16
 8000930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800093e:	2306      	movs	r3, #6
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	480d      	ldr	r0, [pc, #52]	; (8000980 <HAL_I2S_MspInit+0xc8>)
 800094a:	f000 feb5 	bl	80016b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800094e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000960:	2306      	movs	r3, #6
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	4806      	ldr	r0, [pc, #24]	; (8000984 <HAL_I2S_MspInit+0xcc>)
 800096c:	f000 fea4 	bl	80016b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000970:	bf00      	nop
 8000972:	3728      	adds	r7, #40	; 0x28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40003c00 	.word	0x40003c00
 800097c:	40023800 	.word	0x40023800
 8000980:	40020000 	.word	0x40020000
 8000984:	40020800 	.word	0x40020800

08000988 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000990:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000994:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	2b00      	cmp	r3, #0
 800099e:	d013      	beq.n	80009c8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80009a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009a4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80009a8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d00b      	beq.n	80009c8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80009b0:	e000      	b.n	80009b4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80009b2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80009b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d0f9      	beq.n	80009b2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80009be:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	b2d2      	uxtb	r2, r2
 80009c6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80009c8:	687b      	ldr	r3, [r7, #4]
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b086      	sub	sp, #24
 80009da:	af00      	add	r7, sp, #0
 80009dc:	60f8      	str	r0, [r7, #12]
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
	int i = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
	 for( i = 0 ; i < len; i++) {
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	e009      	b.n	8000a00 <_write+0x2a>
		 ITM_SendChar((*ptr++));
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	1c5a      	adds	r2, r3, #1
 80009f0:	60ba      	str	r2, [r7, #8]
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff ffc7 	bl	8000988 <ITM_SendChar>
	 for( i = 0 ; i < len; i++) {
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	3301      	adds	r3, #1
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	697a      	ldr	r2, [r7, #20]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	dbf1      	blt.n	80009ec <_write+0x16>
	 }
	 return len;
 8000a08:	687b      	ldr	r3, [r7, #4]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <HAL_TIM_IC_CaptureCallback>:
int buff[150];
int buf_index;
int buf_read_index;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *tim)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	static int pv = 0;
	static int cv = 0;
	int diff;
	cv = HAL_TIM_ReadCapturedValue(tim, TIM_CHANNEL_1);
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f004 fb48 	bl	80050b4 <HAL_TIM_ReadCapturedValue>
 8000a24:	4603      	mov	r3, r0
 8000a26:	461a      	mov	r2, r3
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <HAL_TIM_IC_CaptureCallback+0x74>)
 8000a2a:	601a      	str	r2, [r3, #0]

	if(cv >= pv)
 8000a2c:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <HAL_TIM_IC_CaptureCallback+0x74>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <HAL_TIM_IC_CaptureCallback+0x78>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	db06      	blt.n	8000a46 <HAL_TIM_IC_CaptureCallback+0x32>
		diff = cv - pv;
 8000a38:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <HAL_TIM_IC_CaptureCallback+0x74>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <HAL_TIM_IC_CaptureCallback+0x78>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	e007      	b.n	8000a56 <HAL_TIM_IC_CaptureCallback+0x42>
	else
		diff = 0xffff - pv + 1 + cv;
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <HAL_TIM_IC_CaptureCallback+0x78>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <HAL_TIM_IC_CaptureCallback+0x74>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4413      	add	r3, r2
 8000a54:	60fb      	str	r3, [r7, #12]

	buff[buf_index++] = diff;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	1c5a      	adds	r2, r3, #1
 8000a5c:	490c      	ldr	r1, [pc, #48]	; (8000a90 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000a5e:	600a      	str	r2, [r1, #0]
 8000a60:	490c      	ldr	r1, [pc, #48]	; (8000a94 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if(buf_index >= 150) buf_index = 0;
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b95      	cmp	r3, #149	; 0x95
 8000a6e:	dd02      	ble.n	8000a76 <HAL_TIM_IC_CaptureCallback+0x62>
 8000a70:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]

	pv = cv;
 8000a76:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <HAL_TIM_IC_CaptureCallback+0x74>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <HAL_TIM_IC_CaptureCallback+0x78>)
 8000a7c:	6013      	str	r3, [r2, #0]
}
 8000a7e:	bf00      	nop
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200000ac 	.word	0x200000ac
 8000a8c:	200000b0 	.word	0x200000b0
 8000a90:	200003c0 	.word	0x200003c0
 8000a94:	20000164 	.word	0x20000164

08000a98 <match>:

int match(const int buff1[], int buff2[], int size)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b087      	sub	sp, #28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
	  int match = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
	  for(int i = 0; i < 68; i++) {
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	e020      	b.n	8000af0 <match+0x58>
		  if(abs(buff1[i] - buff2[i])  < 10) {
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	68b9      	ldr	r1, [r7, #8]
 8000abe:	440b      	add	r3, r1
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	1ad3      	subs	r3, r2, r3
 8000ac4:	f113 0f09 	cmn.w	r3, #9
 8000ac8:	db0f      	blt.n	8000aea <match+0x52>
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	68b9      	ldr	r1, [r7, #8]
 8000ada:	440b      	add	r3, r1
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	1ad3      	subs	r3, r2, r3
 8000ae0:	2b09      	cmp	r3, #9
 8000ae2:	dc02      	bgt.n	8000aea <match+0x52>
			  match++;
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	617b      	str	r3, [r7, #20]
	  for(int i = 0; i < 68; i++) {
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	3301      	adds	r3, #1
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	2b43      	cmp	r3, #67	; 0x43
 8000af4:	dddb      	ble.n	8000aae <match+0x16>
		  }

	  }
	  return match;
 8000af6:	697b      	ldr	r3, [r7, #20]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	371c      	adds	r7, #28
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b0a:	f000 fc2f 	bl	800136c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b0e:	f000 f8c7 	bl	8000ca0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b12:	f7ff fd2d 	bl	8000570 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b16:	f7ff fe29 	bl	800076c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000b1a:	f7ff fe9d 	bl	8000858 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000b1e:	f000 f949 	bl	8000db4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000b22:	f007 f969 	bl	8007df8 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 8000b26:	f000 fac1 	bl	80010ac <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000b2a:	f000 fb83 	bl	8001234 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4846      	ldr	r0, [pc, #280]	; (8000c4c <main+0x148>)
 8000b32:	f003 fffb 	bl	8004b2c <HAL_TIM_IC_Start_IT>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int s = sizeof(key0)/sizeof(int);
 8000b36:	2344      	movs	r3, #68	; 0x44
 8000b38:	607b      	str	r3, [r7, #4]
  printf("key0 size = %d\n", s);
 8000b3a:	6879      	ldr	r1, [r7, #4]
 8000b3c:	4844      	ldr	r0, [pc, #272]	; (8000c50 <main+0x14c>)
 8000b3e:	f007 fcf9 	bl	8008534 <iprintf>
   s = sizeof(key1)/sizeof(int);
 8000b42:	2344      	movs	r3, #68	; 0x44
 8000b44:	607b      	str	r3, [r7, #4]
  printf("key1 size = %d\n", s);
 8000b46:	6879      	ldr	r1, [r7, #4]
 8000b48:	4842      	ldr	r0, [pc, #264]	; (8000c54 <main+0x150>)
 8000b4a:	f007 fcf3 	bl	8008534 <iprintf>
   s = sizeof(key2)/sizeof(int);
 8000b4e:	2344      	movs	r3, #68	; 0x44
 8000b50:	607b      	str	r3, [r7, #4]
  printf("key2 size = %d\n", s);
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	4840      	ldr	r0, [pc, #256]	; (8000c58 <main+0x154>)
 8000b56:	f007 fced 	bl	8008534 <iprintf>
   s = sizeof(key3)/sizeof(int);
 8000b5a:	2344      	movs	r3, #68	; 0x44
 8000b5c:	607b      	str	r3, [r7, #4]
  printf("key3 size = %d\n", s);
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	483e      	ldr	r0, [pc, #248]	; (8000c5c <main+0x158>)
 8000b62:	f007 fce7 	bl	8008534 <iprintf>
   s = sizeof(key4)/sizeof(int);
 8000b66:	2344      	movs	r3, #68	; 0x44
 8000b68:	607b      	str	r3, [r7, #4]
  printf("key4 size = %d\n", s);
 8000b6a:	6879      	ldr	r1, [r7, #4]
 8000b6c:	483c      	ldr	r0, [pc, #240]	; (8000c60 <main+0x15c>)
 8000b6e:	f007 fce1 	bl	8008534 <iprintf>
    /* USER CODE END WHILE */
  //  MX_USB_HOST_Process();

    /* USER CODE BEGIN 3 */
//    printf("HeLLO\n");
	  if( buf_index >= 69) {
 8000b72:	4b3c      	ldr	r3, [pc, #240]	; (8000c64 <main+0x160>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b44      	cmp	r3, #68	; 0x44
 8000b78:	ddfb      	ble.n	8000b72 <main+0x6e>
		  printf("pressed\n");
 8000b7a:	483b      	ldr	r0, [pc, #236]	; (8000c68 <main+0x164>)
 8000b7c:	f007 fd4e 	bl	800861c <puts>
		  //HAL_Delay(300);

		  if(1) {//always pass
			  int matchvalue;

			  matchvalue = match(key0, &buff[1], 68);
 8000b80:	2244      	movs	r2, #68	; 0x44
 8000b82:	493a      	ldr	r1, [pc, #232]	; (8000c6c <main+0x168>)
 8000b84:	483a      	ldr	r0, [pc, #232]	; (8000c70 <main+0x16c>)
 8000b86:	f7ff ff87 	bl	8000a98 <match>
 8000b8a:	6038      	str	r0, [r7, #0]
			  if(matchvalue == 68) {
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	2b44      	cmp	r3, #68	; 0x44
 8000b90:	d108      	bne.n	8000ba4 <main+0xa0>
				  GPIOD->ODR &= ~( (1<<12) |(1<<13) |(1<<14) |(1<<15) ) ;
 8000b92:	4b38      	ldr	r3, [pc, #224]	; (8000c74 <main+0x170>)
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	4a37      	ldr	r2, [pc, #220]	; (8000c74 <main+0x170>)
 8000b98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000b9c:	6153      	str	r3, [r2, #20]
				  printf("KEY0 MATCHING\n");
 8000b9e:	4836      	ldr	r0, [pc, #216]	; (8000c78 <main+0x174>)
 8000ba0:	f007 fd3c 	bl	800861c <puts>
			  }

			  matchvalue = match(key1, &buff[1], 68);
 8000ba4:	2244      	movs	r2, #68	; 0x44
 8000ba6:	4931      	ldr	r1, [pc, #196]	; (8000c6c <main+0x168>)
 8000ba8:	4834      	ldr	r0, [pc, #208]	; (8000c7c <main+0x178>)
 8000baa:	f7ff ff75 	bl	8000a98 <match>
 8000bae:	6038      	str	r0, [r7, #0]
			  if(matchvalue == 68) {
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	2b44      	cmp	r3, #68	; 0x44
 8000bb4:	d108      	bne.n	8000bc8 <main+0xc4>
				  GPIOD->ODR ^= 1<<12;
 8000bb6:	4b2f      	ldr	r3, [pc, #188]	; (8000c74 <main+0x170>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	4a2e      	ldr	r2, [pc, #184]	; (8000c74 <main+0x170>)
 8000bbc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000bc0:	6153      	str	r3, [r2, #20]
				  printf("KEY1 MATCHING\n");
 8000bc2:	482f      	ldr	r0, [pc, #188]	; (8000c80 <main+0x17c>)
 8000bc4:	f007 fd2a 	bl	800861c <puts>
			  }

			  matchvalue = match(key2, &buff[1], 68);
 8000bc8:	2244      	movs	r2, #68	; 0x44
 8000bca:	4928      	ldr	r1, [pc, #160]	; (8000c6c <main+0x168>)
 8000bcc:	482d      	ldr	r0, [pc, #180]	; (8000c84 <main+0x180>)
 8000bce:	f7ff ff63 	bl	8000a98 <match>
 8000bd2:	6038      	str	r0, [r7, #0]
			  if(matchvalue == 68) {
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	2b44      	cmp	r3, #68	; 0x44
 8000bd8:	d108      	bne.n	8000bec <main+0xe8>
				  GPIOD->ODR ^= 1<<13;
 8000bda:	4b26      	ldr	r3, [pc, #152]	; (8000c74 <main+0x170>)
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	4a25      	ldr	r2, [pc, #148]	; (8000c74 <main+0x170>)
 8000be0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000be4:	6153      	str	r3, [r2, #20]
				  printf("KEY2 MATCHING\n");
 8000be6:	4828      	ldr	r0, [pc, #160]	; (8000c88 <main+0x184>)
 8000be8:	f007 fd18 	bl	800861c <puts>
			  }

			  matchvalue = match(key3, &buff[1], 68);
 8000bec:	2244      	movs	r2, #68	; 0x44
 8000bee:	491f      	ldr	r1, [pc, #124]	; (8000c6c <main+0x168>)
 8000bf0:	4826      	ldr	r0, [pc, #152]	; (8000c8c <main+0x188>)
 8000bf2:	f7ff ff51 	bl	8000a98 <match>
 8000bf6:	6038      	str	r0, [r7, #0]
			  if(matchvalue == 68) {
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	2b44      	cmp	r3, #68	; 0x44
 8000bfc:	d108      	bne.n	8000c10 <main+0x10c>
				  GPIOD->ODR ^= 1<<14;
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <main+0x170>)
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	4a1c      	ldr	r2, [pc, #112]	; (8000c74 <main+0x170>)
 8000c04:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 8000c08:	6153      	str	r3, [r2, #20]
				  printf("KEY3 MATCHING\n");
 8000c0a:	4821      	ldr	r0, [pc, #132]	; (8000c90 <main+0x18c>)
 8000c0c:	f007 fd06 	bl	800861c <puts>
			  }

			  matchvalue = match(key4, &buff[1], 68);
 8000c10:	2244      	movs	r2, #68	; 0x44
 8000c12:	4916      	ldr	r1, [pc, #88]	; (8000c6c <main+0x168>)
 8000c14:	481f      	ldr	r0, [pc, #124]	; (8000c94 <main+0x190>)
 8000c16:	f7ff ff3f 	bl	8000a98 <match>
 8000c1a:	6038      	str	r0, [r7, #0]
			  if(matchvalue == 68) {
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	2b44      	cmp	r3, #68	; 0x44
 8000c20:	d108      	bne.n	8000c34 <main+0x130>
				  GPIOD->ODR ^= 1<<15;
 8000c22:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <main+0x170>)
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <main+0x170>)
 8000c28:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 8000c2c:	6153      	str	r3, [r2, #20]
				  printf("KEY4 MATCHING\n");
 8000c2e:	481a      	ldr	r0, [pc, #104]	; (8000c98 <main+0x194>)
 8000c30:	f007 fcf4 	bl	800861c <puts>
			  }

		  }


		  HAL_Delay(400);
 8000c34:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000c38:	f000 fc0a 	bl	8001450 <HAL_Delay>
		  buf_read_index = 0;
 8000c3c:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <main+0x198>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
		  buf_index = 0;
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <main+0x160>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
	  if( buf_index >= 69) {
 8000c48:	e793      	b.n	8000b72 <main+0x6e>
 8000c4a:	bf00      	nop
 8000c4c:	2000041c 	.word	0x2000041c
 8000c50:	0800928c 	.word	0x0800928c
 8000c54:	0800929c 	.word	0x0800929c
 8000c58:	080092ac 	.word	0x080092ac
 8000c5c:	080092bc 	.word	0x080092bc
 8000c60:	080092cc 	.word	0x080092cc
 8000c64:	200003c0 	.word	0x200003c0
 8000c68:	080092dc 	.word	0x080092dc
 8000c6c:	20000168 	.word	0x20000168
 8000c70:	08009338 	.word	0x08009338
 8000c74:	40020c00 	.word	0x40020c00
 8000c78:	080092e4 	.word	0x080092e4
 8000c7c:	08009448 	.word	0x08009448
 8000c80:	080092f4 	.word	0x080092f4
 8000c84:	08009558 	.word	0x08009558
 8000c88:	08009304 	.word	0x08009304
 8000c8c:	08009668 	.word	0x08009668
 8000c90:	08009314 	.word	0x08009314
 8000c94:	08009778 	.word	0x08009778
 8000c98:	08009324 	.word	0x08009324
 8000c9c:	200003bc 	.word	0x200003bc

08000ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b098      	sub	sp, #96	; 0x60
 8000ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000caa:	2230      	movs	r2, #48	; 0x30
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f007 fb90 	bl	80083d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cc4:	f107 030c 	add.w	r3, r7, #12
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	4b31      	ldr	r3, [pc, #196]	; (8000d9c <SystemClock_Config+0xfc>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	4a30      	ldr	r2, [pc, #192]	; (8000d9c <SystemClock_Config+0xfc>)
 8000cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce2:	4b2e      	ldr	r3, [pc, #184]	; (8000d9c <SystemClock_Config+0xfc>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	4b2b      	ldr	r3, [pc, #172]	; (8000da0 <SystemClock_Config+0x100>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a2a      	ldr	r2, [pc, #168]	; (8000da0 <SystemClock_Config+0x100>)
 8000cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cfc:	6013      	str	r3, [r2, #0]
 8000cfe:	4b28      	ldr	r3, [pc, #160]	; (8000da0 <SystemClock_Config+0x100>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d12:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d14:	2302      	movs	r3, #2
 8000d16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d1e:	2308      	movs	r3, #8
 8000d20:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d22:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d26:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d2c:	2307      	movs	r3, #7
 8000d2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d34:	4618      	mov	r0, r3
 8000d36:	f003 f895 	bl	8003e64 <HAL_RCC_OscConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000d40:	f000 f830 	bl	8000da4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d44:	230f      	movs	r3, #15
 8000d46:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	2105      	movs	r1, #5
 8000d62:	4618      	mov	r0, r3
 8000d64:	f003 faee 	bl	8004344 <HAL_RCC_ClockConfig>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000d6e:	f000 f819 	bl	8000da4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d72:	2301      	movs	r3, #1
 8000d74:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d76:	23c0      	movs	r3, #192	; 0xc0
 8000d78:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	4618      	mov	r0, r3
 8000d84:	f003 fcd0 	bl	8004728 <HAL_RCCEx_PeriphCLKConfig>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000d8e:	f000 f809 	bl	8000da4 <Error_Handler>
  }
}
 8000d92:	bf00      	nop
 8000d94:	3760      	adds	r7, #96	; 0x60
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40007000 	.word	0x40007000

08000da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000db8:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <MX_SPI1_Init+0x64>)
 8000dba:	4a18      	ldr	r2, [pc, #96]	; (8000e1c <MX_SPI1_Init+0x68>)
 8000dbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dbe:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <MX_SPI1_Init+0x64>)
 8000dc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dc6:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <MX_SPI1_Init+0x64>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <MX_SPI1_Init+0x64>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dd2:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <MX_SPI1_Init+0x64>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <MX_SPI1_Init+0x64>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <MX_SPI1_Init+0x64>)
 8000de0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000de4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000de6:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <MX_SPI1_Init+0x64>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dec:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <MX_SPI1_Init+0x64>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <MX_SPI1_Init+0x64>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000df8:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <MX_SPI1_Init+0x64>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <MX_SPI1_Init+0x64>)
 8000e00:	220a      	movs	r2, #10
 8000e02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e04:	4804      	ldr	r0, [pc, #16]	; (8000e18 <MX_SPI1_Init+0x64>)
 8000e06:	f003 fdcd 	bl	80049a4 <HAL_SPI_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e10:	f7ff ffc8 	bl	8000da4 <Error_Handler>
  }

}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	200003c4 	.word	0x200003c4
 8000e1c:	40013000 	.word	0x40013000

08000e20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a19      	ldr	r2, [pc, #100]	; (8000ea4 <HAL_SPI_MspInit+0x84>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d12b      	bne.n	8000e9a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <HAL_SPI_MspInit+0x88>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	4a17      	ldr	r2, [pc, #92]	; (8000ea8 <HAL_SPI_MspInit+0x88>)
 8000e4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e50:	6453      	str	r3, [r2, #68]	; 0x44
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_SPI_MspInit+0x88>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <HAL_SPI_MspInit+0x88>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a10      	ldr	r2, [pc, #64]	; (8000ea8 <HAL_SPI_MspInit+0x88>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_SPI_MspInit+0x88>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e7a:	23e0      	movs	r3, #224	; 0xe0
 8000e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e8a:	2305      	movs	r3, #5
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	; (8000eac <HAL_SPI_MspInit+0x8c>)
 8000e96:	f000 fc0f 	bl	80016b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	3728      	adds	r7, #40	; 0x28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40013000 	.word	0x40013000
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020000 	.word	0x40020000

08000eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <HAL_MspInit+0x4c>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	4a0f      	ldr	r2, [pc, #60]	; (8000efc <HAL_MspInit+0x4c>)
 8000ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <HAL_MspInit+0x4c>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	603b      	str	r3, [r7, #0]
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <HAL_MspInit+0x4c>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	4a08      	ldr	r2, [pc, #32]	; (8000efc <HAL_MspInit+0x4c>)
 8000edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_MspInit+0x4c>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000eee:	2007      	movs	r0, #7
 8000ef0:	f000 fba0 	bl	8001634 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40023800 	.word	0x40023800

08000f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <HardFault_Handler+0x4>

08000f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <MemManage_Handler+0x4>

08000f1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <BusFault_Handler+0x4>

08000f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <UsageFault_Handler+0x4>

08000f26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f54:	f000 fa5c 	bl	8001410 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <TIM1_CC_IRQHandler+0x10>)
 8000f62:	f003 fe4b 	bl	8004bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	2000041c 	.word	0x2000041c

08000f70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <OTG_FS_IRQHandler+0x10>)
 8000f76:	f000 ffd7 	bl	8001f28 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	2000086c 	.word	0x2000086c

08000f84 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	e00a      	b.n	8000fac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f96:	f3af 8000 	nop.w
 8000f9a:	4601      	mov	r1, r0
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	1c5a      	adds	r2, r3, #1
 8000fa0:	60ba      	str	r2, [r7, #8]
 8000fa2:	b2ca      	uxtb	r2, r1
 8000fa4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	697a      	ldr	r2, [r7, #20]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	dbf0      	blt.n	8000f96 <_read+0x12>
	}

return len;
 8000fb4:	687b      	ldr	r3, [r7, #4]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <_close>:
	}
	return len;
}

int _close(int file)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
	return -1;
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fe6:	605a      	str	r2, [r3, #4]
	return 0;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <_isatty>:

int _isatty(int file)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
	return 1;
 8000ffe:	2301      	movs	r3, #1
}
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
	return 0;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3714      	adds	r7, #20
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
	...

08001028 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <_sbrk+0x50>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d102      	bne.n	800103e <_sbrk+0x16>
		heap_end = &end;
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <_sbrk+0x50>)
 800103a:	4a10      	ldr	r2, [pc, #64]	; (800107c <_sbrk+0x54>)
 800103c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <_sbrk+0x50>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <_sbrk+0x50>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4413      	add	r3, r2
 800104c:	466a      	mov	r2, sp
 800104e:	4293      	cmp	r3, r2
 8001050:	d907      	bls.n	8001062 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001052:	f007 f985 	bl	8008360 <__errno>
 8001056:	4602      	mov	r2, r0
 8001058:	230c      	movs	r3, #12
 800105a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800105c:	f04f 33ff 	mov.w	r3, #4294967295
 8001060:	e006      	b.n	8001070 <_sbrk+0x48>
	}

	heap_end += incr;
 8001062:	4b05      	ldr	r3, [pc, #20]	; (8001078 <_sbrk+0x50>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	4a03      	ldr	r2, [pc, #12]	; (8001078 <_sbrk+0x50>)
 800106c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800106e:	68fb      	ldr	r3, [r7, #12]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200000b4 	.word	0x200000b4
 800107c:	20000b38 	.word	0x20000b38

08001080 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <SystemInit+0x28>)
 8001086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800108a:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <SystemInit+0x28>)
 800108c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001090:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <SystemInit+0x28>)
 8001096:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800109a:	609a      	str	r2, [r3, #8]
#endif
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b2:	f107 0318 	add.w	r3, r7, #24
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010ca:	463b      	mov	r3, r7
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]

  htim1.Instance = TIM1;
 80010d6:	4b2d      	ldr	r3, [pc, #180]	; (800118c <MX_TIM1_Init+0xe0>)
 80010d8:	4a2d      	ldr	r2, [pc, #180]	; (8001190 <MX_TIM1_Init+0xe4>)
 80010da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000;
 80010dc:	4b2b      	ldr	r3, [pc, #172]	; (800118c <MX_TIM1_Init+0xe0>)
 80010de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e4:	4b29      	ldr	r3, [pc, #164]	; (800118c <MX_TIM1_Init+0xe0>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff;
 80010ea:	4b28      	ldr	r3, [pc, #160]	; (800118c <MX_TIM1_Init+0xe0>)
 80010ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f2:	4b26      	ldr	r3, [pc, #152]	; (800118c <MX_TIM1_Init+0xe0>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010f8:	4b24      	ldr	r3, [pc, #144]	; (800118c <MX_TIM1_Init+0xe0>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010fe:	4b23      	ldr	r3, [pc, #140]	; (800118c <MX_TIM1_Init+0xe0>)
 8001100:	2280      	movs	r2, #128	; 0x80
 8001102:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001104:	4821      	ldr	r0, [pc, #132]	; (800118c <MX_TIM1_Init+0xe0>)
 8001106:	f003 fcb1 	bl	8004a6c <HAL_TIM_Base_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001110:	f7ff fe48 	bl	8000da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001118:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800111a:	f107 0318 	add.w	r3, r7, #24
 800111e:	4619      	mov	r1, r3
 8001120:	481a      	ldr	r0, [pc, #104]	; (800118c <MX_TIM1_Init+0xe0>)
 8001122:	f003 ff0f 	bl	8004f44 <HAL_TIM_ConfigClockSource>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800112c:	f7ff fe3a 	bl	8000da4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001130:	4816      	ldr	r0, [pc, #88]	; (800118c <MX_TIM1_Init+0xe0>)
 8001132:	f003 fcc6 	bl	8004ac2 <HAL_TIM_IC_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800113c:	f7ff fe32 	bl	8000da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	4619      	mov	r1, r3
 800114e:	480f      	ldr	r0, [pc, #60]	; (800118c <MX_TIM1_Init+0xe0>)
 8001150:	f004 faa6 	bl	80056a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 800115a:	f7ff fe23 	bl	8000da4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800115e:	230a      	movs	r3, #10
 8001160:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001162:	2301      	movs	r3, #1
 8001164:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800116e:	463b      	mov	r3, r7
 8001170:	2200      	movs	r2, #0
 8001172:	4619      	mov	r1, r3
 8001174:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_TIM1_Init+0xe0>)
 8001176:	f003 fe49 	bl	8004e0c <HAL_TIM_IC_ConfigChannel>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001180:	f7ff fe10 	bl	8000da4 <Error_Handler>
  }

}
 8001184:	bf00      	nop
 8001186:	3728      	adds	r7, #40	; 0x28
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	2000041c 	.word	0x2000041c
 8001190:	40010000 	.word	0x40010000

08001194 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a1d      	ldr	r2, [pc, #116]	; (8001228 <HAL_TIM_Base_MspInit+0x94>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d134      	bne.n	8001220 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	4b1c      	ldr	r3, [pc, #112]	; (800122c <HAL_TIM_Base_MspInit+0x98>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	4a1b      	ldr	r2, [pc, #108]	; (800122c <HAL_TIM_Base_MspInit+0x98>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6453      	str	r3, [r2, #68]	; 0x44
 80011c6:	4b19      	ldr	r3, [pc, #100]	; (800122c <HAL_TIM_Base_MspInit+0x98>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <HAL_TIM_Base_MspInit+0x98>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a14      	ldr	r2, [pc, #80]	; (800122c <HAL_TIM_Base_MspInit+0x98>)
 80011dc:	f043 0310 	orr.w	r3, r3, #16
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_TIM_Base_MspInit+0x98>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0310 	and.w	r3, r3, #16
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	2302      	movs	r3, #2
 80011f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001200:	2301      	movs	r3, #1
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4619      	mov	r1, r3
 800120a:	4809      	ldr	r0, [pc, #36]	; (8001230 <HAL_TIM_Base_MspInit+0x9c>)
 800120c:	f000 fa54 	bl	80016b8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001210:	2200      	movs	r2, #0
 8001212:	2100      	movs	r1, #0
 8001214:	201b      	movs	r0, #27
 8001216:	f000 fa18 	bl	800164a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800121a:	201b      	movs	r0, #27
 800121c:	f000 fa31 	bl	8001682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001220:	bf00      	nop
 8001222:	3728      	adds	r7, #40	; 0x28
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40010000 	.word	0x40010000
 800122c:	40023800 	.word	0x40023800
 8001230:	40021000 	.word	0x40021000

08001234 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <MX_USART2_UART_Init+0x4c>)
 800123a:	4a12      	ldr	r2, [pc, #72]	; (8001284 <MX_USART2_UART_Init+0x50>)
 800123c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <MX_USART2_UART_Init+0x4c>)
 8001240:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001244:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <MX_USART2_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_USART2_UART_Init+0x4c>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <MX_USART2_UART_Init+0x4c>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_USART2_UART_Init+0x4c>)
 800125a:	220c      	movs	r2, #12
 800125c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125e:	4b08      	ldr	r3, [pc, #32]	; (8001280 <MX_USART2_UART_Init+0x4c>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_USART2_UART_Init+0x4c>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800126a:	4805      	ldr	r0, [pc, #20]	; (8001280 <MX_USART2_UART_Init+0x4c>)
 800126c:	f004 faa8 	bl	80057c0 <HAL_UART_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001276:	f7ff fd95 	bl	8000da4 <Error_Handler>
  }

}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	2000045c 	.word	0x2000045c
 8001284:	40004400 	.word	0x40004400

08001288 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a19      	ldr	r2, [pc, #100]	; (800130c <HAL_UART_MspInit+0x84>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d12b      	bne.n	8001302 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	4b18      	ldr	r3, [pc, #96]	; (8001310 <HAL_UART_MspInit+0x88>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	4a17      	ldr	r2, [pc, #92]	; (8001310 <HAL_UART_MspInit+0x88>)
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <HAL_UART_MspInit+0x88>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <HAL_UART_MspInit+0x88>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a10      	ldr	r2, [pc, #64]	; (8001310 <HAL_UART_MspInit+0x88>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <HAL_UART_MspInit+0x88>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012e2:	230c      	movs	r3, #12
 80012e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e6:	2302      	movs	r3, #2
 80012e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ee:	2303      	movs	r3, #3
 80012f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012f2:	2307      	movs	r3, #7
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4619      	mov	r1, r3
 80012fc:	4805      	ldr	r0, [pc, #20]	; (8001314 <HAL_UART_MspInit+0x8c>)
 80012fe:	f000 f9db 	bl	80016b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001302:	bf00      	nop
 8001304:	3728      	adds	r7, #40	; 0x28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40004400 	.word	0x40004400
 8001310:	40023800 	.word	0x40023800
 8001314:	40020000 	.word	0x40020000

08001318 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001318:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001350 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800131c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800131e:	e003      	b.n	8001328 <LoopCopyDataInit>

08001320 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001322:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001324:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001326:	3104      	adds	r1, #4

08001328 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001328:	480b      	ldr	r0, [pc, #44]	; (8001358 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800132a:	4b0c      	ldr	r3, [pc, #48]	; (800135c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800132c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800132e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001330:	d3f6      	bcc.n	8001320 <CopyDataInit>
  ldr  r2, =_sbss
 8001332:	4a0b      	ldr	r2, [pc, #44]	; (8001360 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001334:	e002      	b.n	800133c <LoopFillZerobss>

08001336 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001336:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001338:	f842 3b04 	str.w	r3, [r2], #4

0800133c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800133c:	4b09      	ldr	r3, [pc, #36]	; (8001364 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800133e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001340:	d3f9      	bcc.n	8001336 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001342:	f7ff fe9d 	bl	8001080 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001346:	f007 f811 	bl	800836c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800134a:	f7ff fbdb 	bl	8000b04 <main>
  bx  lr    
 800134e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001350:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001354:	08009948 	.word	0x08009948
  ldr  r0, =_sdata
 8001358:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800135c:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8001360:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8001364:	20000b34 	.word	0x20000b34

08001368 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001368:	e7fe      	b.n	8001368 <ADC_IRQHandler>
	...

0800136c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001370:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <HAL_Init+0x40>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0d      	ldr	r2, [pc, #52]	; (80013ac <HAL_Init+0x40>)
 8001376:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800137a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <HAL_Init+0x40>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <HAL_Init+0x40>)
 8001382:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001386:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <HAL_Init+0x40>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a07      	ldr	r2, [pc, #28]	; (80013ac <HAL_Init+0x40>)
 800138e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001392:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001394:	2003      	movs	r0, #3
 8001396:	f000 f94d 	bl	8001634 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800139a:	2000      	movs	r0, #0
 800139c:	f000 f808 	bl	80013b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013a0:	f7ff fd86 	bl	8000eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40023c00 	.word	0x40023c00

080013b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <HAL_InitTick+0x54>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4b12      	ldr	r3, [pc, #72]	; (8001408 <HAL_InitTick+0x58>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	4619      	mov	r1, r3
 80013c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 f965 	bl	800169e <HAL_SYSTICK_Config>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e00e      	b.n	80013fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b0f      	cmp	r3, #15
 80013e2:	d80a      	bhi.n	80013fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e4:	2200      	movs	r2, #0
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ec:	f000 f92d 	bl	800164a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013f0:	4a06      	ldr	r2, [pc, #24]	; (800140c <HAL_InitTick+0x5c>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
 80013f8:	e000      	b.n	80013fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000000 	.word	0x20000000
 8001408:	20000008 	.word	0x20000008
 800140c:	20000004 	.word	0x20000004

08001410 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_IncTick+0x20>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	461a      	mov	r2, r3
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_IncTick+0x24>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4413      	add	r3, r2
 8001420:	4a04      	ldr	r2, [pc, #16]	; (8001434 <HAL_IncTick+0x24>)
 8001422:	6013      	str	r3, [r2, #0]
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000008 	.word	0x20000008
 8001434:	2000049c 	.word	0x2000049c

08001438 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return uwTick;
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <HAL_GetTick+0x14>)
 800143e:	681b      	ldr	r3, [r3, #0]
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	2000049c 	.word	0x2000049c

08001450 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001458:	f7ff ffee 	bl	8001438 <HAL_GetTick>
 800145c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001468:	d005      	beq.n	8001476 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <HAL_Delay+0x40>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4413      	add	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001476:	bf00      	nop
 8001478:	f7ff ffde 	bl	8001438 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	429a      	cmp	r2, r3
 8001486:	d8f7      	bhi.n	8001478 <HAL_Delay+0x28>
  {
  }
}
 8001488:	bf00      	nop
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000008 	.word	0x20000008

08001494 <__NVIC_SetPriorityGrouping>:
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b0:	4013      	ands	r3, r2
 80014b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014c6:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	60d3      	str	r3, [r2, #12]
}
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_GetPriorityGrouping>:
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <__NVIC_GetPriorityGrouping+0x18>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	0a1b      	lsrs	r3, r3, #8
 80014e6:	f003 0307 	and.w	r3, r3, #7
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_EnableIRQ>:
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	2b00      	cmp	r3, #0
 8001508:	db0b      	blt.n	8001522 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	f003 021f 	and.w	r2, r3, #31
 8001510:	4907      	ldr	r1, [pc, #28]	; (8001530 <__NVIC_EnableIRQ+0x38>)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	095b      	lsrs	r3, r3, #5
 8001518:	2001      	movs	r0, #1
 800151a:	fa00 f202 	lsl.w	r2, r0, r2
 800151e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000e100 	.word	0xe000e100

08001534 <__NVIC_SetPriority>:
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	6039      	str	r1, [r7, #0]
 800153e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001544:	2b00      	cmp	r3, #0
 8001546:	db0a      	blt.n	800155e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	490c      	ldr	r1, [pc, #48]	; (8001580 <__NVIC_SetPriority+0x4c>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	0112      	lsls	r2, r2, #4
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	440b      	add	r3, r1
 8001558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800155c:	e00a      	b.n	8001574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4908      	ldr	r1, [pc, #32]	; (8001584 <__NVIC_SetPriority+0x50>)
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	3b04      	subs	r3, #4
 800156c:	0112      	lsls	r2, r2, #4
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	440b      	add	r3, r1
 8001572:	761a      	strb	r2, [r3, #24]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000e100 	.word	0xe000e100
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <NVIC_EncodePriority>:
{
 8001588:	b480      	push	{r7}
 800158a:	b089      	sub	sp, #36	; 0x24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f1c3 0307 	rsb	r3, r3, #7
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	bf28      	it	cs
 80015a6:	2304      	movcs	r3, #4
 80015a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3304      	adds	r3, #4
 80015ae:	2b06      	cmp	r3, #6
 80015b0:	d902      	bls.n	80015b8 <NVIC_EncodePriority+0x30>
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3b03      	subs	r3, #3
 80015b6:	e000      	b.n	80015ba <NVIC_EncodePriority+0x32>
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	f04f 32ff 	mov.w	r2, #4294967295
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43da      	mvns	r2, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	401a      	ands	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d0:	f04f 31ff 	mov.w	r1, #4294967295
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	fa01 f303 	lsl.w	r3, r1, r3
 80015da:	43d9      	mvns	r1, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	4313      	orrs	r3, r2
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3724      	adds	r7, #36	; 0x24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <SysTick_Config>:
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001600:	d301      	bcc.n	8001606 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001602:	2301      	movs	r3, #1
 8001604:	e00f      	b.n	8001626 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001606:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <SysTick_Config+0x40>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800160e:	210f      	movs	r1, #15
 8001610:	f04f 30ff 	mov.w	r0, #4294967295
 8001614:	f7ff ff8e 	bl	8001534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <SysTick_Config+0x40>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161e:	4b04      	ldr	r3, [pc, #16]	; (8001630 <SysTick_Config+0x40>)
 8001620:	2207      	movs	r2, #7
 8001622:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	e000e010 	.word	0xe000e010

08001634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ff29 	bl	8001494 <__NVIC_SetPriorityGrouping>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
 8001656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800165c:	f7ff ff3e 	bl	80014dc <__NVIC_GetPriorityGrouping>
 8001660:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	6978      	ldr	r0, [r7, #20]
 8001668:	f7ff ff8e 	bl	8001588 <NVIC_EncodePriority>
 800166c:	4602      	mov	r2, r0
 800166e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff5d 	bl	8001534 <__NVIC_SetPriority>
}
 800167a:	bf00      	nop
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff31 	bl	80014f8 <__NVIC_EnableIRQ>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff ffa2 	bl	80015f0 <SysTick_Config>
 80016ac:	4603      	mov	r3, r0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b089      	sub	sp, #36	; 0x24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
 80016d2:	e16b      	b.n	80019ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016d4:	2201      	movs	r2, #1
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	f040 815a 	bne.w	80019a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d00b      	beq.n	8001712 <HAL_GPIO_Init+0x5a>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d007      	beq.n	8001712 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001706:	2b11      	cmp	r3, #17
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b12      	cmp	r3, #18
 8001710:	d130      	bne.n	8001774 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	2203      	movs	r2, #3
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	68da      	ldr	r2, [r3, #12]
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001748:	2201      	movs	r2, #1
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	091b      	lsrs	r3, r3, #4
 800175e:	f003 0201 	and.w	r2, r3, #1
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	2203      	movs	r2, #3
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_Init+0xfc>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b12      	cmp	r3, #18
 80017b2:	d123      	bne.n	80017fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	08da      	lsrs	r2, r3, #3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3208      	adds	r2, #8
 80017bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	220f      	movs	r2, #15
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	691a      	ldr	r2, [r3, #16]
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	08da      	lsrs	r2, r3, #3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3208      	adds	r2, #8
 80017f6:	69b9      	ldr	r1, [r7, #24]
 80017f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	2203      	movs	r2, #3
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0203 	and.w	r2, r3, #3
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 80b4 	beq.w	80019a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b5f      	ldr	r3, [pc, #380]	; (80019c0 <HAL_GPIO_Init+0x308>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	4a5e      	ldr	r2, [pc, #376]	; (80019c0 <HAL_GPIO_Init+0x308>)
 8001848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800184c:	6453      	str	r3, [r2, #68]	; 0x44
 800184e:	4b5c      	ldr	r3, [pc, #368]	; (80019c0 <HAL_GPIO_Init+0x308>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800185a:	4a5a      	ldr	r2, [pc, #360]	; (80019c4 <HAL_GPIO_Init+0x30c>)
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	089b      	lsrs	r3, r3, #2
 8001860:	3302      	adds	r3, #2
 8001862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001866:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	220f      	movs	r2, #15
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4013      	ands	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a51      	ldr	r2, [pc, #324]	; (80019c8 <HAL_GPIO_Init+0x310>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d02b      	beq.n	80018de <HAL_GPIO_Init+0x226>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a50      	ldr	r2, [pc, #320]	; (80019cc <HAL_GPIO_Init+0x314>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d025      	beq.n	80018da <HAL_GPIO_Init+0x222>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a4f      	ldr	r2, [pc, #316]	; (80019d0 <HAL_GPIO_Init+0x318>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d01f      	beq.n	80018d6 <HAL_GPIO_Init+0x21e>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a4e      	ldr	r2, [pc, #312]	; (80019d4 <HAL_GPIO_Init+0x31c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d019      	beq.n	80018d2 <HAL_GPIO_Init+0x21a>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a4d      	ldr	r2, [pc, #308]	; (80019d8 <HAL_GPIO_Init+0x320>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d013      	beq.n	80018ce <HAL_GPIO_Init+0x216>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a4c      	ldr	r2, [pc, #304]	; (80019dc <HAL_GPIO_Init+0x324>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d00d      	beq.n	80018ca <HAL_GPIO_Init+0x212>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a4b      	ldr	r2, [pc, #300]	; (80019e0 <HAL_GPIO_Init+0x328>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d007      	beq.n	80018c6 <HAL_GPIO_Init+0x20e>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a4a      	ldr	r2, [pc, #296]	; (80019e4 <HAL_GPIO_Init+0x32c>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d101      	bne.n	80018c2 <HAL_GPIO_Init+0x20a>
 80018be:	2307      	movs	r3, #7
 80018c0:	e00e      	b.n	80018e0 <HAL_GPIO_Init+0x228>
 80018c2:	2308      	movs	r3, #8
 80018c4:	e00c      	b.n	80018e0 <HAL_GPIO_Init+0x228>
 80018c6:	2306      	movs	r3, #6
 80018c8:	e00a      	b.n	80018e0 <HAL_GPIO_Init+0x228>
 80018ca:	2305      	movs	r3, #5
 80018cc:	e008      	b.n	80018e0 <HAL_GPIO_Init+0x228>
 80018ce:	2304      	movs	r3, #4
 80018d0:	e006      	b.n	80018e0 <HAL_GPIO_Init+0x228>
 80018d2:	2303      	movs	r3, #3
 80018d4:	e004      	b.n	80018e0 <HAL_GPIO_Init+0x228>
 80018d6:	2302      	movs	r3, #2
 80018d8:	e002      	b.n	80018e0 <HAL_GPIO_Init+0x228>
 80018da:	2301      	movs	r3, #1
 80018dc:	e000      	b.n	80018e0 <HAL_GPIO_Init+0x228>
 80018de:	2300      	movs	r3, #0
 80018e0:	69fa      	ldr	r2, [r7, #28]
 80018e2:	f002 0203 	and.w	r2, r2, #3
 80018e6:	0092      	lsls	r2, r2, #2
 80018e8:	4093      	lsls	r3, r2
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018f0:	4934      	ldr	r1, [pc, #208]	; (80019c4 <HAL_GPIO_Init+0x30c>)
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	089b      	lsrs	r3, r3, #2
 80018f6:	3302      	adds	r3, #2
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018fe:	4b3a      	ldr	r3, [pc, #232]	; (80019e8 <HAL_GPIO_Init+0x330>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	43db      	mvns	r3, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4013      	ands	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001922:	4a31      	ldr	r2, [pc, #196]	; (80019e8 <HAL_GPIO_Init+0x330>)
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001928:	4b2f      	ldr	r3, [pc, #188]	; (80019e8 <HAL_GPIO_Init+0x330>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	4313      	orrs	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800194c:	4a26      	ldr	r2, [pc, #152]	; (80019e8 <HAL_GPIO_Init+0x330>)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001952:	4b25      	ldr	r3, [pc, #148]	; (80019e8 <HAL_GPIO_Init+0x330>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	43db      	mvns	r3, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4013      	ands	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001976:	4a1c      	ldr	r2, [pc, #112]	; (80019e8 <HAL_GPIO_Init+0x330>)
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800197c:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <HAL_GPIO_Init+0x330>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	4313      	orrs	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019a0:	4a11      	ldr	r2, [pc, #68]	; (80019e8 <HAL_GPIO_Init+0x330>)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3301      	adds	r3, #1
 80019aa:	61fb      	str	r3, [r7, #28]
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	2b0f      	cmp	r3, #15
 80019b0:	f67f ae90 	bls.w	80016d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019b4:	bf00      	nop
 80019b6:	3724      	adds	r7, #36	; 0x24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40013800 	.word	0x40013800
 80019c8:	40020000 	.word	0x40020000
 80019cc:	40020400 	.word	0x40020400
 80019d0:	40020800 	.word	0x40020800
 80019d4:	40020c00 	.word	0x40020c00
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40021400 	.word	0x40021400
 80019e0:	40021800 	.word	0x40021800
 80019e4:	40021c00 	.word	0x40021c00
 80019e8:	40013c00 	.word	0x40013c00

080019ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	807b      	strh	r3, [r7, #2]
 80019f8:	4613      	mov	r3, r2
 80019fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019fc:	787b      	ldrb	r3, [r7, #1]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a02:	887a      	ldrh	r2, [r7, #2]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a08:	e003      	b.n	8001a12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a0a:	887b      	ldrh	r3, [r7, #2]
 8001a0c:	041a      	lsls	r2, r3, #16
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	619a      	str	r2, [r3, #24]
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001a1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a20:	b08f      	sub	sp, #60	; 0x3c
 8001a22:	af0a      	add	r7, sp, #40	; 0x28
 8001a24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e054      	b.n	8001ada <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d106      	bne.n	8001a50 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f006 fa28 	bl	8007ea0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2203      	movs	r2, #3
 8001a54:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d102      	bne.n	8001a6a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f004 fae2 	bl	8006038 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	603b      	str	r3, [r7, #0]
 8001a7a:	687e      	ldr	r6, [r7, #4]
 8001a7c:	466d      	mov	r5, sp
 8001a7e:	f106 0410 	add.w	r4, r6, #16
 8001a82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a92:	1d33      	adds	r3, r6, #4
 8001a94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a96:	6838      	ldr	r0, [r7, #0]
 8001a98:	f004 fa5c 	bl	8005f54 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f004 fad9 	bl	800605a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	603b      	str	r3, [r7, #0]
 8001aae:	687e      	ldr	r6, [r7, #4]
 8001ab0:	466d      	mov	r5, sp
 8001ab2:	f106 0410 	add.w	r4, r6, #16
 8001ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ab8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001abc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001abe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ac2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ac6:	1d33      	adds	r3, r6, #4
 8001ac8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aca:	6838      	ldr	r0, [r7, #0]
 8001acc:	f004 fbec 	bl	80062a8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ae2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001ae2:	b590      	push	{r4, r7, lr}
 8001ae4:	b089      	sub	sp, #36	; 0x24
 8001ae6:	af04      	add	r7, sp, #16
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	4608      	mov	r0, r1
 8001aec:	4611      	mov	r1, r2
 8001aee:	461a      	mov	r2, r3
 8001af0:	4603      	mov	r3, r0
 8001af2:	70fb      	strb	r3, [r7, #3]
 8001af4:	460b      	mov	r3, r1
 8001af6:	70bb      	strb	r3, [r7, #2]
 8001af8:	4613      	mov	r3, r2
 8001afa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d101      	bne.n	8001b0a <HAL_HCD_HC_Init+0x28>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e07f      	b.n	8001c0a <HAL_HCD_HC_Init+0x128>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001b12:	78fa      	ldrb	r2, [r7, #3]
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	440b      	add	r3, r1
 8001b20:	333d      	adds	r3, #61	; 0x3d
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001b26:	78fa      	ldrb	r2, [r7, #3]
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	440b      	add	r3, r1
 8001b34:	3338      	adds	r3, #56	; 0x38
 8001b36:	787a      	ldrb	r2, [r7, #1]
 8001b38:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001b3a:	78fa      	ldrb	r2, [r7, #3]
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	440b      	add	r3, r1
 8001b48:	3340      	adds	r3, #64	; 0x40
 8001b4a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001b4c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b4e:	78fa      	ldrb	r2, [r7, #3]
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	440b      	add	r3, r1
 8001b5c:	3339      	adds	r3, #57	; 0x39
 8001b5e:	78fa      	ldrb	r2, [r7, #3]
 8001b60:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001b62:	78fa      	ldrb	r2, [r7, #3]
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	440b      	add	r3, r1
 8001b70:	333f      	adds	r3, #63	; 0x3f
 8001b72:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001b76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001b78:	78fa      	ldrb	r2, [r7, #3]
 8001b7a:	78bb      	ldrb	r3, [r7, #2]
 8001b7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b80:	b2d8      	uxtb	r0, r3
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	440b      	add	r3, r1
 8001b8e:	333a      	adds	r3, #58	; 0x3a
 8001b90:	4602      	mov	r2, r0
 8001b92:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001b94:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	da0a      	bge.n	8001bb2 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001b9c:	78fa      	ldrb	r2, [r7, #3]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	440b      	add	r3, r1
 8001baa:	333b      	adds	r3, #59	; 0x3b
 8001bac:	2201      	movs	r2, #1
 8001bae:	701a      	strb	r2, [r3, #0]
 8001bb0:	e009      	b.n	8001bc6 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001bb2:	78fa      	ldrb	r2, [r7, #3]
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	440b      	add	r3, r1
 8001bc0:	333b      	adds	r3, #59	; 0x3b
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001bc6:	78fa      	ldrb	r2, [r7, #3]
 8001bc8:	6879      	ldr	r1, [r7, #4]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	440b      	add	r3, r1
 8001bd4:	333c      	adds	r3, #60	; 0x3c
 8001bd6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001bda:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	787c      	ldrb	r4, [r7, #1]
 8001be2:	78ba      	ldrb	r2, [r7, #2]
 8001be4:	78f9      	ldrb	r1, [r7, #3]
 8001be6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001be8:	9302      	str	r3, [sp, #8]
 8001bea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001bee:	9301      	str	r3, [sp, #4]
 8001bf0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	4623      	mov	r3, r4
 8001bf8:	f004 fc96 	bl	8006528 <USB_HC_Init>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd90      	pop	{r4, r7, pc}

08001c12 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b084      	sub	sp, #16
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d101      	bne.n	8001c30 <HAL_HCD_HC_Halt+0x1e>
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	e00f      	b.n	8001c50 <HAL_HCD_HC_Halt+0x3e>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	78fa      	ldrb	r2, [r7, #3]
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f004 fed0 	bl	80069e6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	4608      	mov	r0, r1
 8001c62:	4611      	mov	r1, r2
 8001c64:	461a      	mov	r2, r3
 8001c66:	4603      	mov	r3, r0
 8001c68:	70fb      	strb	r3, [r7, #3]
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	70bb      	strb	r3, [r7, #2]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8001c72:	78fa      	ldrb	r2, [r7, #3]
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	4613      	mov	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	440b      	add	r3, r1
 8001c80:	333b      	adds	r3, #59	; 0x3b
 8001c82:	78ba      	ldrb	r2, [r7, #2]
 8001c84:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001c86:	78fa      	ldrb	r2, [r7, #3]
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	440b      	add	r3, r1
 8001c94:	333f      	adds	r3, #63	; 0x3f
 8001c96:	787a      	ldrb	r2, [r7, #1]
 8001c98:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001c9a:	7c3b      	ldrb	r3, [r7, #16]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d10a      	bne.n	8001cb6 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001ca0:	78fa      	ldrb	r2, [r7, #3]
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	440b      	add	r3, r1
 8001cae:	3342      	adds	r3, #66	; 0x42
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	701a      	strb	r2, [r3, #0]
 8001cb4:	e009      	b.n	8001cca <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cb6:	78fa      	ldrb	r2, [r7, #3]
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	440b      	add	r3, r1
 8001cc4:	3342      	adds	r3, #66	; 0x42
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001cca:	787b      	ldrb	r3, [r7, #1]
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	f200 80d6 	bhi.w	8001e7e <HAL_HCD_HC_SubmitRequest+0x226>
 8001cd2:	a201      	add	r2, pc, #4	; (adr r2, 8001cd8 <HAL_HCD_HC_SubmitRequest+0x80>)
 8001cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd8:	08001ce9 	.word	0x08001ce9
 8001cdc:	08001e69 	.word	0x08001e69
 8001ce0:	08001d55 	.word	0x08001d55
 8001ce4:	08001ddf 	.word	0x08001ddf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001ce8:	7c3b      	ldrb	r3, [r7, #16]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	f040 80c9 	bne.w	8001e82 <HAL_HCD_HC_SubmitRequest+0x22a>
 8001cf0:	78bb      	ldrb	r3, [r7, #2]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f040 80c5 	bne.w	8001e82 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8001cf8:	8b3b      	ldrh	r3, [r7, #24]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d109      	bne.n	8001d12 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001cfe:	78fa      	ldrb	r2, [r7, #3]
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	440b      	add	r3, r1
 8001d0c:	3351      	adds	r3, #81	; 0x51
 8001d0e:	2201      	movs	r2, #1
 8001d10:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d12:	78fa      	ldrb	r2, [r7, #3]
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	440b      	add	r3, r1
 8001d20:	3351      	adds	r3, #81	; 0x51
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d10a      	bne.n	8001d3e <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d28:	78fa      	ldrb	r2, [r7, #3]
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	440b      	add	r3, r1
 8001d36:	3342      	adds	r3, #66	; 0x42
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d3c:	e0a1      	b.n	8001e82 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d3e:	78fa      	ldrb	r2, [r7, #3]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	440b      	add	r3, r1
 8001d4c:	3342      	adds	r3, #66	; 0x42
 8001d4e:	2202      	movs	r2, #2
 8001d50:	701a      	strb	r2, [r3, #0]
      break;
 8001d52:	e096      	b.n	8001e82 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001d54:	78bb      	ldrb	r3, [r7, #2]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d120      	bne.n	8001d9c <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d5a:	78fa      	ldrb	r2, [r7, #3]
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	440b      	add	r3, r1
 8001d68:	3351      	adds	r3, #81	; 0x51
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10a      	bne.n	8001d86 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d70:	78fa      	ldrb	r2, [r7, #3]
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	440b      	add	r3, r1
 8001d7e:	3342      	adds	r3, #66	; 0x42
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001d84:	e07e      	b.n	8001e84 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d86:	78fa      	ldrb	r2, [r7, #3]
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	440b      	add	r3, r1
 8001d94:	3342      	adds	r3, #66	; 0x42
 8001d96:	2202      	movs	r2, #2
 8001d98:	701a      	strb	r2, [r3, #0]
      break;
 8001d9a:	e073      	b.n	8001e84 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d9c:	78fa      	ldrb	r2, [r7, #3]
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	440b      	add	r3, r1
 8001daa:	3350      	adds	r3, #80	; 0x50
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10a      	bne.n	8001dc8 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001db2:	78fa      	ldrb	r2, [r7, #3]
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	440b      	add	r3, r1
 8001dc0:	3342      	adds	r3, #66	; 0x42
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]
      break;
 8001dc6:	e05d      	b.n	8001e84 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dc8:	78fa      	ldrb	r2, [r7, #3]
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	440b      	add	r3, r1
 8001dd6:	3342      	adds	r3, #66	; 0x42
 8001dd8:	2202      	movs	r2, #2
 8001dda:	701a      	strb	r2, [r3, #0]
      break;
 8001ddc:	e052      	b.n	8001e84 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001dde:	78bb      	ldrb	r3, [r7, #2]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d120      	bne.n	8001e26 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001de4:	78fa      	ldrb	r2, [r7, #3]
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	440b      	add	r3, r1
 8001df2:	3351      	adds	r3, #81	; 0x51
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10a      	bne.n	8001e10 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001dfa:	78fa      	ldrb	r2, [r7, #3]
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	440b      	add	r3, r1
 8001e08:	3342      	adds	r3, #66	; 0x42
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001e0e:	e039      	b.n	8001e84 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e10:	78fa      	ldrb	r2, [r7, #3]
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	440b      	add	r3, r1
 8001e1e:	3342      	adds	r3, #66	; 0x42
 8001e20:	2202      	movs	r2, #2
 8001e22:	701a      	strb	r2, [r3, #0]
      break;
 8001e24:	e02e      	b.n	8001e84 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e26:	78fa      	ldrb	r2, [r7, #3]
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	440b      	add	r3, r1
 8001e34:	3350      	adds	r3, #80	; 0x50
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10a      	bne.n	8001e52 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e3c:	78fa      	ldrb	r2, [r7, #3]
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	440b      	add	r3, r1
 8001e4a:	3342      	adds	r3, #66	; 0x42
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
      break;
 8001e50:	e018      	b.n	8001e84 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e52:	78fa      	ldrb	r2, [r7, #3]
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	440b      	add	r3, r1
 8001e60:	3342      	adds	r3, #66	; 0x42
 8001e62:	2202      	movs	r2, #2
 8001e64:	701a      	strb	r2, [r3, #0]
      break;
 8001e66:	e00d      	b.n	8001e84 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e68:	78fa      	ldrb	r2, [r7, #3]
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	440b      	add	r3, r1
 8001e76:	3342      	adds	r3, #66	; 0x42
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
      break;
 8001e7c:	e002      	b.n	8001e84 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8001e7e:	bf00      	nop
 8001e80:	e000      	b.n	8001e84 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8001e82:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001e84:	78fa      	ldrb	r2, [r7, #3]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	440b      	add	r3, r1
 8001e92:	3344      	adds	r3, #68	; 0x44
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001e98:	78fa      	ldrb	r2, [r7, #3]
 8001e9a:	8b39      	ldrh	r1, [r7, #24]
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	4403      	add	r3, r0
 8001ea8:	3348      	adds	r3, #72	; 0x48
 8001eaa:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001eac:	78fa      	ldrb	r2, [r7, #3]
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	440b      	add	r3, r1
 8001eba:	335c      	adds	r3, #92	; 0x5c
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001ec0:	78fa      	ldrb	r2, [r7, #3]
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	440b      	add	r3, r1
 8001ece:	334c      	adds	r3, #76	; 0x4c
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ed4:	78fa      	ldrb	r2, [r7, #3]
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	440b      	add	r3, r1
 8001ee2:	3339      	adds	r3, #57	; 0x39
 8001ee4:	78fa      	ldrb	r2, [r7, #3]
 8001ee6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001ee8:	78fa      	ldrb	r2, [r7, #3]
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	440b      	add	r3, r1
 8001ef6:	335d      	adds	r3, #93	; 0x5d
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	78fa      	ldrb	r2, [r7, #3]
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	3338      	adds	r3, #56	; 0x38
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	18d1      	adds	r1, r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	461a      	mov	r2, r3
 8001f18:	f004 fc10 	bl	800673c <USB_HC_StartXfer>
 8001f1c:	4603      	mov	r3, r0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop

08001f28 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f004 f96f 	bl	8006222 <USB_GetMode>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	f040 80f1 	bne.w	800212e <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f004 f953 	bl	80061fc <USB_ReadInterrupts>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 80e7 	beq.w	800212c <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f004 f94a 	bl	80061fc <USB_ReadInterrupts>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f72:	d104      	bne.n	8001f7e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f004 f93a 	bl	80061fc <USB_ReadInterrupts>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f92:	d104      	bne.n	8001f9e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f9c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f004 f92a 	bl	80061fc <USB_ReadInterrupts>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001fb2:	d104      	bne.n	8001fbe <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fbc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f004 f91a 	bl	80061fc <USB_ReadInterrupts>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d103      	bne.n	8001fda <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f004 f90c 	bl	80061fc <USB_ReadInterrupts>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fee:	d117      	bne.n	8002020 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001ffe:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002002:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f005 ffc9 	bl	8007f9c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2101      	movs	r1, #1
 8002010:	4618      	mov	r0, r3
 8002012:	f004 fa05 	bl	8006420 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800201e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f004 f8e9 	bl	80061fc <USB_ReadInterrupts>
 800202a:	4603      	mov	r3, r0
 800202c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002034:	d102      	bne.n	800203c <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f001 f8ac 	bl	8003194 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f004 f8db 	bl	80061fc <USB_ReadInterrupts>
 8002046:	4603      	mov	r3, r0
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	2b08      	cmp	r3, #8
 800204e:	d106      	bne.n	800205e <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f005 ff87 	bl	8007f64 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2208      	movs	r2, #8
 800205c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f004 f8ca 	bl	80061fc <USB_ReadInterrupts>
 8002068:	4603      	mov	r3, r0
 800206a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002072:	d138      	bne.n	80020e6 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f004 fca3 	bl	80069c4 <USB_HC_ReadInterrupt>
 800207e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	e025      	b.n	80020d2 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f003 030f 	and.w	r3, r3, #15
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	fa22 f303 	lsr.w	r3, r2, r3
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d018      	beq.n	80020cc <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	015a      	lsls	r2, r3, #5
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4413      	add	r3, r2
 80020a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020b0:	d106      	bne.n	80020c0 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	4619      	mov	r1, r3
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f8b3 	bl	8002224 <HCD_HC_IN_IRQHandler>
 80020be:	e005      	b.n	80020cc <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	4619      	mov	r1, r3
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 fc43 	bl	8002952 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	3301      	adds	r3, #1
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d3d4      	bcc.n	8002086 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f004 f886 	bl	80061fc <USB_ReadInterrupts>
 80020f0:	4603      	mov	r3, r0
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	2b10      	cmp	r3, #16
 80020f8:	d101      	bne.n	80020fe <HAL_HCD_IRQHandler+0x1d6>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_HCD_IRQHandler+0x1d8>
 80020fe:	2300      	movs	r3, #0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d014      	beq.n	800212e <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	699a      	ldr	r2, [r3, #24]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0210 	bic.w	r2, r2, #16
 8002112:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 ff91 	bl	800303c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	699a      	ldr	r2, [r3, #24]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f042 0210 	orr.w	r2, r2, #16
 8002128:	619a      	str	r2, [r3, #24]
 800212a:	e000      	b.n	800212e <HAL_HCD_IRQHandler+0x206>
      return;
 800212c:	bf00      	nop
    }
  }
}
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002142:	2b01      	cmp	r3, #1
 8002144:	d101      	bne.n	800214a <HAL_HCD_Start+0x16>
 8002146:	2302      	movs	r3, #2
 8002148:	e013      	b.n	8002172 <HAL_HCD_Start+0x3e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f003 ff5d 	bl	8006016 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2101      	movs	r1, #1
 8002162:	4618      	mov	r0, r3
 8002164:	f004 f996 	bl	8006494 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002188:	2b01      	cmp	r3, #1
 800218a:	d101      	bne.n	8002190 <HAL_HCD_Stop+0x16>
 800218c:	2302      	movs	r3, #2
 800218e:	e00d      	b.n	80021ac <HAL_HCD_Stop+0x32>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f004 fd5d 	bl	8006c5c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80021c0:	78fa      	ldrb	r2, [r7, #3]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	440b      	add	r3, r1
 80021ce:	335c      	adds	r3, #92	; 0x5c
 80021d0:	781b      	ldrb	r3, [r3, #0]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	460b      	mov	r3, r1
 80021e8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80021ea:	78fa      	ldrb	r2, [r7, #3]
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	440b      	add	r3, r1
 80021f8:	334c      	adds	r3, #76	; 0x4c
 80021fa:	681b      	ldr	r3, [r3, #0]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f004 f976 	bl	8006506 <USB_GetCurrentFrame>
 800221a:	4603      	mov	r3, r0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800223a:	78fb      	ldrb	r3, [r7, #3]
 800223c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	015a      	lsls	r2, r3, #5
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4413      	add	r3, r2
 8002246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b04      	cmp	r3, #4
 8002252:	d119      	bne.n	8002288 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	015a      	lsls	r2, r3, #5
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4413      	add	r3, r2
 800225c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002260:	461a      	mov	r2, r3
 8002262:	2304      	movs	r3, #4
 8002264:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	015a      	lsls	r2, r3, #5
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4413      	add	r3, r2
 800226e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	0151      	lsls	r1, r2, #5
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	440a      	add	r2, r1
 800227c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002280:	f043 0302 	orr.w	r3, r3, #2
 8002284:	60d3      	str	r3, [r2, #12]
 8002286:	e095      	b.n	80023b4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	015a      	lsls	r2, r3, #5
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4413      	add	r3, r2
 8002290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 0320 	and.w	r3, r3, #32
 800229a:	2b20      	cmp	r3, #32
 800229c:	d109      	bne.n	80022b2 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022aa:	461a      	mov	r2, r3
 80022ac:	2320      	movs	r3, #32
 80022ae:	6093      	str	r3, [r2, #8]
 80022b0:	e080      	b.n	80023b4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	015a      	lsls	r2, r3, #5
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4413      	add	r3, r2
 80022ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 0308 	and.w	r3, r3, #8
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d134      	bne.n	8002332 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	015a      	lsls	r2, r3, #5
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	4413      	add	r3, r2
 80022d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	0151      	lsls	r1, r2, #5
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	440a      	add	r2, r1
 80022de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022e2:	f043 0302 	orr.w	r3, r3, #2
 80022e6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	440b      	add	r3, r1
 80022f6:	335d      	adds	r3, #93	; 0x5d
 80022f8:	2205      	movs	r2, #5
 80022fa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	015a      	lsls	r2, r3, #5
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	4413      	add	r3, r2
 8002304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002308:	461a      	mov	r2, r3
 800230a:	2310      	movs	r3, #16
 800230c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	015a      	lsls	r2, r3, #5
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4413      	add	r3, r2
 8002316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800231a:	461a      	mov	r2, r3
 800231c:	2308      	movs	r3, #8
 800231e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	4611      	mov	r1, r2
 800232a:	4618      	mov	r0, r3
 800232c:	f004 fb5b 	bl	80069e6 <USB_HC_Halt>
 8002330:	e040      	b.n	80023b4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4413      	add	r3, r2
 800233a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002348:	d134      	bne.n	80023b4 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	015a      	lsls	r2, r3, #5
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4413      	add	r3, r2
 8002352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	0151      	lsls	r1, r2, #5
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	440a      	add	r2, r1
 8002360:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002364:	f043 0302 	orr.w	r3, r3, #2
 8002368:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	4611      	mov	r1, r2
 8002374:	4618      	mov	r0, r3
 8002376:	f004 fb36 	bl	80069e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	015a      	lsls	r2, r3, #5
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4413      	add	r3, r2
 8002382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002386:	461a      	mov	r2, r3
 8002388:	2310      	movs	r3, #16
 800238a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	440b      	add	r3, r1
 800239a:	335d      	adds	r3, #93	; 0x5d
 800239c:	2208      	movs	r2, #8
 800239e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	015a      	lsls	r2, r3, #5
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4413      	add	r3, r2
 80023a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ac:	461a      	mov	r2, r3
 80023ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023b2:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023ca:	d122      	bne.n	8002412 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	015a      	lsls	r2, r3, #5
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4413      	add	r3, r2
 80023d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	0151      	lsls	r1, r2, #5
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	440a      	add	r2, r1
 80023e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023e6:	f043 0302 	orr.w	r3, r3, #2
 80023ea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	4611      	mov	r1, r2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f004 faf5 	bl	80069e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	015a      	lsls	r2, r3, #5
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4413      	add	r3, r2
 8002404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002408:	461a      	mov	r2, r3
 800240a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800240e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002410:	e29b      	b.n	800294a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	015a      	lsls	r2, r3, #5
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4413      	add	r3, r2
 800241a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b01      	cmp	r3, #1
 8002426:	f040 80c1 	bne.w	80025ac <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d01b      	beq.n	800246a <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	440b      	add	r3, r1
 8002440:	3348      	adds	r3, #72	; 0x48
 8002442:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	0159      	lsls	r1, r3, #5
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	440b      	add	r3, r1
 800244c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002456:	1ad1      	subs	r1, r2, r3
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	4403      	add	r3, r0
 8002466:	334c      	adds	r3, #76	; 0x4c
 8002468:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	4613      	mov	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	440b      	add	r3, r1
 8002478:	335d      	adds	r3, #93	; 0x5d
 800247a:	2201      	movs	r2, #1
 800247c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	440b      	add	r3, r1
 800248c:	3358      	adds	r3, #88	; 0x58
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	015a      	lsls	r2, r3, #5
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	4413      	add	r3, r2
 800249a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249e:	461a      	mov	r2, r3
 80024a0:	2301      	movs	r3, #1
 80024a2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	4613      	mov	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	440b      	add	r3, r1
 80024b2:	333f      	adds	r3, #63	; 0x3f
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00a      	beq.n	80024d0 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	440b      	add	r3, r1
 80024c8:	333f      	adds	r3, #63	; 0x3f
 80024ca:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d121      	bne.n	8002514 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	015a      	lsls	r2, r3, #5
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	4413      	add	r3, r2
 80024d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	0151      	lsls	r1, r2, #5
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	440a      	add	r2, r1
 80024e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024ea:	f043 0302 	orr.w	r3, r3, #2
 80024ee:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	4611      	mov	r1, r2
 80024fa:	4618      	mov	r0, r3
 80024fc:	f004 fa73 	bl	80069e6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	015a      	lsls	r2, r3, #5
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	4413      	add	r3, r2
 8002508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250c:	461a      	mov	r2, r3
 800250e:	2310      	movs	r3, #16
 8002510:	6093      	str	r3, [r2, #8]
 8002512:	e034      	b.n	800257e <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	440b      	add	r3, r1
 8002522:	333f      	adds	r3, #63	; 0x3f
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b03      	cmp	r3, #3
 8002528:	d129      	bne.n	800257e <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	015a      	lsls	r2, r3, #5
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	4413      	add	r3, r2
 8002532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	0151      	lsls	r1, r2, #5
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	440a      	add	r2, r1
 8002540:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002544:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002548:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	4613      	mov	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	440b      	add	r3, r1
 8002558:	335c      	adds	r3, #92	; 0x5c
 800255a:	2201      	movs	r2, #1
 800255c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	b2d8      	uxtb	r0, r3
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	440b      	add	r3, r1
 8002570:	335c      	adds	r3, #92	; 0x5c
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	461a      	mov	r2, r3
 8002576:	4601      	mov	r1, r0
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f005 fd1d 	bl	8007fb8 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	440b      	add	r3, r1
 800258c:	3350      	adds	r3, #80	; 0x50
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	f083 0301 	eor.w	r3, r3, #1
 8002594:	b2d8      	uxtb	r0, r3
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	440b      	add	r3, r1
 80025a4:	3350      	adds	r3, #80	; 0x50
 80025a6:	4602      	mov	r2, r0
 80025a8:	701a      	strb	r2, [r3, #0]
}
 80025aa:	e1ce      	b.n	800294a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	015a      	lsls	r2, r3, #5
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b02      	cmp	r3, #2
 80025c0:	f040 80f1 	bne.w	80027a6 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	015a      	lsls	r2, r3, #5
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	0151      	lsls	r1, r2, #5
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	440a      	add	r2, r1
 80025da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025de:	f023 0302 	bic.w	r3, r3, #2
 80025e2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	440b      	add	r3, r1
 80025f2:	335d      	adds	r3, #93	; 0x5d
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d10a      	bne.n	8002610 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	440b      	add	r3, r1
 8002608:	335c      	adds	r3, #92	; 0x5c
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]
 800260e:	e0b0      	b.n	8002772 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	440b      	add	r3, r1
 800261e:	335d      	adds	r3, #93	; 0x5d
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b05      	cmp	r3, #5
 8002624:	d10a      	bne.n	800263c <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	440b      	add	r3, r1
 8002634:	335c      	adds	r3, #92	; 0x5c
 8002636:	2205      	movs	r2, #5
 8002638:	701a      	strb	r2, [r3, #0]
 800263a:	e09a      	b.n	8002772 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	440b      	add	r3, r1
 800264a:	335d      	adds	r3, #93	; 0x5d
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b06      	cmp	r3, #6
 8002650:	d00a      	beq.n	8002668 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	440b      	add	r3, r1
 8002660:	335d      	adds	r3, #93	; 0x5d
 8002662:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002664:	2b08      	cmp	r3, #8
 8002666:	d156      	bne.n	8002716 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	4613      	mov	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	440b      	add	r3, r1
 8002676:	3358      	adds	r3, #88	; 0x58
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	1c59      	adds	r1, r3, #1
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4403      	add	r3, r0
 800268a:	3358      	adds	r3, #88	; 0x58
 800268c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	4613      	mov	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	440b      	add	r3, r1
 800269c:	3358      	adds	r3, #88	; 0x58
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d914      	bls.n	80026ce <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	4613      	mov	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	440b      	add	r3, r1
 80026b2:	3358      	adds	r3, #88	; 0x58
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	440b      	add	r3, r1
 80026c6:	335c      	adds	r3, #92	; 0x5c
 80026c8:	2204      	movs	r2, #4
 80026ca:	701a      	strb	r2, [r3, #0]
 80026cc:	e009      	b.n	80026e2 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	440b      	add	r3, r1
 80026dc:	335c      	adds	r3, #92	; 0x5c
 80026de:	2202      	movs	r2, #2
 80026e0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026f8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002700:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4413      	add	r3, r2
 800270a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270e:	461a      	mov	r2, r3
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	e02d      	b.n	8002772 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	440b      	add	r3, r1
 8002724:	335d      	adds	r3, #93	; 0x5d
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b03      	cmp	r3, #3
 800272a:	d122      	bne.n	8002772 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	440b      	add	r3, r1
 800273a:	335c      	adds	r3, #92	; 0x5c
 800273c:	2202      	movs	r2, #2
 800273e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4413      	add	r3, r2
 8002748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002756:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800275e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4413      	add	r3, r2
 8002768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276c:	461a      	mov	r2, r3
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	015a      	lsls	r2, r3, #5
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4413      	add	r3, r2
 800277a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277e:	461a      	mov	r2, r3
 8002780:	2302      	movs	r3, #2
 8002782:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	b2d8      	uxtb	r0, r3
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	440b      	add	r3, r1
 8002796:	335c      	adds	r3, #92	; 0x5c
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	461a      	mov	r2, r3
 800279c:	4601      	mov	r1, r0
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f005 fc0a 	bl	8007fb8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80027a4:	e0d1      	b.n	800294a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	015a      	lsls	r2, r3, #5
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	4413      	add	r3, r2
 80027ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b8:	2b80      	cmp	r3, #128	; 0x80
 80027ba:	d13e      	bne.n	800283a <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	015a      	lsls	r2, r3, #5
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4413      	add	r3, r2
 80027c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	0151      	lsls	r1, r2, #5
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	440a      	add	r2, r1
 80027d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027d6:	f043 0302 	orr.w	r3, r3, #2
 80027da:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	440b      	add	r3, r1
 80027ea:	3358      	adds	r3, #88	; 0x58
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	1c59      	adds	r1, r3, #1
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4403      	add	r3, r0
 80027fe:	3358      	adds	r3, #88	; 0x58
 8002800:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	4613      	mov	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	440b      	add	r3, r1
 8002810:	335d      	adds	r3, #93	; 0x5d
 8002812:	2206      	movs	r2, #6
 8002814:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	4611      	mov	r1, r2
 8002820:	4618      	mov	r0, r3
 8002822:	f004 f8e0 	bl	80069e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	015a      	lsls	r2, r3, #5
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4413      	add	r3, r2
 800282e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002832:	461a      	mov	r2, r3
 8002834:	2380      	movs	r3, #128	; 0x80
 8002836:	6093      	str	r3, [r2, #8]
}
 8002838:	e087      	b.n	800294a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	015a      	lsls	r2, r3, #5
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4413      	add	r3, r2
 8002842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 0310 	and.w	r3, r3, #16
 800284c:	2b10      	cmp	r3, #16
 800284e:	d17c      	bne.n	800294a <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	440b      	add	r3, r1
 800285e:	333f      	adds	r3, #63	; 0x3f
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b03      	cmp	r3, #3
 8002864:	d122      	bne.n	80028ac <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	440b      	add	r3, r1
 8002874:	3358      	adds	r3, #88	; 0x58
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4413      	add	r3, r2
 8002882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	0151      	lsls	r1, r2, #5
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	440a      	add	r2, r1
 8002890:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002894:	f043 0302 	orr.w	r3, r3, #2
 8002898:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	4611      	mov	r1, r2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f004 f89e 	bl	80069e6 <USB_HC_Halt>
 80028aa:	e045      	b.n	8002938 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	440b      	add	r3, r1
 80028ba:	333f      	adds	r3, #63	; 0x3f
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	440b      	add	r3, r1
 80028d0:	333f      	adds	r3, #63	; 0x3f
 80028d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d12f      	bne.n	8002938 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	440b      	add	r3, r1
 80028e6:	3358      	adds	r3, #88	; 0x58
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d121      	bne.n	8002938 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	440b      	add	r3, r1
 8002902:	335d      	adds	r3, #93	; 0x5d
 8002904:	2203      	movs	r2, #3
 8002906:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	015a      	lsls	r2, r3, #5
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	4413      	add	r3, r2
 8002910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	0151      	lsls	r1, r2, #5
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	440a      	add	r2, r1
 800291e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002922:	f043 0302 	orr.w	r3, r3, #2
 8002926:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	4611      	mov	r1, r2
 8002932:	4618      	mov	r0, r3
 8002934:	f004 f857 	bl	80069e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	015a      	lsls	r2, r3, #5
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	4413      	add	r3, r2
 8002940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002944:	461a      	mov	r2, r3
 8002946:	2310      	movs	r3, #16
 8002948:	6093      	str	r3, [r2, #8]
}
 800294a:	bf00      	nop
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b086      	sub	sp, #24
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	460b      	mov	r3, r1
 800295c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002968:	78fb      	ldrb	r3, [r7, #3]
 800296a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	015a      	lsls	r2, r3, #5
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	4413      	add	r3, r2
 8002974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	2b04      	cmp	r3, #4
 8002980:	d119      	bne.n	80029b6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	015a      	lsls	r2, r3, #5
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4413      	add	r3, r2
 800298a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298e:	461a      	mov	r2, r3
 8002990:	2304      	movs	r3, #4
 8002992:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4413      	add	r3, r2
 800299c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	0151      	lsls	r1, r2, #5
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	440a      	add	r2, r1
 80029aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029ae:	f043 0302 	orr.w	r3, r3, #2
 80029b2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80029b4:	e33e      	b.n	8003034 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 0320 	and.w	r3, r3, #32
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	d141      	bne.n	8002a50 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	015a      	lsls	r2, r3, #5
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d8:	461a      	mov	r2, r3
 80029da:	2320      	movs	r3, #32
 80029dc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	4613      	mov	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	440b      	add	r3, r1
 80029ec:	333d      	adds	r3, #61	; 0x3d
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	f040 831f 	bne.w	8003034 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	4613      	mov	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	440b      	add	r3, r1
 8002a04:	333d      	adds	r3, #61	; 0x3d
 8002a06:	2200      	movs	r2, #0
 8002a08:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	440b      	add	r3, r1
 8002a18:	335c      	adds	r3, #92	; 0x5c
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	015a      	lsls	r2, r3, #5
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4413      	add	r3, r2
 8002a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	0151      	lsls	r1, r2, #5
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	440a      	add	r2, r1
 8002a34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a38:	f043 0302 	orr.w	r3, r3, #2
 8002a3c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	4611      	mov	r1, r2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f003 ffcc 	bl	80069e6 <USB_HC_Halt>
}
 8002a4e:	e2f1      	b.n	8003034 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a62:	2b40      	cmp	r3, #64	; 0x40
 8002a64:	d13f      	bne.n	8002ae6 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	440b      	add	r3, r1
 8002a74:	335d      	adds	r3, #93	; 0x5d
 8002a76:	2204      	movs	r2, #4
 8002a78:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	440b      	add	r3, r1
 8002a88:	333d      	adds	r3, #61	; 0x3d
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	4613      	mov	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	440b      	add	r3, r1
 8002a9c:	3358      	adds	r3, #88	; 0x58
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	0151      	lsls	r1, r2, #5
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	440a      	add	r2, r1
 8002ab8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002abc:	f043 0302 	orr.w	r3, r3, #2
 8002ac0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	4611      	mov	r1, r2
 8002acc:	4618      	mov	r0, r3
 8002ace:	f003 ff8a 	bl	80069e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	015a      	lsls	r2, r3, #5
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4413      	add	r3, r2
 8002ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ade:	461a      	mov	r2, r3
 8002ae0:	2340      	movs	r3, #64	; 0x40
 8002ae2:	6093      	str	r3, [r2, #8]
}
 8002ae4:	e2a6      	b.n	8003034 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	015a      	lsls	r2, r3, #5
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	4413      	add	r3, r2
 8002aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002afc:	d122      	bne.n	8002b44 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	015a      	lsls	r2, r3, #5
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4413      	add	r3, r2
 8002b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	0151      	lsls	r1, r2, #5
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	440a      	add	r2, r1
 8002b14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b18:	f043 0302 	orr.w	r3, r3, #2
 8002b1c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	4611      	mov	r1, r2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f003 ff5c 	bl	80069e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b40:	6093      	str	r3, [r2, #8]
}
 8002b42:	e277      	b.n	8003034 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	015a      	lsls	r2, r3, #5
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d135      	bne.n	8002bc6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	440b      	add	r3, r1
 8002b68:	3358      	adds	r3, #88	; 0x58
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	015a      	lsls	r2, r3, #5
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	4413      	add	r3, r2
 8002b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	0151      	lsls	r1, r2, #5
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	440a      	add	r2, r1
 8002b84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b88:	f043 0302 	orr.w	r3, r3, #2
 8002b8c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	4611      	mov	r1, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f003 ff24 	bl	80069e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	015a      	lsls	r2, r3, #5
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002baa:	461a      	mov	r2, r3
 8002bac:	2301      	movs	r3, #1
 8002bae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	440b      	add	r3, r1
 8002bbe:	335d      	adds	r3, #93	; 0x5d
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	701a      	strb	r2, [r3, #0]
}
 8002bc4:	e236      	b.n	8003034 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d12b      	bne.n	8002c34 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	015a      	lsls	r2, r3, #5
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be8:	461a      	mov	r2, r3
 8002bea:	2308      	movs	r3, #8
 8002bec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	015a      	lsls	r2, r3, #5
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	0151      	lsls	r1, r2, #5
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	440a      	add	r2, r1
 8002c04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c08:	f043 0302 	orr.w	r3, r3, #2
 8002c0c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	4611      	mov	r1, r2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f003 fee4 	bl	80069e6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	440b      	add	r3, r1
 8002c2c:	335d      	adds	r3, #93	; 0x5d
 8002c2e:	2205      	movs	r2, #5
 8002c30:	701a      	strb	r2, [r3, #0]
}
 8002c32:	e1ff      	b.n	8003034 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	015a      	lsls	r2, r3, #5
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 0310 	and.w	r3, r3, #16
 8002c46:	2b10      	cmp	r3, #16
 8002c48:	d155      	bne.n	8002cf6 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4413      	add	r3, r2
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	440b      	add	r3, r1
 8002c58:	3358      	adds	r3, #88	; 0x58
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	440b      	add	r3, r1
 8002c6c:	335d      	adds	r3, #93	; 0x5d
 8002c6e:	2203      	movs	r2, #3
 8002c70:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	440b      	add	r3, r1
 8002c80:	333d      	adds	r3, #61	; 0x3d
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d114      	bne.n	8002cb2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	440b      	add	r3, r1
 8002c96:	333c      	adds	r3, #60	; 0x3c
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d109      	bne.n	8002cb2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	440b      	add	r3, r1
 8002cac:	333d      	adds	r3, #61	; 0x3d
 8002cae:	2201      	movs	r2, #1
 8002cb0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	015a      	lsls	r2, r3, #5
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	4413      	add	r3, r2
 8002cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	0151      	lsls	r1, r2, #5
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	440a      	add	r2, r1
 8002cc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ccc:	f043 0302 	orr.w	r3, r3, #2
 8002cd0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	4611      	mov	r1, r2
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f003 fe82 	bl	80069e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	015a      	lsls	r2, r3, #5
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cee:	461a      	mov	r2, r3
 8002cf0:	2310      	movs	r3, #16
 8002cf2:	6093      	str	r3, [r2, #8]
}
 8002cf4:	e19e      	b.n	8003034 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	015a      	lsls	r2, r3, #5
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d08:	2b80      	cmp	r3, #128	; 0x80
 8002d0a:	d12b      	bne.n	8002d64 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	015a      	lsls	r2, r3, #5
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	0151      	lsls	r1, r2, #5
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	440a      	add	r2, r1
 8002d22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d26:	f043 0302 	orr.w	r3, r3, #2
 8002d2a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	4611      	mov	r1, r2
 8002d36:	4618      	mov	r0, r3
 8002d38:	f003 fe55 	bl	80069e6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	440b      	add	r3, r1
 8002d4a:	335d      	adds	r3, #93	; 0x5d
 8002d4c:	2206      	movs	r2, #6
 8002d4e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	015a      	lsls	r2, r3, #5
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4413      	add	r3, r2
 8002d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	2380      	movs	r3, #128	; 0x80
 8002d60:	6093      	str	r3, [r2, #8]
}
 8002d62:	e167      	b.n	8003034 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	015a      	lsls	r2, r3, #5
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d7a:	d135      	bne.n	8002de8 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	015a      	lsls	r2, r3, #5
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	4413      	add	r3, r2
 8002d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	0151      	lsls	r1, r2, #5
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	440a      	add	r2, r1
 8002d92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d96:	f043 0302 	orr.w	r3, r3, #2
 8002d9a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	4611      	mov	r1, r2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f003 fe1d 	bl	80069e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	015a      	lsls	r2, r3, #5
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	4413      	add	r3, r2
 8002db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db8:	461a      	mov	r2, r3
 8002dba:	2310      	movs	r3, #16
 8002dbc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	015a      	lsls	r2, r3, #5
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dca:	461a      	mov	r2, r3
 8002dcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dd0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4413      	add	r3, r2
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	440b      	add	r3, r1
 8002de0:	335d      	adds	r3, #93	; 0x5d
 8002de2:	2208      	movs	r2, #8
 8002de4:	701a      	strb	r2, [r3, #0]
}
 8002de6:	e125      	b.n	8003034 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	015a      	lsls	r2, r3, #5
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	4413      	add	r3, r2
 8002df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	f040 811a 	bne.w	8003034 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	015a      	lsls	r2, r3, #5
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	0151      	lsls	r1, r2, #5
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	440a      	add	r2, r1
 8002e16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e1a:	f023 0302 	bic.w	r3, r3, #2
 8002e1e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	440b      	add	r3, r1
 8002e2e:	335d      	adds	r3, #93	; 0x5d
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d137      	bne.n	8002ea6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	440b      	add	r3, r1
 8002e44:	335c      	adds	r3, #92	; 0x5c
 8002e46:	2201      	movs	r2, #1
 8002e48:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	440b      	add	r3, r1
 8002e58:	333f      	adds	r3, #63	; 0x3f
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d00b      	beq.n	8002e78 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	440b      	add	r3, r1
 8002e6e:	333f      	adds	r3, #63	; 0x3f
 8002e70:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	f040 80c5 	bne.w	8003002 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	440b      	add	r3, r1
 8002e86:	3351      	adds	r3, #81	; 0x51
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	f083 0301 	eor.w	r3, r3, #1
 8002e8e:	b2d8      	uxtb	r0, r3
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4613      	mov	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	440b      	add	r3, r1
 8002e9e:	3351      	adds	r3, #81	; 0x51
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	701a      	strb	r2, [r3, #0]
 8002ea4:	e0ad      	b.n	8003002 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	440b      	add	r3, r1
 8002eb4:	335d      	adds	r3, #93	; 0x5d
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b03      	cmp	r3, #3
 8002eba:	d10a      	bne.n	8002ed2 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	440b      	add	r3, r1
 8002eca:	335c      	adds	r3, #92	; 0x5c
 8002ecc:	2202      	movs	r2, #2
 8002ece:	701a      	strb	r2, [r3, #0]
 8002ed0:	e097      	b.n	8003002 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	440b      	add	r3, r1
 8002ee0:	335d      	adds	r3, #93	; 0x5d
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d10a      	bne.n	8002efe <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	4613      	mov	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4413      	add	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	440b      	add	r3, r1
 8002ef6:	335c      	adds	r3, #92	; 0x5c
 8002ef8:	2202      	movs	r2, #2
 8002efa:	701a      	strb	r2, [r3, #0]
 8002efc:	e081      	b.n	8003002 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	440b      	add	r3, r1
 8002f0c:	335d      	adds	r3, #93	; 0x5d
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b05      	cmp	r3, #5
 8002f12:	d10a      	bne.n	8002f2a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	440b      	add	r3, r1
 8002f22:	335c      	adds	r3, #92	; 0x5c
 8002f24:	2205      	movs	r2, #5
 8002f26:	701a      	strb	r2, [r3, #0]
 8002f28:	e06b      	b.n	8003002 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	440b      	add	r3, r1
 8002f38:	335d      	adds	r3, #93	; 0x5d
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b06      	cmp	r3, #6
 8002f3e:	d00a      	beq.n	8002f56 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	440b      	add	r3, r1
 8002f4e:	335d      	adds	r3, #93	; 0x5d
 8002f50:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f52:	2b08      	cmp	r3, #8
 8002f54:	d155      	bne.n	8003002 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	440b      	add	r3, r1
 8002f64:	3358      	adds	r3, #88	; 0x58
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	1c59      	adds	r1, r3, #1
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	4403      	add	r3, r0
 8002f78:	3358      	adds	r3, #88	; 0x58
 8002f7a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	4613      	mov	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	440b      	add	r3, r1
 8002f8a:	3358      	adds	r3, #88	; 0x58
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b03      	cmp	r3, #3
 8002f90:	d914      	bls.n	8002fbc <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	440b      	add	r3, r1
 8002fa0:	3358      	adds	r3, #88	; 0x58
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4613      	mov	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	440b      	add	r3, r1
 8002fb4:	335c      	adds	r3, #92	; 0x5c
 8002fb6:	2204      	movs	r2, #4
 8002fb8:	701a      	strb	r2, [r3, #0]
 8002fba:	e009      	b.n	8002fd0 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	440b      	add	r3, r1
 8002fca:	335c      	adds	r3, #92	; 0x5c
 8002fcc:	2202      	movs	r2, #2
 8002fce:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fe6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fee:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	015a      	lsls	r2, r3, #5
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4413      	add	r3, r2
 800300a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300e:	461a      	mov	r2, r3
 8003010:	2302      	movs	r3, #2
 8003012:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	b2d8      	uxtb	r0, r3
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	440b      	add	r3, r1
 8003026:	335c      	adds	r3, #92	; 0x5c
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	4601      	mov	r1, r0
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f004 ffc2 	bl	8007fb8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003034:	bf00      	nop
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08a      	sub	sp, #40	; 0x28
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f003 030f 	and.w	r3, r3, #15
 800305c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	0c5b      	lsrs	r3, r3, #17
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	091b      	lsrs	r3, r3, #4
 800306c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003070:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d003      	beq.n	8003080 <HCD_RXQLVL_IRQHandler+0x44>
 8003078:	2b05      	cmp	r3, #5
 800307a:	f000 8082 	beq.w	8003182 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800307e:	e083      	b.n	8003188 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d07f      	beq.n	8003186 <HCD_RXQLVL_IRQHandler+0x14a>
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	440b      	add	r3, r1
 8003094:	3344      	adds	r3, #68	; 0x44
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d074      	beq.n	8003186 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6818      	ldr	r0, [r3, #0]
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4613      	mov	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	440b      	add	r3, r1
 80030ae:	3344      	adds	r3, #68	; 0x44
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	b292      	uxth	r2, r2
 80030b6:	4619      	mov	r1, r3
 80030b8:	f003 f877 	bl	80061aa <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	440b      	add	r3, r1
 80030ca:	3344      	adds	r3, #68	; 0x44
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	18d1      	adds	r1, r2, r3
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	4403      	add	r3, r0
 80030e0:	3344      	adds	r3, #68	; 0x44
 80030e2:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	440b      	add	r3, r1
 80030f2:	334c      	adds	r3, #76	; 0x4c
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	18d1      	adds	r1, r2, r3
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4613      	mov	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	4403      	add	r3, r0
 8003108:	334c      	adds	r3, #76	; 0x4c
 800310a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	4413      	add	r3, r2
 8003114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003118:	691a      	ldr	r2, [r3, #16]
 800311a:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <HCD_RXQLVL_IRQHandler+0x154>)
 800311c:	4013      	ands	r3, r2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d031      	beq.n	8003186 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	015a      	lsls	r2, r3, #5
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	4413      	add	r3, r2
 800312a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003138:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003140:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	015a      	lsls	r2, r3, #5
 8003146:	6a3b      	ldr	r3, [r7, #32]
 8003148:	4413      	add	r3, r2
 800314a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314e:	461a      	mov	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	440b      	add	r3, r1
 8003162:	3350      	adds	r3, #80	; 0x50
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	f083 0301 	eor.w	r3, r3, #1
 800316a:	b2d8      	uxtb	r0, r3
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4613      	mov	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	440b      	add	r3, r1
 800317a:	3350      	adds	r3, #80	; 0x50
 800317c:	4602      	mov	r2, r0
 800317e:	701a      	strb	r2, [r3, #0]
      break;
 8003180:	e001      	b.n	8003186 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003182:	bf00      	nop
 8003184:	e000      	b.n	8003188 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003186:	bf00      	nop
  }
}
 8003188:	bf00      	nop
 800318a:	3728      	adds	r7, #40	; 0x28
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	1ff80000 	.word	0x1ff80000

08003194 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80031c0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d113      	bne.n	80031f4 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d10a      	bne.n	80031ec <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699a      	ldr	r2, [r3, #24]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80031e4:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f004 feca 	bl	8007f80 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	f043 0302 	orr.w	r3, r3, #2
 80031f2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b08      	cmp	r3, #8
 80031fc:	d147      	bne.n	800328e <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	f043 0308 	orr.w	r3, r3, #8
 8003204:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b04      	cmp	r3, #4
 800320e:	d129      	bne.n	8003264 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	2b02      	cmp	r3, #2
 8003216:	d113      	bne.n	8003240 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800321e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003222:	d106      	bne.n	8003232 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2102      	movs	r1, #2
 800322a:	4618      	mov	r0, r3
 800322c:	f003 f8f8 	bl	8006420 <USB_InitFSLSPClkSel>
 8003230:	e011      	b.n	8003256 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2101      	movs	r1, #1
 8003238:	4618      	mov	r0, r3
 800323a:	f003 f8f1 	bl	8006420 <USB_InitFSLSPClkSel>
 800323e:	e00a      	b.n	8003256 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d106      	bne.n	8003256 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800324e:	461a      	mov	r2, r3
 8003250:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003254:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f004 febc 	bl	8007fd4 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f004 fe8f 	bl	8007f80 <HAL_HCD_Connect_Callback>
 8003262:	e014      	b.n	800328e <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f004 fec3 	bl	8007ff0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003278:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800327c:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	699a      	ldr	r2, [r3, #24]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800328c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f003 0320 	and.w	r3, r3, #32
 8003294:	2b20      	cmp	r3, #32
 8003296:	d103      	bne.n	80032a0 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f043 0320 	orr.w	r3, r3, #32
 800329e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032a6:	461a      	mov	r2, r3
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	6013      	str	r3, [r2, #0]
}
 80032ac:	bf00      	nop
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e11f      	b.n	8003506 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d106      	bne.n	80032e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7fd fa74 	bl	80007c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2224      	movs	r2, #36	; 0x24
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0201 	bic.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003306:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003316:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003318:	f001 f9de 	bl	80046d8 <HAL_RCC_GetPCLK1Freq>
 800331c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	4a7b      	ldr	r2, [pc, #492]	; (8003510 <HAL_I2C_Init+0x25c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d807      	bhi.n	8003338 <HAL_I2C_Init+0x84>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4a7a      	ldr	r2, [pc, #488]	; (8003514 <HAL_I2C_Init+0x260>)
 800332c:	4293      	cmp	r3, r2
 800332e:	bf94      	ite	ls
 8003330:	2301      	movls	r3, #1
 8003332:	2300      	movhi	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	e006      	b.n	8003346 <HAL_I2C_Init+0x92>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4a77      	ldr	r2, [pc, #476]	; (8003518 <HAL_I2C_Init+0x264>)
 800333c:	4293      	cmp	r3, r2
 800333e:	bf94      	ite	ls
 8003340:	2301      	movls	r3, #1
 8003342:	2300      	movhi	r3, #0
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e0db      	b.n	8003506 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4a72      	ldr	r2, [pc, #456]	; (800351c <HAL_I2C_Init+0x268>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	0c9b      	lsrs	r3, r3, #18
 8003358:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	430a      	orrs	r2, r1
 800336c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	4a64      	ldr	r2, [pc, #400]	; (8003510 <HAL_I2C_Init+0x25c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d802      	bhi.n	8003388 <HAL_I2C_Init+0xd4>
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	3301      	adds	r3, #1
 8003386:	e009      	b.n	800339c <HAL_I2C_Init+0xe8>
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800338e:	fb02 f303 	mul.w	r3, r2, r3
 8003392:	4a63      	ldr	r2, [pc, #396]	; (8003520 <HAL_I2C_Init+0x26c>)
 8003394:	fba2 2303 	umull	r2, r3, r2, r3
 8003398:	099b      	lsrs	r3, r3, #6
 800339a:	3301      	adds	r3, #1
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	430b      	orrs	r3, r1
 80033a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	4956      	ldr	r1, [pc, #344]	; (8003510 <HAL_I2C_Init+0x25c>)
 80033b8:	428b      	cmp	r3, r1
 80033ba:	d80d      	bhi.n	80033d8 <HAL_I2C_Init+0x124>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	1e59      	subs	r1, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80033ca:	3301      	adds	r3, #1
 80033cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	bf38      	it	cc
 80033d4:	2304      	movcc	r3, #4
 80033d6:	e04f      	b.n	8003478 <HAL_I2C_Init+0x1c4>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d111      	bne.n	8003404 <HAL_I2C_Init+0x150>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1e58      	subs	r0, r3, #1
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6859      	ldr	r1, [r3, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	440b      	add	r3, r1
 80033ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f2:	3301      	adds	r3, #1
 80033f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf0c      	ite	eq
 80033fc:	2301      	moveq	r3, #1
 80033fe:	2300      	movne	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	e012      	b.n	800342a <HAL_I2C_Init+0x176>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	1e58      	subs	r0, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6859      	ldr	r1, [r3, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	0099      	lsls	r1, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	fbb0 f3f3 	udiv	r3, r0, r3
 800341a:	3301      	adds	r3, #1
 800341c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf0c      	ite	eq
 8003424:	2301      	moveq	r3, #1
 8003426:	2300      	movne	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <HAL_I2C_Init+0x17e>
 800342e:	2301      	movs	r3, #1
 8003430:	e022      	b.n	8003478 <HAL_I2C_Init+0x1c4>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10e      	bne.n	8003458 <HAL_I2C_Init+0x1a4>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1e58      	subs	r0, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6859      	ldr	r1, [r3, #4]
 8003442:	460b      	mov	r3, r1
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	440b      	add	r3, r1
 8003448:	fbb0 f3f3 	udiv	r3, r0, r3
 800344c:	3301      	adds	r3, #1
 800344e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003456:	e00f      	b.n	8003478 <HAL_I2C_Init+0x1c4>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	1e58      	subs	r0, r3, #1
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6859      	ldr	r1, [r3, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	0099      	lsls	r1, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	fbb0 f3f3 	udiv	r3, r0, r3
 800346e:	3301      	adds	r3, #1
 8003470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003474:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	6809      	ldr	r1, [r1, #0]
 800347c:	4313      	orrs	r3, r2
 800347e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69da      	ldr	r2, [r3, #28]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6911      	ldr	r1, [r2, #16]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	68d2      	ldr	r2, [r2, #12]
 80034b2:	4311      	orrs	r1, r2
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6812      	ldr	r2, [r2, #0]
 80034b8:	430b      	orrs	r3, r1
 80034ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695a      	ldr	r2, [r3, #20]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	000186a0 	.word	0x000186a0
 8003514:	001e847f 	.word	0x001e847f
 8003518:	003d08ff 	.word	0x003d08ff
 800351c:	431bde83 	.word	0x431bde83
 8003520:	10624dd3 	.word	0x10624dd3

08003524 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e128      	b.n	8003788 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d109      	bne.n	8003556 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a90      	ldr	r2, [pc, #576]	; (8003790 <HAL_I2S_Init+0x26c>)
 800354e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7fd f9b1 	bl	80008b8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2202      	movs	r2, #2
 800355a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6812      	ldr	r2, [r2, #0]
 8003568:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800356c:	f023 030f 	bic.w	r3, r3, #15
 8003570:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2202      	movs	r2, #2
 8003578:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d060      	beq.n	8003644 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d102      	bne.n	8003590 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800358a:	2310      	movs	r3, #16
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	e001      	b.n	8003594 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003590:	2320      	movs	r3, #32
 8003592:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2b20      	cmp	r3, #32
 800359a:	d802      	bhi.n	80035a2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80035a2:	2001      	movs	r0, #1
 80035a4:	f001 f9a2 	bl	80048ec <HAL_RCCEx_GetPeriphCLKFreq>
 80035a8:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b2:	d125      	bne.n	8003600 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d010      	beq.n	80035de <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	461a      	mov	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d8:	3305      	adds	r3, #5
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	e01f      	b.n	800361e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80035e8:	4613      	mov	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	461a      	mov	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fa:	3305      	adds	r3, #5
 80035fc:	613b      	str	r3, [r7, #16]
 80035fe:	e00e      	b.n	800361e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	fbb2 f2f3 	udiv	r2, r2, r3
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	461a      	mov	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	fbb2 f3f3 	udiv	r3, r2, r3
 800361a:	3305      	adds	r3, #5
 800361c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4a5c      	ldr	r2, [pc, #368]	; (8003794 <HAL_I2S_Init+0x270>)
 8003622:	fba2 2303 	umull	r2, r3, r2, r3
 8003626:	08db      	lsrs	r3, r3, #3
 8003628:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	085b      	lsrs	r3, r3, #1
 800363a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	021b      	lsls	r3, r3, #8
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	e003      	b.n	800364c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003644:	2302      	movs	r3, #2
 8003646:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d902      	bls.n	8003658 <HAL_I2S_Init+0x134>
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	2bff      	cmp	r3, #255	; 0xff
 8003656:	d907      	bls.n	8003668 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365c:	f043 0210 	orr.w	r2, r3, #16
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e08f      	b.n	8003788 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	ea42 0103 	orr.w	r1, r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	430a      	orrs	r2, r1
 800367a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003686:	f023 030f 	bic.w	r3, r3, #15
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6851      	ldr	r1, [r2, #4]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6892      	ldr	r2, [r2, #8]
 8003692:	4311      	orrs	r1, r2
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	68d2      	ldr	r2, [r2, #12]
 8003698:	4311      	orrs	r1, r2
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6992      	ldr	r2, [r2, #24]
 800369e:	430a      	orrs	r2, r1
 80036a0:	431a      	orrs	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036aa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d161      	bne.n	8003778 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a38      	ldr	r2, [pc, #224]	; (8003798 <HAL_I2S_Init+0x274>)
 80036b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a37      	ldr	r2, [pc, #220]	; (800379c <HAL_I2S_Init+0x278>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d101      	bne.n	80036c8 <HAL_I2S_Init+0x1a4>
 80036c4:	4b36      	ldr	r3, [pc, #216]	; (80037a0 <HAL_I2S_Init+0x27c>)
 80036c6:	e001      	b.n	80036cc <HAL_I2S_Init+0x1a8>
 80036c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6812      	ldr	r2, [r2, #0]
 80036d2:	4932      	ldr	r1, [pc, #200]	; (800379c <HAL_I2S_Init+0x278>)
 80036d4:	428a      	cmp	r2, r1
 80036d6:	d101      	bne.n	80036dc <HAL_I2S_Init+0x1b8>
 80036d8:	4a31      	ldr	r2, [pc, #196]	; (80037a0 <HAL_I2S_Init+0x27c>)
 80036da:	e001      	b.n	80036e0 <HAL_I2S_Init+0x1bc>
 80036dc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80036e0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80036e4:	f023 030f 	bic.w	r3, r3, #15
 80036e8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a2b      	ldr	r2, [pc, #172]	; (800379c <HAL_I2S_Init+0x278>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d101      	bne.n	80036f8 <HAL_I2S_Init+0x1d4>
 80036f4:	4b2a      	ldr	r3, [pc, #168]	; (80037a0 <HAL_I2S_Init+0x27c>)
 80036f6:	e001      	b.n	80036fc <HAL_I2S_Init+0x1d8>
 80036f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036fc:	2202      	movs	r2, #2
 80036fe:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a25      	ldr	r2, [pc, #148]	; (800379c <HAL_I2S_Init+0x278>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d101      	bne.n	800370e <HAL_I2S_Init+0x1ea>
 800370a:	4b25      	ldr	r3, [pc, #148]	; (80037a0 <HAL_I2S_Init+0x27c>)
 800370c:	e001      	b.n	8003712 <HAL_I2S_Init+0x1ee>
 800370e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800371e:	d003      	beq.n	8003728 <HAL_I2S_Init+0x204>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d103      	bne.n	8003730 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003728:	f44f 7380 	mov.w	r3, #256	; 0x100
 800372c:	613b      	str	r3, [r7, #16]
 800372e:	e001      	b.n	8003734 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003730:	2300      	movs	r3, #0
 8003732:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	b299      	uxth	r1, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800374a:	4303      	orrs	r3, r0
 800374c:	b29b      	uxth	r3, r3
 800374e:	430b      	orrs	r3, r1
 8003750:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003752:	4313      	orrs	r3, r2
 8003754:	b29a      	uxth	r2, r3
 8003756:	897b      	ldrh	r3, [r7, #10]
 8003758:	4313      	orrs	r3, r2
 800375a:	b29b      	uxth	r3, r3
 800375c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003760:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a0d      	ldr	r2, [pc, #52]	; (800379c <HAL_I2S_Init+0x278>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d101      	bne.n	8003770 <HAL_I2S_Init+0x24c>
 800376c:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <HAL_I2S_Init+0x27c>)
 800376e:	e001      	b.n	8003774 <HAL_I2S_Init+0x250>
 8003770:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003774:	897a      	ldrh	r2, [r7, #10]
 8003776:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3720      	adds	r7, #32
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	0800389b 	.word	0x0800389b
 8003794:	cccccccd 	.word	0xcccccccd
 8003798:	080039b1 	.word	0x080039b1
 800379c:	40003800 	.word	0x40003800
 80037a0:	40003400 	.word	0x40003400

080037a4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	881a      	ldrh	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	1c9a      	adds	r2, r3, #2
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003802:	b29b      	uxth	r3, r3
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003810:	b29b      	uxth	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10e      	bne.n	8003834 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003824:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7ff ffb8 	bl	80037a4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003834:	bf00      	nop
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384e:	b292      	uxth	r2, r2
 8003850:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003856:	1c9a      	adds	r2, r3, #2
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003860:	b29b      	uxth	r3, r3
 8003862:	3b01      	subs	r3, #1
 8003864:	b29a      	uxth	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800386e:	b29b      	uxth	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10e      	bne.n	8003892 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003882:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff ff93 	bl	80037b8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003892:	bf00      	nop
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b086      	sub	sp, #24
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d13a      	bne.n	800392c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d109      	bne.n	80038d4 <I2S_IRQHandler+0x3a>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ca:	2b40      	cmp	r3, #64	; 0x40
 80038cc:	d102      	bne.n	80038d4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7ff ffb4 	bl	800383c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038da:	2b40      	cmp	r3, #64	; 0x40
 80038dc:	d126      	bne.n	800392c <I2S_IRQHandler+0x92>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 0320 	and.w	r3, r3, #32
 80038e8:	2b20      	cmp	r3, #32
 80038ea:	d11f      	bne.n	800392c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038fa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80038fc:	2300      	movs	r3, #0
 80038fe:	613b      	str	r3, [r7, #16]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	613b      	str	r3, [r7, #16]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	613b      	str	r3, [r7, #16]
 8003910:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391e:	f043 0202 	orr.w	r2, r3, #2
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7ff ff50 	bl	80037cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b03      	cmp	r3, #3
 8003936:	d136      	bne.n	80039a6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b02      	cmp	r3, #2
 8003940:	d109      	bne.n	8003956 <I2S_IRQHandler+0xbc>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394c:	2b80      	cmp	r3, #128	; 0x80
 800394e:	d102      	bne.n	8003956 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7ff ff45 	bl	80037e0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b08      	cmp	r3, #8
 800395e:	d122      	bne.n	80039a6 <I2S_IRQHandler+0x10c>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b20      	cmp	r3, #32
 800396c:	d11b      	bne.n	80039a6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800397c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003998:	f043 0204 	orr.w	r2, r3, #4
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7ff ff13 	bl	80037cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039a6:	bf00      	nop
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4aa2      	ldr	r2, [pc, #648]	; (8003c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d101      	bne.n	80039ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80039ca:	4ba2      	ldr	r3, [pc, #648]	; (8003c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039cc:	e001      	b.n	80039d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80039ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a9b      	ldr	r2, [pc, #620]	; (8003c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d101      	bne.n	80039ec <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80039e8:	4b9a      	ldr	r3, [pc, #616]	; (8003c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039ea:	e001      	b.n	80039f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80039ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039fc:	d004      	beq.n	8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f040 8099 	bne.w	8003b3a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d107      	bne.n	8003a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f925 	bl	8003c6c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d107      	bne.n	8003a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f9c8 	bl	8003dcc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a42:	2b40      	cmp	r3, #64	; 0x40
 8003a44:	d13a      	bne.n	8003abc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f003 0320 	and.w	r3, r3, #32
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d035      	beq.n	8003abc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a7e      	ldr	r2, [pc, #504]	; (8003c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d101      	bne.n	8003a5e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003a5a:	4b7e      	ldr	r3, [pc, #504]	; (8003c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a5c:	e001      	b.n	8003a62 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003a5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4979      	ldr	r1, [pc, #484]	; (8003c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a6a:	428b      	cmp	r3, r1
 8003a6c:	d101      	bne.n	8003a72 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003a6e:	4b79      	ldr	r3, [pc, #484]	; (8003c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a70:	e001      	b.n	8003a76 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003a72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a7a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a8a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aae:	f043 0202 	orr.w	r2, r3, #2
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7ff fe88 	bl	80037cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b08      	cmp	r3, #8
 8003ac4:	f040 80be 	bne.w	8003c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	f003 0320 	and.w	r3, r3, #32
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 80b8 	beq.w	8003c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ae2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a59      	ldr	r2, [pc, #356]	; (8003c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d101      	bne.n	8003af2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003aee:	4b59      	ldr	r3, [pc, #356]	; (8003c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003af0:	e001      	b.n	8003af6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003af2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4954      	ldr	r1, [pc, #336]	; (8003c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003afe:	428b      	cmp	r3, r1
 8003b00:	d101      	bne.n	8003b06 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003b02:	4b54      	ldr	r3, [pc, #336]	; (8003c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b04:	e001      	b.n	8003b0a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003b06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b0a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b0e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003b10:	2300      	movs	r3, #0
 8003b12:	60bb      	str	r3, [r7, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	60bb      	str	r3, [r7, #8]
 8003b1c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2a:	f043 0204 	orr.w	r2, r3, #4
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7ff fe4a 	bl	80037cc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b38:	e084      	b.n	8003c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d107      	bne.n	8003b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d002      	beq.n	8003b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f8be 	bl	8003cd0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d107      	bne.n	8003b6e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f8fd 	bl	8003d68 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b74:	2b40      	cmp	r3, #64	; 0x40
 8003b76:	d12f      	bne.n	8003bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f003 0320 	and.w	r3, r3, #32
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d02a      	beq.n	8003bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b90:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a2e      	ldr	r2, [pc, #184]	; (8003c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d101      	bne.n	8003ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003b9c:	4b2d      	ldr	r3, [pc, #180]	; (8003c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b9e:	e001      	b.n	8003ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003ba0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4929      	ldr	r1, [pc, #164]	; (8003c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003bac:	428b      	cmp	r3, r1
 8003bae:	d101      	bne.n	8003bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003bb0:	4b28      	ldr	r3, [pc, #160]	; (8003c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003bb2:	e001      	b.n	8003bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003bb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bb8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bbc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bca:	f043 0202 	orr.w	r2, r3, #2
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7ff fdfa 	bl	80037cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b08      	cmp	r3, #8
 8003be0:	d131      	bne.n	8003c46 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f003 0320 	and.w	r3, r3, #32
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d02c      	beq.n	8003c46 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a17      	ldr	r2, [pc, #92]	; (8003c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d101      	bne.n	8003bfa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003bf6:	4b17      	ldr	r3, [pc, #92]	; (8003c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003bf8:	e001      	b.n	8003bfe <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003bfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4912      	ldr	r1, [pc, #72]	; (8003c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c06:	428b      	cmp	r3, r1
 8003c08:	d101      	bne.n	8003c0e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003c0a:	4b12      	ldr	r3, [pc, #72]	; (8003c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c0c:	e001      	b.n	8003c12 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003c0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c12:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c16:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c26:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c34:	f043 0204 	orr.w	r2, r3, #4
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7ff fdc5 	bl	80037cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c42:	e000      	b.n	8003c46 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c44:	bf00      	nop
}
 8003c46:	bf00      	nop
 8003c48:	3720      	adds	r7, #32
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40003800 	.word	0x40003800
 8003c54:	40003400 	.word	0x40003400

08003c58 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	1c99      	adds	r1, r3, #2
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6251      	str	r1, [r2, #36]	; 0x24
 8003c7e:	881a      	ldrh	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d113      	bne.n	8003cc6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d106      	bne.n	8003cc6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff ffc9 	bl	8003c58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cc6:	bf00      	nop
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	1c99      	adds	r1, r3, #2
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6251      	str	r1, [r2, #36]	; 0x24
 8003ce2:	8819      	ldrh	r1, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a1d      	ldr	r2, [pc, #116]	; (8003d60 <I2SEx_TxISR_I2SExt+0x90>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d101      	bne.n	8003cf2 <I2SEx_TxISR_I2SExt+0x22>
 8003cee:	4b1d      	ldr	r3, [pc, #116]	; (8003d64 <I2SEx_TxISR_I2SExt+0x94>)
 8003cf0:	e001      	b.n	8003cf6 <I2SEx_TxISR_I2SExt+0x26>
 8003cf2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cf6:	460a      	mov	r2, r1
 8003cf8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d121      	bne.n	8003d56 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a12      	ldr	r2, [pc, #72]	; (8003d60 <I2SEx_TxISR_I2SExt+0x90>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d101      	bne.n	8003d20 <I2SEx_TxISR_I2SExt+0x50>
 8003d1c:	4b11      	ldr	r3, [pc, #68]	; (8003d64 <I2SEx_TxISR_I2SExt+0x94>)
 8003d1e:	e001      	b.n	8003d24 <I2SEx_TxISR_I2SExt+0x54>
 8003d20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	490d      	ldr	r1, [pc, #52]	; (8003d60 <I2SEx_TxISR_I2SExt+0x90>)
 8003d2c:	428b      	cmp	r3, r1
 8003d2e:	d101      	bne.n	8003d34 <I2SEx_TxISR_I2SExt+0x64>
 8003d30:	4b0c      	ldr	r3, [pc, #48]	; (8003d64 <I2SEx_TxISR_I2SExt+0x94>)
 8003d32:	e001      	b.n	8003d38 <I2SEx_TxISR_I2SExt+0x68>
 8003d34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d3c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d106      	bne.n	8003d56 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7ff ff81 	bl	8003c58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d56:	bf00      	nop
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40003800 	.word	0x40003800
 8003d64:	40003400 	.word	0x40003400

08003d68 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68d8      	ldr	r0, [r3, #12]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7a:	1c99      	adds	r1, r3, #2
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003d80:	b282      	uxth	r2, r0
 8003d82:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d113      	bne.n	8003dc4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003daa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d106      	bne.n	8003dc4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7ff ff4a 	bl	8003c58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dc4:	bf00      	nop
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a20      	ldr	r2, [pc, #128]	; (8003e5c <I2SEx_RxISR_I2SExt+0x90>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d101      	bne.n	8003de2 <I2SEx_RxISR_I2SExt+0x16>
 8003dde:	4b20      	ldr	r3, [pc, #128]	; (8003e60 <I2SEx_RxISR_I2SExt+0x94>)
 8003de0:	e001      	b.n	8003de6 <I2SEx_RxISR_I2SExt+0x1a>
 8003de2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003de6:	68d8      	ldr	r0, [r3, #12]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dec:	1c99      	adds	r1, r3, #2
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003df2:	b282      	uxth	r2, r0
 8003df4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d121      	bne.n	8003e52 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a12      	ldr	r2, [pc, #72]	; (8003e5c <I2SEx_RxISR_I2SExt+0x90>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d101      	bne.n	8003e1c <I2SEx_RxISR_I2SExt+0x50>
 8003e18:	4b11      	ldr	r3, [pc, #68]	; (8003e60 <I2SEx_RxISR_I2SExt+0x94>)
 8003e1a:	e001      	b.n	8003e20 <I2SEx_RxISR_I2SExt+0x54>
 8003e1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	490d      	ldr	r1, [pc, #52]	; (8003e5c <I2SEx_RxISR_I2SExt+0x90>)
 8003e28:	428b      	cmp	r3, r1
 8003e2a:	d101      	bne.n	8003e30 <I2SEx_RxISR_I2SExt+0x64>
 8003e2c:	4b0c      	ldr	r3, [pc, #48]	; (8003e60 <I2SEx_RxISR_I2SExt+0x94>)
 8003e2e:	e001      	b.n	8003e34 <I2SEx_RxISR_I2SExt+0x68>
 8003e30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e34:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e38:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d106      	bne.n	8003e52 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff ff03 	bl	8003c58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e52:	bf00      	nop
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40003800 	.word	0x40003800
 8003e60:	40003400 	.word	0x40003400

08003e64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e25b      	b.n	800432e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d075      	beq.n	8003f6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e82:	4ba3      	ldr	r3, [pc, #652]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 030c 	and.w	r3, r3, #12
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d00c      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e8e:	4ba0      	ldr	r3, [pc, #640]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e96:	2b08      	cmp	r3, #8
 8003e98:	d112      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e9a:	4b9d      	ldr	r3, [pc, #628]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ea2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ea6:	d10b      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea8:	4b99      	ldr	r3, [pc, #612]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d05b      	beq.n	8003f6c <HAL_RCC_OscConfig+0x108>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d157      	bne.n	8003f6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e236      	b.n	800432e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec8:	d106      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x74>
 8003eca:	4b91      	ldr	r3, [pc, #580]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a90      	ldr	r2, [pc, #576]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	e01d      	b.n	8003f14 <HAL_RCC_OscConfig+0xb0>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ee0:	d10c      	bne.n	8003efc <HAL_RCC_OscConfig+0x98>
 8003ee2:	4b8b      	ldr	r3, [pc, #556]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a8a      	ldr	r2, [pc, #552]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eec:	6013      	str	r3, [r2, #0]
 8003eee:	4b88      	ldr	r3, [pc, #544]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a87      	ldr	r2, [pc, #540]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	e00b      	b.n	8003f14 <HAL_RCC_OscConfig+0xb0>
 8003efc:	4b84      	ldr	r3, [pc, #528]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a83      	ldr	r2, [pc, #524]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	4b81      	ldr	r3, [pc, #516]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a80      	ldr	r2, [pc, #512]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d013      	beq.n	8003f44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1c:	f7fd fa8c 	bl	8001438 <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f24:	f7fd fa88 	bl	8001438 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b64      	cmp	r3, #100	; 0x64
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e1fb      	b.n	800432e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f36:	4b76      	ldr	r3, [pc, #472]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0f0      	beq.n	8003f24 <HAL_RCC_OscConfig+0xc0>
 8003f42:	e014      	b.n	8003f6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f44:	f7fd fa78 	bl	8001438 <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f4c:	f7fd fa74 	bl	8001438 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b64      	cmp	r3, #100	; 0x64
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e1e7      	b.n	800432e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f5e:	4b6c      	ldr	r3, [pc, #432]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1f0      	bne.n	8003f4c <HAL_RCC_OscConfig+0xe8>
 8003f6a:	e000      	b.n	8003f6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d063      	beq.n	8004042 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f7a:	4b65      	ldr	r3, [pc, #404]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00b      	beq.n	8003f9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f86:	4b62      	ldr	r3, [pc, #392]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f8e:	2b08      	cmp	r3, #8
 8003f90:	d11c      	bne.n	8003fcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f92:	4b5f      	ldr	r3, [pc, #380]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d116      	bne.n	8003fcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f9e:	4b5c      	ldr	r3, [pc, #368]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d005      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x152>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d001      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e1bb      	b.n	800432e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb6:	4b56      	ldr	r3, [pc, #344]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	4952      	ldr	r1, [pc, #328]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fca:	e03a      	b.n	8004042 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d020      	beq.n	8004016 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fd4:	4b4f      	ldr	r3, [pc, #316]	; (8004114 <HAL_RCC_OscConfig+0x2b0>)
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fda:	f7fd fa2d 	bl	8001438 <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe0:	e008      	b.n	8003ff4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fe2:	f7fd fa29 	bl	8001438 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e19c      	b.n	800432e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff4:	4b46      	ldr	r3, [pc, #280]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0f0      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004000:	4b43      	ldr	r3, [pc, #268]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	4940      	ldr	r1, [pc, #256]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8004010:	4313      	orrs	r3, r2
 8004012:	600b      	str	r3, [r1, #0]
 8004014:	e015      	b.n	8004042 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004016:	4b3f      	ldr	r3, [pc, #252]	; (8004114 <HAL_RCC_OscConfig+0x2b0>)
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401c:	f7fd fa0c 	bl	8001438 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004024:	f7fd fa08 	bl	8001438 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e17b      	b.n	800432e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004036:	4b36      	ldr	r3, [pc, #216]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1f0      	bne.n	8004024 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b00      	cmp	r3, #0
 800404c:	d030      	beq.n	80040b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d016      	beq.n	8004084 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004056:	4b30      	ldr	r3, [pc, #192]	; (8004118 <HAL_RCC_OscConfig+0x2b4>)
 8004058:	2201      	movs	r2, #1
 800405a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405c:	f7fd f9ec 	bl	8001438 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004064:	f7fd f9e8 	bl	8001438 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e15b      	b.n	800432e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004076:	4b26      	ldr	r3, [pc, #152]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 8004078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0f0      	beq.n	8004064 <HAL_RCC_OscConfig+0x200>
 8004082:	e015      	b.n	80040b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004084:	4b24      	ldr	r3, [pc, #144]	; (8004118 <HAL_RCC_OscConfig+0x2b4>)
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800408a:	f7fd f9d5 	bl	8001438 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004092:	f7fd f9d1 	bl	8001438 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e144      	b.n	800432e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040a4:	4b1a      	ldr	r3, [pc, #104]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 80040a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1f0      	bne.n	8004092 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0304 	and.w	r3, r3, #4
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 80a0 	beq.w	80041fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040be:	2300      	movs	r3, #0
 80040c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040c2:	4b13      	ldr	r3, [pc, #76]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10f      	bne.n	80040ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ce:	2300      	movs	r3, #0
 80040d0:	60bb      	str	r3, [r7, #8]
 80040d2:	4b0f      	ldr	r3, [pc, #60]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	4a0e      	ldr	r2, [pc, #56]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 80040d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040dc:	6413      	str	r3, [r2, #64]	; 0x40
 80040de:	4b0c      	ldr	r3, [pc, #48]	; (8004110 <HAL_RCC_OscConfig+0x2ac>)
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e6:	60bb      	str	r3, [r7, #8]
 80040e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ea:	2301      	movs	r3, #1
 80040ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ee:	4b0b      	ldr	r3, [pc, #44]	; (800411c <HAL_RCC_OscConfig+0x2b8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d121      	bne.n	800413e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040fa:	4b08      	ldr	r3, [pc, #32]	; (800411c <HAL_RCC_OscConfig+0x2b8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a07      	ldr	r2, [pc, #28]	; (800411c <HAL_RCC_OscConfig+0x2b8>)
 8004100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004106:	f7fd f997 	bl	8001438 <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800410c:	e011      	b.n	8004132 <HAL_RCC_OscConfig+0x2ce>
 800410e:	bf00      	nop
 8004110:	40023800 	.word	0x40023800
 8004114:	42470000 	.word	0x42470000
 8004118:	42470e80 	.word	0x42470e80
 800411c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004120:	f7fd f98a 	bl	8001438 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e0fd      	b.n	800432e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004132:	4b81      	ldr	r3, [pc, #516]	; (8004338 <HAL_RCC_OscConfig+0x4d4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0f0      	beq.n	8004120 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d106      	bne.n	8004154 <HAL_RCC_OscConfig+0x2f0>
 8004146:	4b7d      	ldr	r3, [pc, #500]	; (800433c <HAL_RCC_OscConfig+0x4d8>)
 8004148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414a:	4a7c      	ldr	r2, [pc, #496]	; (800433c <HAL_RCC_OscConfig+0x4d8>)
 800414c:	f043 0301 	orr.w	r3, r3, #1
 8004150:	6713      	str	r3, [r2, #112]	; 0x70
 8004152:	e01c      	b.n	800418e <HAL_RCC_OscConfig+0x32a>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	2b05      	cmp	r3, #5
 800415a:	d10c      	bne.n	8004176 <HAL_RCC_OscConfig+0x312>
 800415c:	4b77      	ldr	r3, [pc, #476]	; (800433c <HAL_RCC_OscConfig+0x4d8>)
 800415e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004160:	4a76      	ldr	r2, [pc, #472]	; (800433c <HAL_RCC_OscConfig+0x4d8>)
 8004162:	f043 0304 	orr.w	r3, r3, #4
 8004166:	6713      	str	r3, [r2, #112]	; 0x70
 8004168:	4b74      	ldr	r3, [pc, #464]	; (800433c <HAL_RCC_OscConfig+0x4d8>)
 800416a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416c:	4a73      	ldr	r2, [pc, #460]	; (800433c <HAL_RCC_OscConfig+0x4d8>)
 800416e:	f043 0301 	orr.w	r3, r3, #1
 8004172:	6713      	str	r3, [r2, #112]	; 0x70
 8004174:	e00b      	b.n	800418e <HAL_RCC_OscConfig+0x32a>
 8004176:	4b71      	ldr	r3, [pc, #452]	; (800433c <HAL_RCC_OscConfig+0x4d8>)
 8004178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417a:	4a70      	ldr	r2, [pc, #448]	; (800433c <HAL_RCC_OscConfig+0x4d8>)
 800417c:	f023 0301 	bic.w	r3, r3, #1
 8004180:	6713      	str	r3, [r2, #112]	; 0x70
 8004182:	4b6e      	ldr	r3, [pc, #440]	; (800433c <HAL_RCC_OscConfig+0x4d8>)
 8004184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004186:	4a6d      	ldr	r2, [pc, #436]	; (800433c <HAL_RCC_OscConfig+0x4d8>)
 8004188:	f023 0304 	bic.w	r3, r3, #4
 800418c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d015      	beq.n	80041c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004196:	f7fd f94f 	bl	8001438 <HAL_GetTick>
 800419a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800419c:	e00a      	b.n	80041b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800419e:	f7fd f94b 	bl	8001438 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e0bc      	b.n	800432e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b4:	4b61      	ldr	r3, [pc, #388]	; (800433c <HAL_RCC_OscConfig+0x4d8>)
 80041b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0ee      	beq.n	800419e <HAL_RCC_OscConfig+0x33a>
 80041c0:	e014      	b.n	80041ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041c2:	f7fd f939 	bl	8001438 <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041c8:	e00a      	b.n	80041e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041ca:	f7fd f935 	bl	8001438 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d8:	4293      	cmp	r3, r2
 80041da:	d901      	bls.n	80041e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e0a6      	b.n	800432e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041e0:	4b56      	ldr	r3, [pc, #344]	; (800433c <HAL_RCC_OscConfig+0x4d8>)
 80041e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1ee      	bne.n	80041ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041ec:	7dfb      	ldrb	r3, [r7, #23]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d105      	bne.n	80041fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041f2:	4b52      	ldr	r3, [pc, #328]	; (800433c <HAL_RCC_OscConfig+0x4d8>)
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	4a51      	ldr	r2, [pc, #324]	; (800433c <HAL_RCC_OscConfig+0x4d8>)
 80041f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 8092 	beq.w	800432c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004208:	4b4c      	ldr	r3, [pc, #304]	; (800433c <HAL_RCC_OscConfig+0x4d8>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 030c 	and.w	r3, r3, #12
 8004210:	2b08      	cmp	r3, #8
 8004212:	d05c      	beq.n	80042ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	2b02      	cmp	r3, #2
 800421a:	d141      	bne.n	80042a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800421c:	4b48      	ldr	r3, [pc, #288]	; (8004340 <HAL_RCC_OscConfig+0x4dc>)
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004222:	f7fd f909 	bl	8001438 <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004228:	e008      	b.n	800423c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800422a:	f7fd f905 	bl	8001438 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e078      	b.n	800432e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800423c:	4b3f      	ldr	r3, [pc, #252]	; (800433c <HAL_RCC_OscConfig+0x4d8>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1f0      	bne.n	800422a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	69da      	ldr	r2, [r3, #28]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	431a      	orrs	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	019b      	lsls	r3, r3, #6
 8004258:	431a      	orrs	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425e:	085b      	lsrs	r3, r3, #1
 8004260:	3b01      	subs	r3, #1
 8004262:	041b      	lsls	r3, r3, #16
 8004264:	431a      	orrs	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426a:	061b      	lsls	r3, r3, #24
 800426c:	4933      	ldr	r1, [pc, #204]	; (800433c <HAL_RCC_OscConfig+0x4d8>)
 800426e:	4313      	orrs	r3, r2
 8004270:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004272:	4b33      	ldr	r3, [pc, #204]	; (8004340 <HAL_RCC_OscConfig+0x4dc>)
 8004274:	2201      	movs	r2, #1
 8004276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004278:	f7fd f8de 	bl	8001438 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004280:	f7fd f8da 	bl	8001438 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e04d      	b.n	800432e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004292:	4b2a      	ldr	r3, [pc, #168]	; (800433c <HAL_RCC_OscConfig+0x4d8>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCC_OscConfig+0x41c>
 800429e:	e045      	b.n	800432c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a0:	4b27      	ldr	r3, [pc, #156]	; (8004340 <HAL_RCC_OscConfig+0x4dc>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a6:	f7fd f8c7 	bl	8001438 <HAL_GetTick>
 80042aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ac:	e008      	b.n	80042c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ae:	f7fd f8c3 	bl	8001438 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e036      	b.n	800432e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c0:	4b1e      	ldr	r3, [pc, #120]	; (800433c <HAL_RCC_OscConfig+0x4d8>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1f0      	bne.n	80042ae <HAL_RCC_OscConfig+0x44a>
 80042cc:	e02e      	b.n	800432c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e029      	b.n	800432e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042da:	4b18      	ldr	r3, [pc, #96]	; (800433c <HAL_RCC_OscConfig+0x4d8>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d11c      	bne.n	8004328 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d115      	bne.n	8004328 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004302:	4013      	ands	r3, r2
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004308:	4293      	cmp	r3, r2
 800430a:	d10d      	bne.n	8004328 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004316:	429a      	cmp	r2, r3
 8004318:	d106      	bne.n	8004328 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004324:	429a      	cmp	r2, r3
 8004326:	d001      	beq.n	800432c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e000      	b.n	800432e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40007000 	.word	0x40007000
 800433c:	40023800 	.word	0x40023800
 8004340:	42470060 	.word	0x42470060

08004344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e0cc      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004358:	4b68      	ldr	r3, [pc, #416]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d90c      	bls.n	8004380 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004366:	4b65      	ldr	r3, [pc, #404]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800436e:	4b63      	ldr	r3, [pc, #396]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d001      	beq.n	8004380 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e0b8      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d020      	beq.n	80043ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	d005      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004398:	4b59      	ldr	r3, [pc, #356]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	4a58      	ldr	r2, [pc, #352]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 800439e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0308 	and.w	r3, r3, #8
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d005      	beq.n	80043bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043b0:	4b53      	ldr	r3, [pc, #332]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	4a52      	ldr	r2, [pc, #328]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043bc:	4b50      	ldr	r3, [pc, #320]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	494d      	ldr	r1, [pc, #308]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d044      	beq.n	8004464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d107      	bne.n	80043f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e2:	4b47      	ldr	r3, [pc, #284]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d119      	bne.n	8004422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e07f      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d003      	beq.n	8004402 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d107      	bne.n	8004412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004402:	4b3f      	ldr	r3, [pc, #252]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d109      	bne.n	8004422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e06f      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004412:	4b3b      	ldr	r3, [pc, #236]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e067      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004422:	4b37      	ldr	r3, [pc, #220]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f023 0203 	bic.w	r2, r3, #3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	4934      	ldr	r1, [pc, #208]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004430:	4313      	orrs	r3, r2
 8004432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004434:	f7fd f800 	bl	8001438 <HAL_GetTick>
 8004438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800443a:	e00a      	b.n	8004452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800443c:	f7fc fffc 	bl	8001438 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	f241 3288 	movw	r2, #5000	; 0x1388
 800444a:	4293      	cmp	r3, r2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e04f      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004452:	4b2b      	ldr	r3, [pc, #172]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 020c 	and.w	r2, r3, #12
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	429a      	cmp	r2, r3
 8004462:	d1eb      	bne.n	800443c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004464:	4b25      	ldr	r3, [pc, #148]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 030f 	and.w	r3, r3, #15
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	429a      	cmp	r2, r3
 8004470:	d20c      	bcs.n	800448c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004472:	4b22      	ldr	r3, [pc, #136]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800447a:	4b20      	ldr	r3, [pc, #128]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	429a      	cmp	r2, r3
 8004486:	d001      	beq.n	800448c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e032      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	d008      	beq.n	80044aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004498:	4b19      	ldr	r3, [pc, #100]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	4916      	ldr	r1, [pc, #88]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d009      	beq.n	80044ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044b6:	4b12      	ldr	r3, [pc, #72]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	490e      	ldr	r1, [pc, #56]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044ca:	f000 f821 	bl	8004510 <HAL_RCC_GetSysClockFreq>
 80044ce:	4601      	mov	r1, r0
 80044d0:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	091b      	lsrs	r3, r3, #4
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	4a0a      	ldr	r2, [pc, #40]	; (8004504 <HAL_RCC_ClockConfig+0x1c0>)
 80044dc:	5cd3      	ldrb	r3, [r2, r3]
 80044de:	fa21 f303 	lsr.w	r3, r1, r3
 80044e2:	4a09      	ldr	r2, [pc, #36]	; (8004508 <HAL_RCC_ClockConfig+0x1c4>)
 80044e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044e6:	4b09      	ldr	r3, [pc, #36]	; (800450c <HAL_RCC_ClockConfig+0x1c8>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fc ff60 	bl	80013b0 <HAL_InitTick>

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	40023c00 	.word	0x40023c00
 8004500:	40023800 	.word	0x40023800
 8004504:	08009888 	.word	0x08009888
 8004508:	20000000 	.word	0x20000000
 800450c:	20000004 	.word	0x20000004

08004510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	607b      	str	r3, [r7, #4]
 800451a:	2300      	movs	r3, #0
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	2300      	movs	r3, #0
 8004520:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004526:	4b63      	ldr	r3, [pc, #396]	; (80046b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 030c 	and.w	r3, r3, #12
 800452e:	2b04      	cmp	r3, #4
 8004530:	d007      	beq.n	8004542 <HAL_RCC_GetSysClockFreq+0x32>
 8004532:	2b08      	cmp	r3, #8
 8004534:	d008      	beq.n	8004548 <HAL_RCC_GetSysClockFreq+0x38>
 8004536:	2b00      	cmp	r3, #0
 8004538:	f040 80b4 	bne.w	80046a4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800453c:	4b5e      	ldr	r3, [pc, #376]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800453e:	60bb      	str	r3, [r7, #8]
       break;
 8004540:	e0b3      	b.n	80046aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004542:	4b5e      	ldr	r3, [pc, #376]	; (80046bc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004544:	60bb      	str	r3, [r7, #8]
      break;
 8004546:	e0b0      	b.n	80046aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004548:	4b5a      	ldr	r3, [pc, #360]	; (80046b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004550:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004552:	4b58      	ldr	r3, [pc, #352]	; (80046b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d04a      	beq.n	80045f4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800455e:	4b55      	ldr	r3, [pc, #340]	; (80046b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	099b      	lsrs	r3, r3, #6
 8004564:	f04f 0400 	mov.w	r4, #0
 8004568:	f240 11ff 	movw	r1, #511	; 0x1ff
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	ea03 0501 	and.w	r5, r3, r1
 8004574:	ea04 0602 	and.w	r6, r4, r2
 8004578:	4629      	mov	r1, r5
 800457a:	4632      	mov	r2, r6
 800457c:	f04f 0300 	mov.w	r3, #0
 8004580:	f04f 0400 	mov.w	r4, #0
 8004584:	0154      	lsls	r4, r2, #5
 8004586:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800458a:	014b      	lsls	r3, r1, #5
 800458c:	4619      	mov	r1, r3
 800458e:	4622      	mov	r2, r4
 8004590:	1b49      	subs	r1, r1, r5
 8004592:	eb62 0206 	sbc.w	r2, r2, r6
 8004596:	f04f 0300 	mov.w	r3, #0
 800459a:	f04f 0400 	mov.w	r4, #0
 800459e:	0194      	lsls	r4, r2, #6
 80045a0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80045a4:	018b      	lsls	r3, r1, #6
 80045a6:	1a5b      	subs	r3, r3, r1
 80045a8:	eb64 0402 	sbc.w	r4, r4, r2
 80045ac:	f04f 0100 	mov.w	r1, #0
 80045b0:	f04f 0200 	mov.w	r2, #0
 80045b4:	00e2      	lsls	r2, r4, #3
 80045b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80045ba:	00d9      	lsls	r1, r3, #3
 80045bc:	460b      	mov	r3, r1
 80045be:	4614      	mov	r4, r2
 80045c0:	195b      	adds	r3, r3, r5
 80045c2:	eb44 0406 	adc.w	r4, r4, r6
 80045c6:	f04f 0100 	mov.w	r1, #0
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	0262      	lsls	r2, r4, #9
 80045d0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80045d4:	0259      	lsls	r1, r3, #9
 80045d6:	460b      	mov	r3, r1
 80045d8:	4614      	mov	r4, r2
 80045da:	4618      	mov	r0, r3
 80045dc:	4621      	mov	r1, r4
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f04f 0400 	mov.w	r4, #0
 80045e4:	461a      	mov	r2, r3
 80045e6:	4623      	mov	r3, r4
 80045e8:	f7fb fe42 	bl	8000270 <__aeabi_uldivmod>
 80045ec:	4603      	mov	r3, r0
 80045ee:	460c      	mov	r4, r1
 80045f0:	60fb      	str	r3, [r7, #12]
 80045f2:	e049      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045f4:	4b2f      	ldr	r3, [pc, #188]	; (80046b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	099b      	lsrs	r3, r3, #6
 80045fa:	f04f 0400 	mov.w	r4, #0
 80045fe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004602:	f04f 0200 	mov.w	r2, #0
 8004606:	ea03 0501 	and.w	r5, r3, r1
 800460a:	ea04 0602 	and.w	r6, r4, r2
 800460e:	4629      	mov	r1, r5
 8004610:	4632      	mov	r2, r6
 8004612:	f04f 0300 	mov.w	r3, #0
 8004616:	f04f 0400 	mov.w	r4, #0
 800461a:	0154      	lsls	r4, r2, #5
 800461c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004620:	014b      	lsls	r3, r1, #5
 8004622:	4619      	mov	r1, r3
 8004624:	4622      	mov	r2, r4
 8004626:	1b49      	subs	r1, r1, r5
 8004628:	eb62 0206 	sbc.w	r2, r2, r6
 800462c:	f04f 0300 	mov.w	r3, #0
 8004630:	f04f 0400 	mov.w	r4, #0
 8004634:	0194      	lsls	r4, r2, #6
 8004636:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800463a:	018b      	lsls	r3, r1, #6
 800463c:	1a5b      	subs	r3, r3, r1
 800463e:	eb64 0402 	sbc.w	r4, r4, r2
 8004642:	f04f 0100 	mov.w	r1, #0
 8004646:	f04f 0200 	mov.w	r2, #0
 800464a:	00e2      	lsls	r2, r4, #3
 800464c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004650:	00d9      	lsls	r1, r3, #3
 8004652:	460b      	mov	r3, r1
 8004654:	4614      	mov	r4, r2
 8004656:	195b      	adds	r3, r3, r5
 8004658:	eb44 0406 	adc.w	r4, r4, r6
 800465c:	f04f 0100 	mov.w	r1, #0
 8004660:	f04f 0200 	mov.w	r2, #0
 8004664:	02a2      	lsls	r2, r4, #10
 8004666:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800466a:	0299      	lsls	r1, r3, #10
 800466c:	460b      	mov	r3, r1
 800466e:	4614      	mov	r4, r2
 8004670:	4618      	mov	r0, r3
 8004672:	4621      	mov	r1, r4
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f04f 0400 	mov.w	r4, #0
 800467a:	461a      	mov	r2, r3
 800467c:	4623      	mov	r3, r4
 800467e:	f7fb fdf7 	bl	8000270 <__aeabi_uldivmod>
 8004682:	4603      	mov	r3, r0
 8004684:	460c      	mov	r4, r1
 8004686:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004688:	4b0a      	ldr	r3, [pc, #40]	; (80046b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	0c1b      	lsrs	r3, r3, #16
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	3301      	adds	r3, #1
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a0:	60bb      	str	r3, [r7, #8]
      break;
 80046a2:	e002      	b.n	80046aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046a4:	4b04      	ldr	r3, [pc, #16]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80046a6:	60bb      	str	r3, [r7, #8]
      break;
 80046a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046aa:	68bb      	ldr	r3, [r7, #8]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046b4:	40023800 	.word	0x40023800
 80046b8:	00f42400 	.word	0x00f42400
 80046bc:	007a1200 	.word	0x007a1200

080046c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046c4:	4b03      	ldr	r3, [pc, #12]	; (80046d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80046c6:	681b      	ldr	r3, [r3, #0]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	20000000 	.word	0x20000000

080046d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046dc:	f7ff fff0 	bl	80046c0 <HAL_RCC_GetHCLKFreq>
 80046e0:	4601      	mov	r1, r0
 80046e2:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	0a9b      	lsrs	r3, r3, #10
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	4a03      	ldr	r2, [pc, #12]	; (80046fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80046ee:	5cd3      	ldrb	r3, [r2, r3]
 80046f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40023800 	.word	0x40023800
 80046fc:	08009898 	.word	0x08009898

08004700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004704:	f7ff ffdc 	bl	80046c0 <HAL_RCC_GetHCLKFreq>
 8004708:	4601      	mov	r1, r0
 800470a:	4b05      	ldr	r3, [pc, #20]	; (8004720 <HAL_RCC_GetPCLK2Freq+0x20>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	0b5b      	lsrs	r3, r3, #13
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	4a03      	ldr	r2, [pc, #12]	; (8004724 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004716:	5cd3      	ldrb	r3, [r2, r3]
 8004718:	fa21 f303 	lsr.w	r3, r1, r3
}
 800471c:	4618      	mov	r0, r3
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40023800 	.word	0x40023800
 8004724:	08009898 	.word	0x08009898

08004728 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004734:	2300      	movs	r3, #0
 8004736:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	2b00      	cmp	r3, #0
 8004742:	d105      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800474c:	2b00      	cmp	r3, #0
 800474e:	d035      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004750:	4b62      	ldr	r3, [pc, #392]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004756:	f7fc fe6f 	bl	8001438 <HAL_GetTick>
 800475a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800475c:	e008      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800475e:	f7fc fe6b 	bl	8001438 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e0b0      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004770:	4b5b      	ldr	r3, [pc, #364]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1f0      	bne.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	019a      	lsls	r2, r3, #6
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	071b      	lsls	r3, r3, #28
 8004788:	4955      	ldr	r1, [pc, #340]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800478a:	4313      	orrs	r3, r2
 800478c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004790:	4b52      	ldr	r3, [pc, #328]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004792:	2201      	movs	r2, #1
 8004794:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004796:	f7fc fe4f 	bl	8001438 <HAL_GetTick>
 800479a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800479c:	e008      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800479e:	f7fc fe4b 	bl	8001438 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d901      	bls.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e090      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047b0:	4b4b      	ldr	r3, [pc, #300]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0f0      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 8083 	beq.w	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80047ca:	2300      	movs	r3, #0
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	4b44      	ldr	r3, [pc, #272]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	4a43      	ldr	r2, [pc, #268]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047d8:	6413      	str	r3, [r2, #64]	; 0x40
 80047da:	4b41      	ldr	r3, [pc, #260]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80047e6:	4b3f      	ldr	r3, [pc, #252]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a3e      	ldr	r2, [pc, #248]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80047f2:	f7fc fe21 	bl	8001438 <HAL_GetTick>
 80047f6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047f8:	e008      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80047fa:	f7fc fe1d 	bl	8001438 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d901      	bls.n	800480c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e062      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800480c:	4b35      	ldr	r3, [pc, #212]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0f0      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004818:	4b31      	ldr	r3, [pc, #196]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800481a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004820:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d02f      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	429a      	cmp	r2, r3
 8004834:	d028      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004836:	4b2a      	ldr	r3, [pc, #168]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800483e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004840:	4b29      	ldr	r3, [pc, #164]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004842:	2201      	movs	r2, #1
 8004844:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004846:	4b28      	ldr	r3, [pc, #160]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800484c:	4a24      	ldr	r2, [pc, #144]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004852:	4b23      	ldr	r3, [pc, #140]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b01      	cmp	r3, #1
 800485c:	d114      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800485e:	f7fc fdeb 	bl	8001438 <HAL_GetTick>
 8004862:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004864:	e00a      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004866:	f7fc fde7 	bl	8001438 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	f241 3288 	movw	r2, #5000	; 0x1388
 8004874:	4293      	cmp	r3, r2
 8004876:	d901      	bls.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e02a      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800487c:	4b18      	ldr	r3, [pc, #96]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800487e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0ee      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004890:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004894:	d10d      	bne.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004896:	4b12      	ldr	r3, [pc, #72]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80048a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048aa:	490d      	ldr	r1, [pc, #52]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	608b      	str	r3, [r1, #8]
 80048b0:	e005      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x196>
 80048b2:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	4a0a      	ldr	r2, [pc, #40]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048b8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80048bc:	6093      	str	r3, [r2, #8]
 80048be:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ca:	4905      	ldr	r1, [pc, #20]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	42470068 	.word	0x42470068
 80048e0:	40023800 	.word	0x40023800
 80048e4:	40007000 	.word	0x40007000
 80048e8:	42470e40 	.word	0x42470e40

080048ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80048fc:	2300      	movs	r3, #0
 80048fe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d13d      	bne.n	8004986 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800490a:	4b22      	ldr	r3, [pc, #136]	; (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004912:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d004      	beq.n	8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800491a:	2b01      	cmp	r3, #1
 800491c:	d12f      	bne.n	800497e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800491e:	4b1e      	ldr	r3, [pc, #120]	; (8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004920:	617b      	str	r3, [r7, #20]
          break;
 8004922:	e02f      	b.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004924:	4b1b      	ldr	r3, [pc, #108]	; (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800492c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004930:	d108      	bne.n	8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004932:	4b18      	ldr	r3, [pc, #96]	; (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800493a:	4a18      	ldr	r2, [pc, #96]	; (800499c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800493c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004940:	613b      	str	r3, [r7, #16]
 8004942:	e007      	b.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004944:	4b13      	ldr	r3, [pc, #76]	; (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800494c:	4a14      	ldr	r2, [pc, #80]	; (80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800494e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004952:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004954:	4b0f      	ldr	r3, [pc, #60]	; (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800495a:	099b      	lsrs	r3, r3, #6
 800495c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	fb02 f303 	mul.w	r3, r2, r3
 8004966:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004968:	4b0a      	ldr	r3, [pc, #40]	; (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800496a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800496e:	0f1b      	lsrs	r3, r3, #28
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	fbb2 f3f3 	udiv	r3, r2, r3
 800497a:	617b      	str	r3, [r7, #20]
          break;
 800497c:	e002      	b.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800497e:	2300      	movs	r3, #0
 8004980:	617b      	str	r3, [r7, #20]
          break;
 8004982:	bf00      	nop
        }
      }
      break;
 8004984:	bf00      	nop
    }
  }
  return frequency;
 8004986:	697b      	ldr	r3, [r7, #20]
}
 8004988:	4618      	mov	r0, r3
 800498a:	371c      	adds	r7, #28
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	40023800 	.word	0x40023800
 8004998:	00bb8000 	.word	0x00bb8000
 800499c:	007a1200 	.word	0x007a1200
 80049a0:	00f42400 	.word	0x00f42400

080049a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e056      	b.n	8004a64 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d106      	bne.n	80049d6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7fc fa25 	bl	8000e20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2202      	movs	r2, #2
 80049da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049ec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	431a      	orrs	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	ea42 0103 	orr.w	r1, r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	0c1b      	lsrs	r3, r3, #16
 8004a34:	f003 0104 	and.w	r1, r3, #4
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	69da      	ldr	r2, [r3, #28]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e01d      	b.n	8004aba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d106      	bne.n	8004a98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7fc fb7e 	bl	8001194 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4610      	mov	r0, r2
 8004aac:	f000 fb6e 	bl	800518c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b082      	sub	sp, #8
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e01d      	b.n	8004b10 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d106      	bne.n	8004aee <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f815 	bl	8004b18 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2202      	movs	r2, #2
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	3304      	adds	r3, #4
 8004afe:	4619      	mov	r1, r3
 8004b00:	4610      	mov	r0, r2
 8004b02:	f000 fb43 	bl	800518c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b0c      	cmp	r3, #12
 8004b3a:	d841      	bhi.n	8004bc0 <HAL_TIM_IC_Start_IT+0x94>
 8004b3c:	a201      	add	r2, pc, #4	; (adr r2, 8004b44 <HAL_TIM_IC_Start_IT+0x18>)
 8004b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b42:	bf00      	nop
 8004b44:	08004b79 	.word	0x08004b79
 8004b48:	08004bc1 	.word	0x08004bc1
 8004b4c:	08004bc1 	.word	0x08004bc1
 8004b50:	08004bc1 	.word	0x08004bc1
 8004b54:	08004b8b 	.word	0x08004b8b
 8004b58:	08004bc1 	.word	0x08004bc1
 8004b5c:	08004bc1 	.word	0x08004bc1
 8004b60:	08004bc1 	.word	0x08004bc1
 8004b64:	08004b9d 	.word	0x08004b9d
 8004b68:	08004bc1 	.word	0x08004bc1
 8004b6c:	08004bc1 	.word	0x08004bc1
 8004b70:	08004bc1 	.word	0x08004bc1
 8004b74:	08004baf 	.word	0x08004baf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0202 	orr.w	r2, r2, #2
 8004b86:	60da      	str	r2, [r3, #12]
      break;
 8004b88:	e01b      	b.n	8004bc2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68da      	ldr	r2, [r3, #12]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f042 0204 	orr.w	r2, r2, #4
 8004b98:	60da      	str	r2, [r3, #12]
      break;
 8004b9a:	e012      	b.n	8004bc2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0208 	orr.w	r2, r2, #8
 8004baa:	60da      	str	r2, [r3, #12]
      break;
 8004bac:	e009      	b.n	8004bc2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68da      	ldr	r2, [r3, #12]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f042 0210 	orr.w	r2, r2, #16
 8004bbc:	60da      	str	r2, [r3, #12]
      break;
 8004bbe:	e000      	b.n	8004bc2 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8004bc0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	6839      	ldr	r1, [r7, #0]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 fd42 	bl	8005654 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2b06      	cmp	r3, #6
 8004be0:	d007      	beq.n	8004bf2 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f042 0201 	orr.w	r2, r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d122      	bne.n	8004c58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d11b      	bne.n	8004c58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f06f 0202 	mvn.w	r2, #2
 8004c28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	f003 0303 	and.w	r3, r3, #3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7fb fee8 	bl	8000a14 <HAL_TIM_IC_CaptureCallback>
 8004c44:	e005      	b.n	8004c52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fa82 	bl	8005150 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 fa89 	bl	8005164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d122      	bne.n	8004cac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f003 0304 	and.w	r3, r3, #4
 8004c70:	2b04      	cmp	r3, #4
 8004c72:	d11b      	bne.n	8004cac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f06f 0204 	mvn.w	r2, #4
 8004c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2202      	movs	r2, #2
 8004c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fb febe 	bl	8000a14 <HAL_TIM_IC_CaptureCallback>
 8004c98:	e005      	b.n	8004ca6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 fa58 	bl	8005150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 fa5f 	bl	8005164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	f003 0308 	and.w	r3, r3, #8
 8004cb6:	2b08      	cmp	r3, #8
 8004cb8:	d122      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f003 0308 	and.w	r3, r3, #8
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d11b      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f06f 0208 	mvn.w	r2, #8
 8004cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2204      	movs	r2, #4
 8004cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	f003 0303 	and.w	r3, r3, #3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7fb fe94 	bl	8000a14 <HAL_TIM_IC_CaptureCallback>
 8004cec:	e005      	b.n	8004cfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fa2e 	bl	8005150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fa35 	bl	8005164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f003 0310 	and.w	r3, r3, #16
 8004d0a:	2b10      	cmp	r3, #16
 8004d0c:	d122      	bne.n	8004d54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f003 0310 	and.w	r3, r3, #16
 8004d18:	2b10      	cmp	r3, #16
 8004d1a:	d11b      	bne.n	8004d54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f06f 0210 	mvn.w	r2, #16
 8004d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2208      	movs	r2, #8
 8004d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7fb fe6a 	bl	8000a14 <HAL_TIM_IC_CaptureCallback>
 8004d40:	e005      	b.n	8004d4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 fa04 	bl	8005150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 fa0b 	bl	8005164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d10e      	bne.n	8004d80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d107      	bne.n	8004d80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f06f 0201 	mvn.w	r2, #1
 8004d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f9de 	bl	800513c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d8a:	2b80      	cmp	r3, #128	; 0x80
 8004d8c:	d10e      	bne.n	8004dac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d98:	2b80      	cmp	r3, #128	; 0x80
 8004d9a:	d107      	bne.n	8004dac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 fd00 	bl	80057ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db6:	2b40      	cmp	r3, #64	; 0x40
 8004db8:	d10e      	bne.n	8004dd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc4:	2b40      	cmp	r3, #64	; 0x40
 8004dc6:	d107      	bne.n	8004dd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f9d0 	bl	8005178 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	f003 0320 	and.w	r3, r3, #32
 8004de2:	2b20      	cmp	r3, #32
 8004de4:	d10e      	bne.n	8004e04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f003 0320 	and.w	r3, r3, #32
 8004df0:	2b20      	cmp	r3, #32
 8004df2:	d107      	bne.n	8004e04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f06f 0220 	mvn.w	r2, #32
 8004dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 fcca 	bl	8005798 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e04:	bf00      	nop
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d101      	bne.n	8004e26 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004e22:	2302      	movs	r3, #2
 8004e24:	e08a      	b.n	8004f3c <HAL_TIM_IC_ConfigChannel+0x130>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2202      	movs	r2, #2
 8004e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d11b      	bne.n	8004e74 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6818      	ldr	r0, [r3, #0]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	6819      	ldr	r1, [r3, #0]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f000 fa3e 	bl	80052cc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	699a      	ldr	r2, [r3, #24]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 020c 	bic.w	r2, r2, #12
 8004e5e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6999      	ldr	r1, [r3, #24]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	689a      	ldr	r2, [r3, #8]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	619a      	str	r2, [r3, #24]
 8004e72:	e05a      	b.n	8004f2a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	d11c      	bne.n	8004eb4 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6818      	ldr	r0, [r3, #0]
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	6819      	ldr	r1, [r3, #0]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	f000 fac2 	bl	8005412 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	699a      	ldr	r2, [r3, #24]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004e9c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6999      	ldr	r1, [r3, #24]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	021a      	lsls	r2, r3, #8
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	619a      	str	r2, [r3, #24]
 8004eb2:	e03a      	b.n	8004f2a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b08      	cmp	r3, #8
 8004eb8:	d11b      	bne.n	8004ef2 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6818      	ldr	r0, [r3, #0]
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	6819      	ldr	r1, [r3, #0]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f000 fb0f 	bl	80054ec <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	69da      	ldr	r2, [r3, #28]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 020c 	bic.w	r2, r2, #12
 8004edc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69d9      	ldr	r1, [r3, #28]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	61da      	str	r2, [r3, #28]
 8004ef0:	e01b      	b.n	8004f2a <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6818      	ldr	r0, [r3, #0]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	6819      	ldr	r1, [r3, #0]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f000 fb2f 	bl	8005564 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69da      	ldr	r2, [r3, #28]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004f14:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	69d9      	ldr	r1, [r3, #28]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	021a      	lsls	r2, r3, #8
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d101      	bne.n	8004f5c <HAL_TIM_ConfigClockSource+0x18>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	e0a6      	b.n	80050aa <HAL_TIM_ConfigClockSource+0x166>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b40      	cmp	r3, #64	; 0x40
 8004f92:	d067      	beq.n	8005064 <HAL_TIM_ConfigClockSource+0x120>
 8004f94:	2b40      	cmp	r3, #64	; 0x40
 8004f96:	d80b      	bhi.n	8004fb0 <HAL_TIM_ConfigClockSource+0x6c>
 8004f98:	2b10      	cmp	r3, #16
 8004f9a:	d073      	beq.n	8005084 <HAL_TIM_ConfigClockSource+0x140>
 8004f9c:	2b10      	cmp	r3, #16
 8004f9e:	d802      	bhi.n	8004fa6 <HAL_TIM_ConfigClockSource+0x62>
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d06f      	beq.n	8005084 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004fa4:	e078      	b.n	8005098 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004fa6:	2b20      	cmp	r3, #32
 8004fa8:	d06c      	beq.n	8005084 <HAL_TIM_ConfigClockSource+0x140>
 8004faa:	2b30      	cmp	r3, #48	; 0x30
 8004fac:	d06a      	beq.n	8005084 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004fae:	e073      	b.n	8005098 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004fb0:	2b70      	cmp	r3, #112	; 0x70
 8004fb2:	d00d      	beq.n	8004fd0 <HAL_TIM_ConfigClockSource+0x8c>
 8004fb4:	2b70      	cmp	r3, #112	; 0x70
 8004fb6:	d804      	bhi.n	8004fc2 <HAL_TIM_ConfigClockSource+0x7e>
 8004fb8:	2b50      	cmp	r3, #80	; 0x50
 8004fba:	d033      	beq.n	8005024 <HAL_TIM_ConfigClockSource+0xe0>
 8004fbc:	2b60      	cmp	r3, #96	; 0x60
 8004fbe:	d041      	beq.n	8005044 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004fc0:	e06a      	b.n	8005098 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fc6:	d066      	beq.n	8005096 <HAL_TIM_ConfigClockSource+0x152>
 8004fc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fcc:	d017      	beq.n	8004ffe <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004fce:	e063      	b.n	8005098 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6818      	ldr	r0, [r3, #0]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	6899      	ldr	r1, [r3, #8]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f000 fb18 	bl	8005614 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ff2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	609a      	str	r2, [r3, #8]
      break;
 8004ffc:	e04c      	b.n	8005098 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6818      	ldr	r0, [r3, #0]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	6899      	ldr	r1, [r3, #8]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f000 fb01 	bl	8005614 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005020:	609a      	str	r2, [r3, #8]
      break;
 8005022:	e039      	b.n	8005098 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6818      	ldr	r0, [r3, #0]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	6859      	ldr	r1, [r3, #4]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	461a      	mov	r2, r3
 8005032:	f000 f9bf 	bl	80053b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2150      	movs	r1, #80	; 0x50
 800503c:	4618      	mov	r0, r3
 800503e:	f000 face 	bl	80055de <TIM_ITRx_SetConfig>
      break;
 8005042:	e029      	b.n	8005098 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6818      	ldr	r0, [r3, #0]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	6859      	ldr	r1, [r3, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	461a      	mov	r2, r3
 8005052:	f000 fa1b 	bl	800548c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2160      	movs	r1, #96	; 0x60
 800505c:	4618      	mov	r0, r3
 800505e:	f000 fabe 	bl	80055de <TIM_ITRx_SetConfig>
      break;
 8005062:	e019      	b.n	8005098 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6818      	ldr	r0, [r3, #0]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	6859      	ldr	r1, [r3, #4]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	461a      	mov	r2, r3
 8005072:	f000 f99f 	bl	80053b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2140      	movs	r1, #64	; 0x40
 800507c:	4618      	mov	r0, r3
 800507e:	f000 faae 	bl	80055de <TIM_ITRx_SetConfig>
      break;
 8005082:	e009      	b.n	8005098 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4619      	mov	r1, r3
 800508e:	4610      	mov	r0, r2
 8005090:	f000 faa5 	bl	80055de <TIM_ITRx_SetConfig>
      break;
 8005094:	e000      	b.n	8005098 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005096:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
	...

080050b4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b0c      	cmp	r3, #12
 80050c6:	d831      	bhi.n	800512c <HAL_TIM_ReadCapturedValue+0x78>
 80050c8:	a201      	add	r2, pc, #4	; (adr r2, 80050d0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80050ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ce:	bf00      	nop
 80050d0:	08005105 	.word	0x08005105
 80050d4:	0800512d 	.word	0x0800512d
 80050d8:	0800512d 	.word	0x0800512d
 80050dc:	0800512d 	.word	0x0800512d
 80050e0:	0800510f 	.word	0x0800510f
 80050e4:	0800512d 	.word	0x0800512d
 80050e8:	0800512d 	.word	0x0800512d
 80050ec:	0800512d 	.word	0x0800512d
 80050f0:	08005119 	.word	0x08005119
 80050f4:	0800512d 	.word	0x0800512d
 80050f8:	0800512d 	.word	0x0800512d
 80050fc:	0800512d 	.word	0x0800512d
 8005100:	08005123 	.word	0x08005123
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800510a:	60fb      	str	r3, [r7, #12]

      break;
 800510c:	e00f      	b.n	800512e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005114:	60fb      	str	r3, [r7, #12]

      break;
 8005116:	e00a      	b.n	800512e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800511e:	60fb      	str	r3, [r7, #12]

      break;
 8005120:	e005      	b.n	800512e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005128:	60fb      	str	r3, [r7, #12]

      break;
 800512a:	e000      	b.n	800512e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800512c:	bf00      	nop
  }

  return tmpreg;
 800512e:	68fb      	ldr	r3, [r7, #12]
}
 8005130:	4618      	mov	r0, r3
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a40      	ldr	r2, [pc, #256]	; (80052a0 <TIM_Base_SetConfig+0x114>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d013      	beq.n	80051cc <TIM_Base_SetConfig+0x40>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051aa:	d00f      	beq.n	80051cc <TIM_Base_SetConfig+0x40>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a3d      	ldr	r2, [pc, #244]	; (80052a4 <TIM_Base_SetConfig+0x118>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d00b      	beq.n	80051cc <TIM_Base_SetConfig+0x40>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a3c      	ldr	r2, [pc, #240]	; (80052a8 <TIM_Base_SetConfig+0x11c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d007      	beq.n	80051cc <TIM_Base_SetConfig+0x40>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a3b      	ldr	r2, [pc, #236]	; (80052ac <TIM_Base_SetConfig+0x120>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d003      	beq.n	80051cc <TIM_Base_SetConfig+0x40>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a3a      	ldr	r2, [pc, #232]	; (80052b0 <TIM_Base_SetConfig+0x124>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d108      	bne.n	80051de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	4313      	orrs	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a2f      	ldr	r2, [pc, #188]	; (80052a0 <TIM_Base_SetConfig+0x114>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d02b      	beq.n	800523e <TIM_Base_SetConfig+0xb2>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ec:	d027      	beq.n	800523e <TIM_Base_SetConfig+0xb2>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a2c      	ldr	r2, [pc, #176]	; (80052a4 <TIM_Base_SetConfig+0x118>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d023      	beq.n	800523e <TIM_Base_SetConfig+0xb2>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a2b      	ldr	r2, [pc, #172]	; (80052a8 <TIM_Base_SetConfig+0x11c>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d01f      	beq.n	800523e <TIM_Base_SetConfig+0xb2>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a2a      	ldr	r2, [pc, #168]	; (80052ac <TIM_Base_SetConfig+0x120>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d01b      	beq.n	800523e <TIM_Base_SetConfig+0xb2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a29      	ldr	r2, [pc, #164]	; (80052b0 <TIM_Base_SetConfig+0x124>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d017      	beq.n	800523e <TIM_Base_SetConfig+0xb2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a28      	ldr	r2, [pc, #160]	; (80052b4 <TIM_Base_SetConfig+0x128>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d013      	beq.n	800523e <TIM_Base_SetConfig+0xb2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a27      	ldr	r2, [pc, #156]	; (80052b8 <TIM_Base_SetConfig+0x12c>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d00f      	beq.n	800523e <TIM_Base_SetConfig+0xb2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a26      	ldr	r2, [pc, #152]	; (80052bc <TIM_Base_SetConfig+0x130>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d00b      	beq.n	800523e <TIM_Base_SetConfig+0xb2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a25      	ldr	r2, [pc, #148]	; (80052c0 <TIM_Base_SetConfig+0x134>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d007      	beq.n	800523e <TIM_Base_SetConfig+0xb2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a24      	ldr	r2, [pc, #144]	; (80052c4 <TIM_Base_SetConfig+0x138>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d003      	beq.n	800523e <TIM_Base_SetConfig+0xb2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a23      	ldr	r2, [pc, #140]	; (80052c8 <TIM_Base_SetConfig+0x13c>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d108      	bne.n	8005250 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005244:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	4313      	orrs	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a0a      	ldr	r2, [pc, #40]	; (80052a0 <TIM_Base_SetConfig+0x114>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d003      	beq.n	8005284 <TIM_Base_SetConfig+0xf8>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a0c      	ldr	r2, [pc, #48]	; (80052b0 <TIM_Base_SetConfig+0x124>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d103      	bne.n	800528c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	691a      	ldr	r2, [r3, #16]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	615a      	str	r2, [r3, #20]
}
 8005292:	bf00      	nop
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	40010000 	.word	0x40010000
 80052a4:	40000400 	.word	0x40000400
 80052a8:	40000800 	.word	0x40000800
 80052ac:	40000c00 	.word	0x40000c00
 80052b0:	40010400 	.word	0x40010400
 80052b4:	40014000 	.word	0x40014000
 80052b8:	40014400 	.word	0x40014400
 80052bc:	40014800 	.word	0x40014800
 80052c0:	40001800 	.word	0x40001800
 80052c4:	40001c00 	.word	0x40001c00
 80052c8:	40002000 	.word	0x40002000

080052cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
 80052d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	f023 0201 	bic.w	r2, r3, #1
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	4a28      	ldr	r2, [pc, #160]	; (8005398 <TIM_TI1_SetConfig+0xcc>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d01b      	beq.n	8005332 <TIM_TI1_SetConfig+0x66>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005300:	d017      	beq.n	8005332 <TIM_TI1_SetConfig+0x66>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4a25      	ldr	r2, [pc, #148]	; (800539c <TIM_TI1_SetConfig+0xd0>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d013      	beq.n	8005332 <TIM_TI1_SetConfig+0x66>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4a24      	ldr	r2, [pc, #144]	; (80053a0 <TIM_TI1_SetConfig+0xd4>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d00f      	beq.n	8005332 <TIM_TI1_SetConfig+0x66>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	4a23      	ldr	r2, [pc, #140]	; (80053a4 <TIM_TI1_SetConfig+0xd8>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d00b      	beq.n	8005332 <TIM_TI1_SetConfig+0x66>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	4a22      	ldr	r2, [pc, #136]	; (80053a8 <TIM_TI1_SetConfig+0xdc>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d007      	beq.n	8005332 <TIM_TI1_SetConfig+0x66>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4a21      	ldr	r2, [pc, #132]	; (80053ac <TIM_TI1_SetConfig+0xe0>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d003      	beq.n	8005332 <TIM_TI1_SetConfig+0x66>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	4a20      	ldr	r2, [pc, #128]	; (80053b0 <TIM_TI1_SetConfig+0xe4>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d101      	bne.n	8005336 <TIM_TI1_SetConfig+0x6a>
 8005332:	2301      	movs	r3, #1
 8005334:	e000      	b.n	8005338 <TIM_TI1_SetConfig+0x6c>
 8005336:	2300      	movs	r3, #0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d008      	beq.n	800534e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f023 0303 	bic.w	r3, r3, #3
 8005342:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4313      	orrs	r3, r2
 800534a:	617b      	str	r3, [r7, #20]
 800534c:	e003      	b.n	8005356 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f043 0301 	orr.w	r3, r3, #1
 8005354:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800535c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	011b      	lsls	r3, r3, #4
 8005362:	b2db      	uxtb	r3, r3
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	4313      	orrs	r3, r2
 8005368:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f023 030a 	bic.w	r3, r3, #10
 8005370:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	f003 030a 	and.w	r3, r3, #10
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	4313      	orrs	r3, r2
 800537c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	621a      	str	r2, [r3, #32]
}
 800538a:	bf00      	nop
 800538c:	371c      	adds	r7, #28
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	40010000 	.word	0x40010000
 800539c:	40000400 	.word	0x40000400
 80053a0:	40000800 	.word	0x40000800
 80053a4:	40000c00 	.word	0x40000c00
 80053a8:	40010400 	.word	0x40010400
 80053ac:	40014000 	.word	0x40014000
 80053b0:	40001800 	.word	0x40001800

080053b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b087      	sub	sp, #28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	f023 0201 	bic.w	r2, r3, #1
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	011b      	lsls	r3, r3, #4
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f023 030a 	bic.w	r3, r3, #10
 80053f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	621a      	str	r2, [r3, #32]
}
 8005406:	bf00      	nop
 8005408:	371c      	adds	r7, #28
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005412:	b480      	push	{r7}
 8005414:	b087      	sub	sp, #28
 8005416:	af00      	add	r7, sp, #0
 8005418:	60f8      	str	r0, [r7, #12]
 800541a:	60b9      	str	r1, [r7, #8]
 800541c:	607a      	str	r2, [r7, #4]
 800541e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6a1b      	ldr	r3, [r3, #32]
 8005424:	f023 0210 	bic.w	r2, r3, #16
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800543e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	021b      	lsls	r3, r3, #8
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	4313      	orrs	r3, r2
 8005448:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005450:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	031b      	lsls	r3, r3, #12
 8005456:	b29b      	uxth	r3, r3
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	4313      	orrs	r3, r2
 800545c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005464:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	011b      	lsls	r3, r3, #4
 800546a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	4313      	orrs	r3, r2
 8005472:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	621a      	str	r2, [r3, #32]
}
 8005480:	bf00      	nop
 8005482:	371c      	adds	r7, #28
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800548c:	b480      	push	{r7}
 800548e:	b087      	sub	sp, #28
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	f023 0210 	bic.w	r2, r3, #16
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	031b      	lsls	r3, r3, #12
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	4313      	orrs	r3, r2
 80054c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	011b      	lsls	r3, r3, #4
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	621a      	str	r2, [r3, #32]
}
 80054e0:	bf00      	nop
 80054e2:	371c      	adds	r7, #28
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
 80054f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f023 0303 	bic.w	r3, r3, #3
 8005518:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4313      	orrs	r3, r2
 8005520:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005528:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	b2db      	uxtb	r3, r3
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	4313      	orrs	r3, r2
 8005534:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800553c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	021b      	lsls	r3, r3, #8
 8005542:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4313      	orrs	r3, r2
 800554a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	621a      	str	r2, [r3, #32]
}
 8005558:	bf00      	nop
 800555a:	371c      	adds	r7, #28
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005564:	b480      	push	{r7}
 8005566:	b087      	sub	sp, #28
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
 8005570:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005590:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	021b      	lsls	r3, r3, #8
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	4313      	orrs	r3, r2
 800559a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055a2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	031b      	lsls	r3, r3, #12
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80055b6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	031b      	lsls	r3, r3, #12
 80055bc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	621a      	str	r2, [r3, #32]
}
 80055d2:	bf00      	nop
 80055d4:	371c      	adds	r7, #28
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055de:	b480      	push	{r7}
 80055e0:	b085      	sub	sp, #20
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
 80055e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f043 0307 	orr.w	r3, r3, #7
 8005600:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	609a      	str	r2, [r3, #8]
}
 8005608:	bf00      	nop
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800562e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	021a      	lsls	r2, r3, #8
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	431a      	orrs	r2, r3
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	4313      	orrs	r3, r2
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	4313      	orrs	r3, r2
 8005640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	609a      	str	r2, [r3, #8]
}
 8005648:	bf00      	nop
 800564a:	371c      	adds	r7, #28
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f003 031f 	and.w	r3, r3, #31
 8005666:	2201      	movs	r2, #1
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a1a      	ldr	r2, [r3, #32]
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	43db      	mvns	r3, r3
 8005676:	401a      	ands	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6a1a      	ldr	r2, [r3, #32]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	f003 031f 	and.w	r3, r3, #31
 8005686:	6879      	ldr	r1, [r7, #4]
 8005688:	fa01 f303 	lsl.w	r3, r1, r3
 800568c:	431a      	orrs	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	621a      	str	r2, [r3, #32]
}
 8005692:	bf00      	nop
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
	...

080056a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d101      	bne.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056b4:	2302      	movs	r3, #2
 80056b6:	e05a      	b.n	800576e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a21      	ldr	r2, [pc, #132]	; (800577c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d022      	beq.n	8005742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005704:	d01d      	beq.n	8005742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a1d      	ldr	r2, [pc, #116]	; (8005780 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d018      	beq.n	8005742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a1b      	ldr	r2, [pc, #108]	; (8005784 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d013      	beq.n	8005742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a1a      	ldr	r2, [pc, #104]	; (8005788 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d00e      	beq.n	8005742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a18      	ldr	r2, [pc, #96]	; (800578c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d009      	beq.n	8005742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a17      	ldr	r2, [pc, #92]	; (8005790 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d004      	beq.n	8005742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a15      	ldr	r2, [pc, #84]	; (8005794 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d10c      	bne.n	800575c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005748:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	4313      	orrs	r3, r2
 8005752:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	40010000 	.word	0x40010000
 8005780:	40000400 	.word	0x40000400
 8005784:	40000800 	.word	0x40000800
 8005788:	40000c00 	.word	0x40000c00
 800578c:	40010400 	.word	0x40010400
 8005790:	40014000 	.word	0x40014000
 8005794:	40001800 	.word	0x40001800

08005798 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e03f      	b.n	8005852 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d106      	bne.n	80057ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7fb fd4e 	bl	8001288 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2224      	movs	r2, #36	; 0x24
 80057f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005802:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f829 	bl	800585c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	691a      	ldr	r2, [r3, #16]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005818:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	695a      	ldr	r2, [r3, #20]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005828:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68da      	ldr	r2, [r3, #12]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005838:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2220      	movs	r2, #32
 8005844:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2220      	movs	r2, #32
 800584c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800585c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005860:	b085      	sub	sp, #20
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68da      	ldr	r2, [r3, #12]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	431a      	orrs	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	431a      	orrs	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	4313      	orrs	r3, r2
 8005892:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800589e:	f023 030c 	bic.w	r3, r3, #12
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	6812      	ldr	r2, [r2, #0]
 80058a6:	68f9      	ldr	r1, [r7, #12]
 80058a8:	430b      	orrs	r3, r1
 80058aa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	699a      	ldr	r2, [r3, #24]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ca:	f040 818b 	bne.w	8005be4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4ac1      	ldr	r2, [pc, #772]	; (8005bd8 <UART_SetConfig+0x37c>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d005      	beq.n	80058e4 <UART_SetConfig+0x88>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4abf      	ldr	r2, [pc, #764]	; (8005bdc <UART_SetConfig+0x380>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	f040 80bd 	bne.w	8005a5e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058e4:	f7fe ff0c 	bl	8004700 <HAL_RCC_GetPCLK2Freq>
 80058e8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	461d      	mov	r5, r3
 80058ee:	f04f 0600 	mov.w	r6, #0
 80058f2:	46a8      	mov	r8, r5
 80058f4:	46b1      	mov	r9, r6
 80058f6:	eb18 0308 	adds.w	r3, r8, r8
 80058fa:	eb49 0409 	adc.w	r4, r9, r9
 80058fe:	4698      	mov	r8, r3
 8005900:	46a1      	mov	r9, r4
 8005902:	eb18 0805 	adds.w	r8, r8, r5
 8005906:	eb49 0906 	adc.w	r9, r9, r6
 800590a:	f04f 0100 	mov.w	r1, #0
 800590e:	f04f 0200 	mov.w	r2, #0
 8005912:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005916:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800591a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800591e:	4688      	mov	r8, r1
 8005920:	4691      	mov	r9, r2
 8005922:	eb18 0005 	adds.w	r0, r8, r5
 8005926:	eb49 0106 	adc.w	r1, r9, r6
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	461d      	mov	r5, r3
 8005930:	f04f 0600 	mov.w	r6, #0
 8005934:	196b      	adds	r3, r5, r5
 8005936:	eb46 0406 	adc.w	r4, r6, r6
 800593a:	461a      	mov	r2, r3
 800593c:	4623      	mov	r3, r4
 800593e:	f7fa fc97 	bl	8000270 <__aeabi_uldivmod>
 8005942:	4603      	mov	r3, r0
 8005944:	460c      	mov	r4, r1
 8005946:	461a      	mov	r2, r3
 8005948:	4ba5      	ldr	r3, [pc, #660]	; (8005be0 <UART_SetConfig+0x384>)
 800594a:	fba3 2302 	umull	r2, r3, r3, r2
 800594e:	095b      	lsrs	r3, r3, #5
 8005950:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	461d      	mov	r5, r3
 8005958:	f04f 0600 	mov.w	r6, #0
 800595c:	46a9      	mov	r9, r5
 800595e:	46b2      	mov	sl, r6
 8005960:	eb19 0309 	adds.w	r3, r9, r9
 8005964:	eb4a 040a 	adc.w	r4, sl, sl
 8005968:	4699      	mov	r9, r3
 800596a:	46a2      	mov	sl, r4
 800596c:	eb19 0905 	adds.w	r9, r9, r5
 8005970:	eb4a 0a06 	adc.w	sl, sl, r6
 8005974:	f04f 0100 	mov.w	r1, #0
 8005978:	f04f 0200 	mov.w	r2, #0
 800597c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005980:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005984:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005988:	4689      	mov	r9, r1
 800598a:	4692      	mov	sl, r2
 800598c:	eb19 0005 	adds.w	r0, r9, r5
 8005990:	eb4a 0106 	adc.w	r1, sl, r6
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	461d      	mov	r5, r3
 800599a:	f04f 0600 	mov.w	r6, #0
 800599e:	196b      	adds	r3, r5, r5
 80059a0:	eb46 0406 	adc.w	r4, r6, r6
 80059a4:	461a      	mov	r2, r3
 80059a6:	4623      	mov	r3, r4
 80059a8:	f7fa fc62 	bl	8000270 <__aeabi_uldivmod>
 80059ac:	4603      	mov	r3, r0
 80059ae:	460c      	mov	r4, r1
 80059b0:	461a      	mov	r2, r3
 80059b2:	4b8b      	ldr	r3, [pc, #556]	; (8005be0 <UART_SetConfig+0x384>)
 80059b4:	fba3 1302 	umull	r1, r3, r3, r2
 80059b8:	095b      	lsrs	r3, r3, #5
 80059ba:	2164      	movs	r1, #100	; 0x64
 80059bc:	fb01 f303 	mul.w	r3, r1, r3
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	3332      	adds	r3, #50	; 0x32
 80059c6:	4a86      	ldr	r2, [pc, #536]	; (8005be0 <UART_SetConfig+0x384>)
 80059c8:	fba2 2303 	umull	r2, r3, r2, r3
 80059cc:	095b      	lsrs	r3, r3, #5
 80059ce:	005b      	lsls	r3, r3, #1
 80059d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059d4:	4498      	add	r8, r3
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	461d      	mov	r5, r3
 80059da:	f04f 0600 	mov.w	r6, #0
 80059de:	46a9      	mov	r9, r5
 80059e0:	46b2      	mov	sl, r6
 80059e2:	eb19 0309 	adds.w	r3, r9, r9
 80059e6:	eb4a 040a 	adc.w	r4, sl, sl
 80059ea:	4699      	mov	r9, r3
 80059ec:	46a2      	mov	sl, r4
 80059ee:	eb19 0905 	adds.w	r9, r9, r5
 80059f2:	eb4a 0a06 	adc.w	sl, sl, r6
 80059f6:	f04f 0100 	mov.w	r1, #0
 80059fa:	f04f 0200 	mov.w	r2, #0
 80059fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a0a:	4689      	mov	r9, r1
 8005a0c:	4692      	mov	sl, r2
 8005a0e:	eb19 0005 	adds.w	r0, r9, r5
 8005a12:	eb4a 0106 	adc.w	r1, sl, r6
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	461d      	mov	r5, r3
 8005a1c:	f04f 0600 	mov.w	r6, #0
 8005a20:	196b      	adds	r3, r5, r5
 8005a22:	eb46 0406 	adc.w	r4, r6, r6
 8005a26:	461a      	mov	r2, r3
 8005a28:	4623      	mov	r3, r4
 8005a2a:	f7fa fc21 	bl	8000270 <__aeabi_uldivmod>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	460c      	mov	r4, r1
 8005a32:	461a      	mov	r2, r3
 8005a34:	4b6a      	ldr	r3, [pc, #424]	; (8005be0 <UART_SetConfig+0x384>)
 8005a36:	fba3 1302 	umull	r1, r3, r3, r2
 8005a3a:	095b      	lsrs	r3, r3, #5
 8005a3c:	2164      	movs	r1, #100	; 0x64
 8005a3e:	fb01 f303 	mul.w	r3, r1, r3
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	00db      	lsls	r3, r3, #3
 8005a46:	3332      	adds	r3, #50	; 0x32
 8005a48:	4a65      	ldr	r2, [pc, #404]	; (8005be0 <UART_SetConfig+0x384>)
 8005a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4e:	095b      	lsrs	r3, r3, #5
 8005a50:	f003 0207 	and.w	r2, r3, #7
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4442      	add	r2, r8
 8005a5a:	609a      	str	r2, [r3, #8]
 8005a5c:	e26f      	b.n	8005f3e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a5e:	f7fe fe3b 	bl	80046d8 <HAL_RCC_GetPCLK1Freq>
 8005a62:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	461d      	mov	r5, r3
 8005a68:	f04f 0600 	mov.w	r6, #0
 8005a6c:	46a8      	mov	r8, r5
 8005a6e:	46b1      	mov	r9, r6
 8005a70:	eb18 0308 	adds.w	r3, r8, r8
 8005a74:	eb49 0409 	adc.w	r4, r9, r9
 8005a78:	4698      	mov	r8, r3
 8005a7a:	46a1      	mov	r9, r4
 8005a7c:	eb18 0805 	adds.w	r8, r8, r5
 8005a80:	eb49 0906 	adc.w	r9, r9, r6
 8005a84:	f04f 0100 	mov.w	r1, #0
 8005a88:	f04f 0200 	mov.w	r2, #0
 8005a8c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005a90:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005a94:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005a98:	4688      	mov	r8, r1
 8005a9a:	4691      	mov	r9, r2
 8005a9c:	eb18 0005 	adds.w	r0, r8, r5
 8005aa0:	eb49 0106 	adc.w	r1, r9, r6
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	461d      	mov	r5, r3
 8005aaa:	f04f 0600 	mov.w	r6, #0
 8005aae:	196b      	adds	r3, r5, r5
 8005ab0:	eb46 0406 	adc.w	r4, r6, r6
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	4623      	mov	r3, r4
 8005ab8:	f7fa fbda 	bl	8000270 <__aeabi_uldivmod>
 8005abc:	4603      	mov	r3, r0
 8005abe:	460c      	mov	r4, r1
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	4b47      	ldr	r3, [pc, #284]	; (8005be0 <UART_SetConfig+0x384>)
 8005ac4:	fba3 2302 	umull	r2, r3, r3, r2
 8005ac8:	095b      	lsrs	r3, r3, #5
 8005aca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	461d      	mov	r5, r3
 8005ad2:	f04f 0600 	mov.w	r6, #0
 8005ad6:	46a9      	mov	r9, r5
 8005ad8:	46b2      	mov	sl, r6
 8005ada:	eb19 0309 	adds.w	r3, r9, r9
 8005ade:	eb4a 040a 	adc.w	r4, sl, sl
 8005ae2:	4699      	mov	r9, r3
 8005ae4:	46a2      	mov	sl, r4
 8005ae6:	eb19 0905 	adds.w	r9, r9, r5
 8005aea:	eb4a 0a06 	adc.w	sl, sl, r6
 8005aee:	f04f 0100 	mov.w	r1, #0
 8005af2:	f04f 0200 	mov.w	r2, #0
 8005af6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005afa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005afe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b02:	4689      	mov	r9, r1
 8005b04:	4692      	mov	sl, r2
 8005b06:	eb19 0005 	adds.w	r0, r9, r5
 8005b0a:	eb4a 0106 	adc.w	r1, sl, r6
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	461d      	mov	r5, r3
 8005b14:	f04f 0600 	mov.w	r6, #0
 8005b18:	196b      	adds	r3, r5, r5
 8005b1a:	eb46 0406 	adc.w	r4, r6, r6
 8005b1e:	461a      	mov	r2, r3
 8005b20:	4623      	mov	r3, r4
 8005b22:	f7fa fba5 	bl	8000270 <__aeabi_uldivmod>
 8005b26:	4603      	mov	r3, r0
 8005b28:	460c      	mov	r4, r1
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	4b2c      	ldr	r3, [pc, #176]	; (8005be0 <UART_SetConfig+0x384>)
 8005b2e:	fba3 1302 	umull	r1, r3, r3, r2
 8005b32:	095b      	lsrs	r3, r3, #5
 8005b34:	2164      	movs	r1, #100	; 0x64
 8005b36:	fb01 f303 	mul.w	r3, r1, r3
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	3332      	adds	r3, #50	; 0x32
 8005b40:	4a27      	ldr	r2, [pc, #156]	; (8005be0 <UART_SetConfig+0x384>)
 8005b42:	fba2 2303 	umull	r2, r3, r2, r3
 8005b46:	095b      	lsrs	r3, r3, #5
 8005b48:	005b      	lsls	r3, r3, #1
 8005b4a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b4e:	4498      	add	r8, r3
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	461d      	mov	r5, r3
 8005b54:	f04f 0600 	mov.w	r6, #0
 8005b58:	46a9      	mov	r9, r5
 8005b5a:	46b2      	mov	sl, r6
 8005b5c:	eb19 0309 	adds.w	r3, r9, r9
 8005b60:	eb4a 040a 	adc.w	r4, sl, sl
 8005b64:	4699      	mov	r9, r3
 8005b66:	46a2      	mov	sl, r4
 8005b68:	eb19 0905 	adds.w	r9, r9, r5
 8005b6c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005b70:	f04f 0100 	mov.w	r1, #0
 8005b74:	f04f 0200 	mov.w	r2, #0
 8005b78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b84:	4689      	mov	r9, r1
 8005b86:	4692      	mov	sl, r2
 8005b88:	eb19 0005 	adds.w	r0, r9, r5
 8005b8c:	eb4a 0106 	adc.w	r1, sl, r6
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	461d      	mov	r5, r3
 8005b96:	f04f 0600 	mov.w	r6, #0
 8005b9a:	196b      	adds	r3, r5, r5
 8005b9c:	eb46 0406 	adc.w	r4, r6, r6
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	4623      	mov	r3, r4
 8005ba4:	f7fa fb64 	bl	8000270 <__aeabi_uldivmod>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	460c      	mov	r4, r1
 8005bac:	461a      	mov	r2, r3
 8005bae:	4b0c      	ldr	r3, [pc, #48]	; (8005be0 <UART_SetConfig+0x384>)
 8005bb0:	fba3 1302 	umull	r1, r3, r3, r2
 8005bb4:	095b      	lsrs	r3, r3, #5
 8005bb6:	2164      	movs	r1, #100	; 0x64
 8005bb8:	fb01 f303 	mul.w	r3, r1, r3
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	3332      	adds	r3, #50	; 0x32
 8005bc2:	4a07      	ldr	r2, [pc, #28]	; (8005be0 <UART_SetConfig+0x384>)
 8005bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc8:	095b      	lsrs	r3, r3, #5
 8005bca:	f003 0207 	and.w	r2, r3, #7
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4442      	add	r2, r8
 8005bd4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005bd6:	e1b2      	b.n	8005f3e <UART_SetConfig+0x6e2>
 8005bd8:	40011000 	.word	0x40011000
 8005bdc:	40011400 	.word	0x40011400
 8005be0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4ad7      	ldr	r2, [pc, #860]	; (8005f48 <UART_SetConfig+0x6ec>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d005      	beq.n	8005bfa <UART_SetConfig+0x39e>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4ad6      	ldr	r2, [pc, #856]	; (8005f4c <UART_SetConfig+0x6f0>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	f040 80d1 	bne.w	8005d9c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bfa:	f7fe fd81 	bl	8004700 <HAL_RCC_GetPCLK2Freq>
 8005bfe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	469a      	mov	sl, r3
 8005c04:	f04f 0b00 	mov.w	fp, #0
 8005c08:	46d0      	mov	r8, sl
 8005c0a:	46d9      	mov	r9, fp
 8005c0c:	eb18 0308 	adds.w	r3, r8, r8
 8005c10:	eb49 0409 	adc.w	r4, r9, r9
 8005c14:	4698      	mov	r8, r3
 8005c16:	46a1      	mov	r9, r4
 8005c18:	eb18 080a 	adds.w	r8, r8, sl
 8005c1c:	eb49 090b 	adc.w	r9, r9, fp
 8005c20:	f04f 0100 	mov.w	r1, #0
 8005c24:	f04f 0200 	mov.w	r2, #0
 8005c28:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005c2c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005c30:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005c34:	4688      	mov	r8, r1
 8005c36:	4691      	mov	r9, r2
 8005c38:	eb1a 0508 	adds.w	r5, sl, r8
 8005c3c:	eb4b 0609 	adc.w	r6, fp, r9
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	4619      	mov	r1, r3
 8005c46:	f04f 0200 	mov.w	r2, #0
 8005c4a:	f04f 0300 	mov.w	r3, #0
 8005c4e:	f04f 0400 	mov.w	r4, #0
 8005c52:	0094      	lsls	r4, r2, #2
 8005c54:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c58:	008b      	lsls	r3, r1, #2
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	4623      	mov	r3, r4
 8005c5e:	4628      	mov	r0, r5
 8005c60:	4631      	mov	r1, r6
 8005c62:	f7fa fb05 	bl	8000270 <__aeabi_uldivmod>
 8005c66:	4603      	mov	r3, r0
 8005c68:	460c      	mov	r4, r1
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	4bb8      	ldr	r3, [pc, #736]	; (8005f50 <UART_SetConfig+0x6f4>)
 8005c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8005c72:	095b      	lsrs	r3, r3, #5
 8005c74:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	469b      	mov	fp, r3
 8005c7c:	f04f 0c00 	mov.w	ip, #0
 8005c80:	46d9      	mov	r9, fp
 8005c82:	46e2      	mov	sl, ip
 8005c84:	eb19 0309 	adds.w	r3, r9, r9
 8005c88:	eb4a 040a 	adc.w	r4, sl, sl
 8005c8c:	4699      	mov	r9, r3
 8005c8e:	46a2      	mov	sl, r4
 8005c90:	eb19 090b 	adds.w	r9, r9, fp
 8005c94:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c98:	f04f 0100 	mov.w	r1, #0
 8005c9c:	f04f 0200 	mov.w	r2, #0
 8005ca0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ca4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ca8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005cac:	4689      	mov	r9, r1
 8005cae:	4692      	mov	sl, r2
 8005cb0:	eb1b 0509 	adds.w	r5, fp, r9
 8005cb4:	eb4c 060a 	adc.w	r6, ip, sl
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	f04f 0200 	mov.w	r2, #0
 8005cc2:	f04f 0300 	mov.w	r3, #0
 8005cc6:	f04f 0400 	mov.w	r4, #0
 8005cca:	0094      	lsls	r4, r2, #2
 8005ccc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005cd0:	008b      	lsls	r3, r1, #2
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	4623      	mov	r3, r4
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	4631      	mov	r1, r6
 8005cda:	f7fa fac9 	bl	8000270 <__aeabi_uldivmod>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	460c      	mov	r4, r1
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	4b9a      	ldr	r3, [pc, #616]	; (8005f50 <UART_SetConfig+0x6f4>)
 8005ce6:	fba3 1302 	umull	r1, r3, r3, r2
 8005cea:	095b      	lsrs	r3, r3, #5
 8005cec:	2164      	movs	r1, #100	; 0x64
 8005cee:	fb01 f303 	mul.w	r3, r1, r3
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	011b      	lsls	r3, r3, #4
 8005cf6:	3332      	adds	r3, #50	; 0x32
 8005cf8:	4a95      	ldr	r2, [pc, #596]	; (8005f50 <UART_SetConfig+0x6f4>)
 8005cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfe:	095b      	lsrs	r3, r3, #5
 8005d00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d04:	4498      	add	r8, r3
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	469b      	mov	fp, r3
 8005d0a:	f04f 0c00 	mov.w	ip, #0
 8005d0e:	46d9      	mov	r9, fp
 8005d10:	46e2      	mov	sl, ip
 8005d12:	eb19 0309 	adds.w	r3, r9, r9
 8005d16:	eb4a 040a 	adc.w	r4, sl, sl
 8005d1a:	4699      	mov	r9, r3
 8005d1c:	46a2      	mov	sl, r4
 8005d1e:	eb19 090b 	adds.w	r9, r9, fp
 8005d22:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005d26:	f04f 0100 	mov.w	r1, #0
 8005d2a:	f04f 0200 	mov.w	r2, #0
 8005d2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d3a:	4689      	mov	r9, r1
 8005d3c:	4692      	mov	sl, r2
 8005d3e:	eb1b 0509 	adds.w	r5, fp, r9
 8005d42:	eb4c 060a 	adc.w	r6, ip, sl
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	f04f 0200 	mov.w	r2, #0
 8005d50:	f04f 0300 	mov.w	r3, #0
 8005d54:	f04f 0400 	mov.w	r4, #0
 8005d58:	0094      	lsls	r4, r2, #2
 8005d5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d5e:	008b      	lsls	r3, r1, #2
 8005d60:	461a      	mov	r2, r3
 8005d62:	4623      	mov	r3, r4
 8005d64:	4628      	mov	r0, r5
 8005d66:	4631      	mov	r1, r6
 8005d68:	f7fa fa82 	bl	8000270 <__aeabi_uldivmod>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	460c      	mov	r4, r1
 8005d70:	461a      	mov	r2, r3
 8005d72:	4b77      	ldr	r3, [pc, #476]	; (8005f50 <UART_SetConfig+0x6f4>)
 8005d74:	fba3 1302 	umull	r1, r3, r3, r2
 8005d78:	095b      	lsrs	r3, r3, #5
 8005d7a:	2164      	movs	r1, #100	; 0x64
 8005d7c:	fb01 f303 	mul.w	r3, r1, r3
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	011b      	lsls	r3, r3, #4
 8005d84:	3332      	adds	r3, #50	; 0x32
 8005d86:	4a72      	ldr	r2, [pc, #456]	; (8005f50 <UART_SetConfig+0x6f4>)
 8005d88:	fba2 2303 	umull	r2, r3, r2, r3
 8005d8c:	095b      	lsrs	r3, r3, #5
 8005d8e:	f003 020f 	and.w	r2, r3, #15
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4442      	add	r2, r8
 8005d98:	609a      	str	r2, [r3, #8]
 8005d9a:	e0d0      	b.n	8005f3e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d9c:	f7fe fc9c 	bl	80046d8 <HAL_RCC_GetPCLK1Freq>
 8005da0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	469a      	mov	sl, r3
 8005da6:	f04f 0b00 	mov.w	fp, #0
 8005daa:	46d0      	mov	r8, sl
 8005dac:	46d9      	mov	r9, fp
 8005dae:	eb18 0308 	adds.w	r3, r8, r8
 8005db2:	eb49 0409 	adc.w	r4, r9, r9
 8005db6:	4698      	mov	r8, r3
 8005db8:	46a1      	mov	r9, r4
 8005dba:	eb18 080a 	adds.w	r8, r8, sl
 8005dbe:	eb49 090b 	adc.w	r9, r9, fp
 8005dc2:	f04f 0100 	mov.w	r1, #0
 8005dc6:	f04f 0200 	mov.w	r2, #0
 8005dca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005dce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005dd2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005dd6:	4688      	mov	r8, r1
 8005dd8:	4691      	mov	r9, r2
 8005dda:	eb1a 0508 	adds.w	r5, sl, r8
 8005dde:	eb4b 0609 	adc.w	r6, fp, r9
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	4619      	mov	r1, r3
 8005de8:	f04f 0200 	mov.w	r2, #0
 8005dec:	f04f 0300 	mov.w	r3, #0
 8005df0:	f04f 0400 	mov.w	r4, #0
 8005df4:	0094      	lsls	r4, r2, #2
 8005df6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005dfa:	008b      	lsls	r3, r1, #2
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	4623      	mov	r3, r4
 8005e00:	4628      	mov	r0, r5
 8005e02:	4631      	mov	r1, r6
 8005e04:	f7fa fa34 	bl	8000270 <__aeabi_uldivmod>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	460c      	mov	r4, r1
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	4b50      	ldr	r3, [pc, #320]	; (8005f50 <UART_SetConfig+0x6f4>)
 8005e10:	fba3 2302 	umull	r2, r3, r3, r2
 8005e14:	095b      	lsrs	r3, r3, #5
 8005e16:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	469b      	mov	fp, r3
 8005e1e:	f04f 0c00 	mov.w	ip, #0
 8005e22:	46d9      	mov	r9, fp
 8005e24:	46e2      	mov	sl, ip
 8005e26:	eb19 0309 	adds.w	r3, r9, r9
 8005e2a:	eb4a 040a 	adc.w	r4, sl, sl
 8005e2e:	4699      	mov	r9, r3
 8005e30:	46a2      	mov	sl, r4
 8005e32:	eb19 090b 	adds.w	r9, r9, fp
 8005e36:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005e3a:	f04f 0100 	mov.w	r1, #0
 8005e3e:	f04f 0200 	mov.w	r2, #0
 8005e42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e4e:	4689      	mov	r9, r1
 8005e50:	4692      	mov	sl, r2
 8005e52:	eb1b 0509 	adds.w	r5, fp, r9
 8005e56:	eb4c 060a 	adc.w	r6, ip, sl
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	4619      	mov	r1, r3
 8005e60:	f04f 0200 	mov.w	r2, #0
 8005e64:	f04f 0300 	mov.w	r3, #0
 8005e68:	f04f 0400 	mov.w	r4, #0
 8005e6c:	0094      	lsls	r4, r2, #2
 8005e6e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e72:	008b      	lsls	r3, r1, #2
 8005e74:	461a      	mov	r2, r3
 8005e76:	4623      	mov	r3, r4
 8005e78:	4628      	mov	r0, r5
 8005e7a:	4631      	mov	r1, r6
 8005e7c:	f7fa f9f8 	bl	8000270 <__aeabi_uldivmod>
 8005e80:	4603      	mov	r3, r0
 8005e82:	460c      	mov	r4, r1
 8005e84:	461a      	mov	r2, r3
 8005e86:	4b32      	ldr	r3, [pc, #200]	; (8005f50 <UART_SetConfig+0x6f4>)
 8005e88:	fba3 1302 	umull	r1, r3, r3, r2
 8005e8c:	095b      	lsrs	r3, r3, #5
 8005e8e:	2164      	movs	r1, #100	; 0x64
 8005e90:	fb01 f303 	mul.w	r3, r1, r3
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	011b      	lsls	r3, r3, #4
 8005e98:	3332      	adds	r3, #50	; 0x32
 8005e9a:	4a2d      	ldr	r2, [pc, #180]	; (8005f50 <UART_SetConfig+0x6f4>)
 8005e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea0:	095b      	lsrs	r3, r3, #5
 8005ea2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ea6:	4498      	add	r8, r3
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	469b      	mov	fp, r3
 8005eac:	f04f 0c00 	mov.w	ip, #0
 8005eb0:	46d9      	mov	r9, fp
 8005eb2:	46e2      	mov	sl, ip
 8005eb4:	eb19 0309 	adds.w	r3, r9, r9
 8005eb8:	eb4a 040a 	adc.w	r4, sl, sl
 8005ebc:	4699      	mov	r9, r3
 8005ebe:	46a2      	mov	sl, r4
 8005ec0:	eb19 090b 	adds.w	r9, r9, fp
 8005ec4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005ec8:	f04f 0100 	mov.w	r1, #0
 8005ecc:	f04f 0200 	mov.w	r2, #0
 8005ed0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ed4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ed8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005edc:	4689      	mov	r9, r1
 8005ede:	4692      	mov	sl, r2
 8005ee0:	eb1b 0509 	adds.w	r5, fp, r9
 8005ee4:	eb4c 060a 	adc.w	r6, ip, sl
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	4619      	mov	r1, r3
 8005eee:	f04f 0200 	mov.w	r2, #0
 8005ef2:	f04f 0300 	mov.w	r3, #0
 8005ef6:	f04f 0400 	mov.w	r4, #0
 8005efa:	0094      	lsls	r4, r2, #2
 8005efc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f00:	008b      	lsls	r3, r1, #2
 8005f02:	461a      	mov	r2, r3
 8005f04:	4623      	mov	r3, r4
 8005f06:	4628      	mov	r0, r5
 8005f08:	4631      	mov	r1, r6
 8005f0a:	f7fa f9b1 	bl	8000270 <__aeabi_uldivmod>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	460c      	mov	r4, r1
 8005f12:	461a      	mov	r2, r3
 8005f14:	4b0e      	ldr	r3, [pc, #56]	; (8005f50 <UART_SetConfig+0x6f4>)
 8005f16:	fba3 1302 	umull	r1, r3, r3, r2
 8005f1a:	095b      	lsrs	r3, r3, #5
 8005f1c:	2164      	movs	r1, #100	; 0x64
 8005f1e:	fb01 f303 	mul.w	r3, r1, r3
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	011b      	lsls	r3, r3, #4
 8005f26:	3332      	adds	r3, #50	; 0x32
 8005f28:	4a09      	ldr	r2, [pc, #36]	; (8005f50 <UART_SetConfig+0x6f4>)
 8005f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2e:	095b      	lsrs	r3, r3, #5
 8005f30:	f003 020f 	and.w	r2, r3, #15
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4442      	add	r2, r8
 8005f3a:	609a      	str	r2, [r3, #8]
}
 8005f3c:	e7ff      	b.n	8005f3e <UART_SetConfig+0x6e2>
 8005f3e:	bf00      	nop
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f48:	40011000 	.word	0x40011000
 8005f4c:	40011400 	.word	0x40011400
 8005f50:	51eb851f 	.word	0x51eb851f

08005f54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f54:	b084      	sub	sp, #16
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b084      	sub	sp, #16
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	f107 001c 	add.w	r0, r7, #28
 8005f62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d122      	bne.n	8005fb2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d105      	bne.n	8005fa6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f94a 	bl	8006240 <USB_CoreReset>
 8005fac:	4603      	mov	r3, r0
 8005fae:	73fb      	strb	r3, [r7, #15]
 8005fb0:	e01a      	b.n	8005fe8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f93e 	bl	8006240 <USB_CoreReset>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d106      	bne.n	8005fdc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	639a      	str	r2, [r3, #56]	; 0x38
 8005fda:	e005      	b.n	8005fe8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d10b      	bne.n	8006006 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f043 0206 	orr.w	r2, r3, #6
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f043 0220 	orr.w	r2, r3, #32
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006006:	7bfb      	ldrb	r3, [r7, #15]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006012:	b004      	add	sp, #16
 8006014:	4770      	bx	lr

08006016 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006016:	b480      	push	{r7}
 8006018:	b083      	sub	sp, #12
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f043 0201 	orr.w	r2, r3, #1
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f023 0201 	bic.w	r2, r3, #1
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	370c      	adds	r7, #12
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr

0800605a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b082      	sub	sp, #8
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
 8006062:	460b      	mov	r3, r1
 8006064:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006072:	78fb      	ldrb	r3, [r7, #3]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d106      	bne.n	8006086 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	60da      	str	r2, [r3, #12]
 8006084:	e00b      	b.n	800609e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006086:	78fb      	ldrb	r3, [r7, #3]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d106      	bne.n	800609a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	60da      	str	r2, [r3, #12]
 8006098:	e001      	b.n	800609e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e003      	b.n	80060a6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800609e:	2032      	movs	r0, #50	; 0x32
 80060a0:	f7fb f9d6 	bl	8001450 <HAL_Delay>

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
	...

080060b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	019b      	lsls	r3, r3, #6
 80060c2:	f043 0220 	orr.w	r2, r3, #32
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	3301      	adds	r3, #1
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4a09      	ldr	r2, [pc, #36]	; (80060f8 <USB_FlushTxFifo+0x48>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d901      	bls.n	80060dc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e006      	b.n	80060ea <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	f003 0320 	and.w	r3, r3, #32
 80060e4:	2b20      	cmp	r3, #32
 80060e6:	d0f0      	beq.n	80060ca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3714      	adds	r7, #20
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	00030d40 	.word	0x00030d40

080060fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006104:	2300      	movs	r3, #0
 8006106:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2210      	movs	r2, #16
 800610c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	3301      	adds	r3, #1
 8006112:	60fb      	str	r3, [r7, #12]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	4a09      	ldr	r2, [pc, #36]	; (800613c <USB_FlushRxFifo+0x40>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d901      	bls.n	8006120 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e006      	b.n	800612e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	f003 0310 	and.w	r3, r3, #16
 8006128:	2b10      	cmp	r3, #16
 800612a:	d0f0      	beq.n	800610e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3714      	adds	r7, #20
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	00030d40 	.word	0x00030d40

08006140 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006140:	b480      	push	{r7}
 8006142:	b089      	sub	sp, #36	; 0x24
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	4611      	mov	r1, r2
 800614c:	461a      	mov	r2, r3
 800614e:	460b      	mov	r3, r1
 8006150:	71fb      	strb	r3, [r7, #7]
 8006152:	4613      	mov	r3, r2
 8006154:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800615e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006162:	2b00      	cmp	r3, #0
 8006164:	d11a      	bne.n	800619c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006166:	88bb      	ldrh	r3, [r7, #4]
 8006168:	3303      	adds	r3, #3
 800616a:	089b      	lsrs	r3, r3, #2
 800616c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800616e:	2300      	movs	r3, #0
 8006170:	61bb      	str	r3, [r7, #24]
 8006172:	e00f      	b.n	8006194 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006174:	79fb      	ldrb	r3, [r7, #7]
 8006176:	031a      	lsls	r2, r3, #12
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	4413      	add	r3, r2
 800617c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006180:	461a      	mov	r2, r3
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	3304      	adds	r3, #4
 800618c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	3301      	adds	r3, #1
 8006192:	61bb      	str	r3, [r7, #24]
 8006194:	69ba      	ldr	r2, [r7, #24]
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	429a      	cmp	r2, r3
 800619a:	d3eb      	bcc.n	8006174 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3724      	adds	r7, #36	; 0x24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b089      	sub	sp, #36	; 0x24
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	4613      	mov	r3, r2
 80061b6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80061c0:	88fb      	ldrh	r3, [r7, #6]
 80061c2:	3303      	adds	r3, #3
 80061c4:	089b      	lsrs	r3, r3, #2
 80061c6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80061c8:	2300      	movs	r3, #0
 80061ca:	61bb      	str	r3, [r7, #24]
 80061cc:	e00b      	b.n	80061e6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	601a      	str	r2, [r3, #0]
    pDest++;
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	3304      	adds	r3, #4
 80061de:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	3301      	adds	r3, #1
 80061e4:	61bb      	str	r3, [r7, #24]
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d3ef      	bcc.n	80061ce <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80061ee:	69fb      	ldr	r3, [r7, #28]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3724      	adds	r7, #36	; 0x24
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4013      	ands	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006214:	68fb      	ldr	r3, [r7, #12]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006222:	b480      	push	{r7}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	f003 0301 	and.w	r3, r3, #1
}
 8006232:	4618      	mov	r0, r3
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
	...

08006240 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006248:	2300      	movs	r3, #0
 800624a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	3301      	adds	r3, #1
 8006250:	60fb      	str	r3, [r7, #12]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	4a13      	ldr	r2, [pc, #76]	; (80062a4 <USB_CoreReset+0x64>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d901      	bls.n	800625e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e01b      	b.n	8006296 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	2b00      	cmp	r3, #0
 8006264:	daf2      	bge.n	800624c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006266:	2300      	movs	r3, #0
 8006268:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	f043 0201 	orr.w	r2, r3, #1
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	3301      	adds	r3, #1
 800627a:	60fb      	str	r3, [r7, #12]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	4a09      	ldr	r2, [pc, #36]	; (80062a4 <USB_CoreReset+0x64>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d901      	bls.n	8006288 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e006      	b.n	8006296 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	f003 0301 	and.w	r3, r3, #1
 8006290:	2b01      	cmp	r3, #1
 8006292:	d0f0      	beq.n	8006276 <USB_CoreReset+0x36>

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	00030d40 	.word	0x00030d40

080062a8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062a8:	b084      	sub	sp, #16
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b084      	sub	sp, #16
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	f107 001c 	add.w	r0, r7, #28
 80062b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062c4:	461a      	mov	r2, r3
 80062c6:	2300      	movs	r3, #0
 80062c8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062da:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d018      	beq.n	800632c <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	2b03      	cmp	r3, #3
 80062fe:	d10a      	bne.n	8006316 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68ba      	ldr	r2, [r7, #8]
 800630a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800630e:	f043 0304 	orr.w	r3, r3, #4
 8006312:	6013      	str	r3, [r2, #0]
 8006314:	e014      	b.n	8006340 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006324:	f023 0304 	bic.w	r3, r3, #4
 8006328:	6013      	str	r3, [r2, #0]
 800632a:	e009      	b.n	8006340 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800633a:	f023 0304 	bic.w	r3, r3, #4
 800633e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006340:	2110      	movs	r1, #16
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7ff feb4 	bl	80060b0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f7ff fed7 	bl	80060fc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800634e:	2300      	movs	r3, #0
 8006350:	60fb      	str	r3, [r7, #12]
 8006352:	e015      	b.n	8006380 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	4413      	add	r3, r2
 800635c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006360:	461a      	mov	r2, r3
 8006362:	f04f 33ff 	mov.w	r3, #4294967295
 8006366:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	4413      	add	r3, r2
 8006370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006374:	461a      	mov	r2, r3
 8006376:	2300      	movs	r3, #0
 8006378:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	3301      	adds	r3, #1
 800637e:	60fb      	str	r3, [r7, #12]
 8006380:	6a3b      	ldr	r3, [r7, #32]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	429a      	cmp	r2, r3
 8006386:	d3e5      	bcc.n	8006354 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006388:	2101      	movs	r1, #1
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f882 	bl	8006494 <USB_DriveVbus>

  HAL_Delay(200U);
 8006390:	20c8      	movs	r0, #200	; 0xc8
 8006392:	f7fb f85d 	bl	8001450 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f04f 32ff 	mov.w	r2, #4294967295
 80063a2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00b      	beq.n	80063c8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063b6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a14      	ldr	r2, [pc, #80]	; (800640c <USB_HostInit+0x164>)
 80063bc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a13      	ldr	r2, [pc, #76]	; (8006410 <USB_HostInit+0x168>)
 80063c2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80063c6:	e009      	b.n	80063dc <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2280      	movs	r2, #128	; 0x80
 80063cc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a10      	ldr	r2, [pc, #64]	; (8006414 <USB_HostInit+0x16c>)
 80063d2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a10      	ldr	r2, [pc, #64]	; (8006418 <USB_HostInit+0x170>)
 80063d8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80063dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d105      	bne.n	80063ee <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	f043 0210 	orr.w	r2, r3, #16
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	699a      	ldr	r2, [r3, #24]
 80063f2:	4b0a      	ldr	r3, [pc, #40]	; (800641c <USB_HostInit+0x174>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006406:	b004      	add	sp, #16
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	01000200 	.word	0x01000200
 8006410:	00e00300 	.word	0x00e00300
 8006414:	00600080 	.word	0x00600080
 8006418:	004000e0 	.word	0x004000e0
 800641c:	a3200008 	.word	0xa3200008

08006420 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	460b      	mov	r3, r1
 800642a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800643e:	f023 0303 	bic.w	r3, r3, #3
 8006442:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	78fb      	ldrb	r3, [r7, #3]
 800644e:	f003 0303 	and.w	r3, r3, #3
 8006452:	68f9      	ldr	r1, [r7, #12]
 8006454:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006458:	4313      	orrs	r3, r2
 800645a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800645c:	78fb      	ldrb	r3, [r7, #3]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d107      	bne.n	8006472 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006468:	461a      	mov	r2, r3
 800646a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800646e:	6053      	str	r3, [r2, #4]
 8006470:	e009      	b.n	8006486 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006472:	78fb      	ldrb	r3, [r7, #3]
 8006474:	2b02      	cmp	r3, #2
 8006476:	d106      	bne.n	8006486 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800647e:	461a      	mov	r2, r3
 8006480:	f241 7370 	movw	r3, #6000	; 0x1770
 8006484:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3714      	adds	r7, #20
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	460b      	mov	r3, r1
 800649e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80064b8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d109      	bne.n	80064d8 <USB_DriveVbus+0x44>
 80064c4:	78fb      	ldrb	r3, [r7, #3]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d106      	bne.n	80064d8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80064d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80064d6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064e2:	d109      	bne.n	80064f8 <USB_DriveVbus+0x64>
 80064e4:	78fb      	ldrb	r3, [r7, #3]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d106      	bne.n	80064f8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80064f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064f6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006506:	b480      	push	{r7}
 8006508:	b085      	sub	sp, #20
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	b29b      	uxth	r3, r3
}
 800651c:	4618      	mov	r0, r3
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8006528:	b480      	push	{r7}
 800652a:	b087      	sub	sp, #28
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	4608      	mov	r0, r1
 8006532:	4611      	mov	r1, r2
 8006534:	461a      	mov	r2, r3
 8006536:	4603      	mov	r3, r0
 8006538:	70fb      	strb	r3, [r7, #3]
 800653a:	460b      	mov	r3, r1
 800653c:	70bb      	strb	r3, [r7, #2]
 800653e:	4613      	mov	r3, r2
 8006540:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006542:	2300      	movs	r3, #0
 8006544:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800654a:	78fb      	ldrb	r3, [r7, #3]
 800654c:	015a      	lsls	r2, r3, #5
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	4413      	add	r3, r2
 8006552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006556:	461a      	mov	r2, r3
 8006558:	f04f 33ff 	mov.w	r3, #4294967295
 800655c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800655e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006562:	2b03      	cmp	r3, #3
 8006564:	d87e      	bhi.n	8006664 <USB_HC_Init+0x13c>
 8006566:	a201      	add	r2, pc, #4	; (adr r2, 800656c <USB_HC_Init+0x44>)
 8006568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656c:	0800657d 	.word	0x0800657d
 8006570:	08006627 	.word	0x08006627
 8006574:	0800657d 	.word	0x0800657d
 8006578:	080065e9 	.word	0x080065e9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800657c:	78fb      	ldrb	r3, [r7, #3]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	4413      	add	r3, r2
 8006584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006588:	461a      	mov	r2, r3
 800658a:	f240 439d 	movw	r3, #1181	; 0x49d
 800658e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006590:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006594:	2b00      	cmp	r3, #0
 8006596:	da10      	bge.n	80065ba <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006598:	78fb      	ldrb	r3, [r7, #3]
 800659a:	015a      	lsls	r2, r3, #5
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	78fa      	ldrb	r2, [r7, #3]
 80065a8:	0151      	lsls	r1, r2, #5
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	440a      	add	r2, r1
 80065ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065b6:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80065b8:	e057      	b.n	800666a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d051      	beq.n	800666a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80065c6:	78fb      	ldrb	r3, [r7, #3]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	78fa      	ldrb	r2, [r7, #3]
 80065d6:	0151      	lsls	r1, r2, #5
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	440a      	add	r2, r1
 80065dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80065e4:	60d3      	str	r3, [r2, #12]
      break;
 80065e6:	e040      	b.n	800666a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80065e8:	78fb      	ldrb	r3, [r7, #3]
 80065ea:	015a      	lsls	r2, r3, #5
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f4:	461a      	mov	r2, r3
 80065f6:	f240 639d 	movw	r3, #1693	; 0x69d
 80065fa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80065fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006600:	2b00      	cmp	r3, #0
 8006602:	da34      	bge.n	800666e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006604:	78fb      	ldrb	r3, [r7, #3]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	4413      	add	r3, r2
 800660c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	78fa      	ldrb	r2, [r7, #3]
 8006614:	0151      	lsls	r1, r2, #5
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	440a      	add	r2, r1
 800661a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800661e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006622:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006624:	e023      	b.n	800666e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006626:	78fb      	ldrb	r3, [r7, #3]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	4413      	add	r3, r2
 800662e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006632:	461a      	mov	r2, r3
 8006634:	f240 2325 	movw	r3, #549	; 0x225
 8006638:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800663a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800663e:	2b00      	cmp	r3, #0
 8006640:	da17      	bge.n	8006672 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006642:	78fb      	ldrb	r3, [r7, #3]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	4413      	add	r3, r2
 800664a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	78fa      	ldrb	r2, [r7, #3]
 8006652:	0151      	lsls	r1, r2, #5
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	440a      	add	r2, r1
 8006658:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800665c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006660:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006662:	e006      	b.n	8006672 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	75fb      	strb	r3, [r7, #23]
      break;
 8006668:	e004      	b.n	8006674 <USB_HC_Init+0x14c>
      break;
 800666a:	bf00      	nop
 800666c:	e002      	b.n	8006674 <USB_HC_Init+0x14c>
      break;
 800666e:	bf00      	nop
 8006670:	e000      	b.n	8006674 <USB_HC_Init+0x14c>
      break;
 8006672:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800667a:	699a      	ldr	r2, [r3, #24]
 800667c:	78fb      	ldrb	r3, [r7, #3]
 800667e:	f003 030f 	and.w	r3, r3, #15
 8006682:	2101      	movs	r1, #1
 8006684:	fa01 f303 	lsl.w	r3, r1, r3
 8006688:	68b9      	ldr	r1, [r7, #8]
 800668a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800668e:	4313      	orrs	r3, r2
 8006690:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800669e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	da03      	bge.n	80066ae <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80066a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066aa:	613b      	str	r3, [r7, #16]
 80066ac:	e001      	b.n	80066b2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80066b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d103      	bne.n	80066c2 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80066ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80066be:	60fb      	str	r3, [r7, #12]
 80066c0:	e001      	b.n	80066c6 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80066c6:	787b      	ldrb	r3, [r7, #1]
 80066c8:	059b      	lsls	r3, r3, #22
 80066ca:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80066ce:	78bb      	ldrb	r3, [r7, #2]
 80066d0:	02db      	lsls	r3, r3, #11
 80066d2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80066d6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80066d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80066dc:	049b      	lsls	r3, r3, #18
 80066de:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80066e2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80066e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80066e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80066ea:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80066f0:	78fb      	ldrb	r3, [r7, #3]
 80066f2:	0159      	lsls	r1, r3, #5
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	440b      	add	r3, r1
 80066f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066fc:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006702:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006704:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006708:	2b03      	cmp	r3, #3
 800670a:	d10f      	bne.n	800672c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800670c:	78fb      	ldrb	r3, [r7, #3]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	4413      	add	r3, r2
 8006714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	78fa      	ldrb	r2, [r7, #3]
 800671c:	0151      	lsls	r1, r2, #5
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	440a      	add	r2, r1
 8006722:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006726:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800672a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800672c:	7dfb      	ldrb	r3, [r7, #23]
}
 800672e:	4618      	mov	r0, r3
 8006730:	371c      	adds	r7, #28
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop

0800673c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b08c      	sub	sp, #48	; 0x30
 8006740:	af02      	add	r7, sp, #8
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	4613      	mov	r3, r2
 8006748:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	785b      	ldrb	r3, [r3, #1]
 8006752:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006754:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006758:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006762:	2b00      	cmp	r3, #0
 8006764:	d028      	beq.n	80067b8 <USB_HC_StartXfer+0x7c>
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	791b      	ldrb	r3, [r3, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d124      	bne.n	80067b8 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800676e:	79fb      	ldrb	r3, [r7, #7]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10b      	bne.n	800678c <USB_HC_StartXfer+0x50>
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	795b      	ldrb	r3, [r3, #5]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d107      	bne.n	800678c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	785b      	ldrb	r3, [r3, #1]
 8006780:	4619      	mov	r1, r3
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f000 fa2e 	bl	8006be4 <USB_DoPing>
      return HAL_OK;
 8006788:	2300      	movs	r3, #0
 800678a:	e112      	b.n	80069b2 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800678c:	79fb      	ldrb	r3, [r7, #7]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d112      	bne.n	80067b8 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	6a3b      	ldr	r3, [r7, #32]
 8006798:	4413      	add	r3, r2
 800679a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	69fa      	ldr	r2, [r7, #28]
 80067a2:	0151      	lsls	r1, r2, #5
 80067a4:	6a3a      	ldr	r2, [r7, #32]
 80067a6:	440a      	add	r2, r1
 80067a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067ac:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80067b0:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	2200      	movs	r2, #0
 80067b6:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d018      	beq.n	80067f2 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	8912      	ldrh	r2, [r2, #8]
 80067c8:	4413      	add	r3, r2
 80067ca:	3b01      	subs	r3, #1
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	8912      	ldrh	r2, [r2, #8]
 80067d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80067d4:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80067d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80067d8:	8b7b      	ldrh	r3, [r7, #26]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d90b      	bls.n	80067f6 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80067de:	8b7b      	ldrh	r3, [r7, #26]
 80067e0:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80067e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	8912      	ldrh	r2, [r2, #8]
 80067e8:	fb02 f203 	mul.w	r2, r2, r3
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	611a      	str	r2, [r3, #16]
 80067f0:	e001      	b.n	80067f6 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80067f2:	2301      	movs	r3, #1
 80067f4:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	78db      	ldrb	r3, [r3, #3]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d006      	beq.n	800680c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80067fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	8912      	ldrh	r2, [r2, #8]
 8006804:	fb02 f203 	mul.w	r2, r2, r3
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006814:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006816:	04d9      	lsls	r1, r3, #19
 8006818:	4b68      	ldr	r3, [pc, #416]	; (80069bc <USB_HC_StartXfer+0x280>)
 800681a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800681c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	7a9b      	ldrb	r3, [r3, #10]
 8006822:	075b      	lsls	r3, r3, #29
 8006824:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006828:	69f9      	ldr	r1, [r7, #28]
 800682a:	0148      	lsls	r0, r1, #5
 800682c:	6a39      	ldr	r1, [r7, #32]
 800682e:	4401      	add	r1, r0
 8006830:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006834:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006836:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006838:	79fb      	ldrb	r3, [r7, #7]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d009      	beq.n	8006852 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	68d9      	ldr	r1, [r3, #12]
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	015a      	lsls	r2, r3, #5
 8006846:	6a3b      	ldr	r3, [r7, #32]
 8006848:	4413      	add	r3, r2
 800684a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800684e:	460a      	mov	r2, r1
 8006850:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006852:	6a3b      	ldr	r3, [r7, #32]
 8006854:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	bf0c      	ite	eq
 8006862:	2301      	moveq	r3, #1
 8006864:	2300      	movne	r3, #0
 8006866:	b2db      	uxtb	r3, r3
 8006868:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	015a      	lsls	r2, r3, #5
 800686e:	6a3b      	ldr	r3, [r7, #32]
 8006870:	4413      	add	r3, r2
 8006872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	69fa      	ldr	r2, [r7, #28]
 800687a:	0151      	lsls	r1, r2, #5
 800687c:	6a3a      	ldr	r2, [r7, #32]
 800687e:	440a      	add	r2, r1
 8006880:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006884:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006888:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	6a3b      	ldr	r3, [r7, #32]
 8006890:	4413      	add	r3, r2
 8006892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	7e7b      	ldrb	r3, [r7, #25]
 800689a:	075b      	lsls	r3, r3, #29
 800689c:	69f9      	ldr	r1, [r7, #28]
 800689e:	0148      	lsls	r0, r1, #5
 80068a0:	6a39      	ldr	r1, [r7, #32]
 80068a2:	4401      	add	r1, r0
 80068a4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80068a8:	4313      	orrs	r3, r2
 80068aa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a41      	ldr	r2, [pc, #260]	; (80069c0 <USB_HC_StartXfer+0x284>)
 80068bc:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80068be:	4b40      	ldr	r3, [pc, #256]	; (80069c0 <USB_HC_StartXfer+0x284>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068c6:	4a3e      	ldr	r2, [pc, #248]	; (80069c0 <USB_HC_StartXfer+0x284>)
 80068c8:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	78db      	ldrb	r3, [r3, #3]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d006      	beq.n	80068e0 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80068d2:	4b3b      	ldr	r3, [pc, #236]	; (80069c0 <USB_HC_StartXfer+0x284>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068da:	4a39      	ldr	r2, [pc, #228]	; (80069c0 <USB_HC_StartXfer+0x284>)
 80068dc:	6013      	str	r3, [r2, #0]
 80068de:	e005      	b.n	80068ec <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80068e0:	4b37      	ldr	r3, [pc, #220]	; (80069c0 <USB_HC_StartXfer+0x284>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068e8:	4a35      	ldr	r2, [pc, #212]	; (80069c0 <USB_HC_StartXfer+0x284>)
 80068ea:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80068ec:	4b34      	ldr	r3, [pc, #208]	; (80069c0 <USB_HC_StartXfer+0x284>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068f4:	4a32      	ldr	r2, [pc, #200]	; (80069c0 <USB_HC_StartXfer+0x284>)
 80068f6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	015a      	lsls	r2, r3, #5
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	4413      	add	r3, r2
 8006900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006904:	461a      	mov	r2, r3
 8006906:	4b2e      	ldr	r3, [pc, #184]	; (80069c0 <USB_HC_StartXfer+0x284>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800690c:	79fb      	ldrb	r3, [r7, #7]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d14e      	bne.n	80069b0 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	78db      	ldrb	r3, [r3, #3]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d14a      	bne.n	80069b0 <USB_HC_StartXfer+0x274>
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d046      	beq.n	80069b0 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	79db      	ldrb	r3, [r3, #7]
 8006926:	2b03      	cmp	r3, #3
 8006928:	d830      	bhi.n	800698c <USB_HC_StartXfer+0x250>
 800692a:	a201      	add	r2, pc, #4	; (adr r2, 8006930 <USB_HC_StartXfer+0x1f4>)
 800692c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006930:	08006941 	.word	0x08006941
 8006934:	08006965 	.word	0x08006965
 8006938:	08006941 	.word	0x08006941
 800693c:	08006965 	.word	0x08006965
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	3303      	adds	r3, #3
 8006946:	089b      	lsrs	r3, r3, #2
 8006948:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800694a:	8afa      	ldrh	r2, [r7, #22]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006950:	b29b      	uxth	r3, r3
 8006952:	429a      	cmp	r2, r3
 8006954:	d91c      	bls.n	8006990 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	f043 0220 	orr.w	r2, r3, #32
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	619a      	str	r2, [r3, #24]
          }
          break;
 8006962:	e015      	b.n	8006990 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	3303      	adds	r3, #3
 800696a:	089b      	lsrs	r3, r3, #2
 800696c:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800696e:	8afa      	ldrh	r2, [r7, #22]
 8006970:	6a3b      	ldr	r3, [r7, #32]
 8006972:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	b29b      	uxth	r3, r3
 800697a:	429a      	cmp	r2, r3
 800697c:	d90a      	bls.n	8006994 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	619a      	str	r2, [r3, #24]
          }
          break;
 800698a:	e003      	b.n	8006994 <USB_HC_StartXfer+0x258>

        default:
          break;
 800698c:	bf00      	nop
 800698e:	e002      	b.n	8006996 <USB_HC_StartXfer+0x25a>
          break;
 8006990:	bf00      	nop
 8006992:	e000      	b.n	8006996 <USB_HC_StartXfer+0x25a>
          break;
 8006994:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	68d9      	ldr	r1, [r3, #12]
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	785a      	ldrb	r2, [r3, #1]
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	b298      	uxth	r0, r3
 80069a4:	2300      	movs	r3, #0
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	4603      	mov	r3, r0
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f7ff fbc8 	bl	8006140 <USB_WritePacket>
    }
  }

  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3728      	adds	r7, #40	; 0x28
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	1ff80000 	.word	0x1ff80000
 80069c0:	200000b8 	.word	0x200000b8

080069c4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	b29b      	uxth	r3, r3
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80069e6:	b480      	push	{r7}
 80069e8:	b087      	sub	sp, #28
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
 80069ee:	460b      	mov	r3, r1
 80069f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80069f6:	78fb      	ldrb	r3, [r7, #3]
 80069f8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80069fa:	2300      	movs	r3, #0
 80069fc:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	015a      	lsls	r2, r3, #5
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	4413      	add	r3, r2
 8006a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	0c9b      	lsrs	r3, r3, #18
 8006a0e:	f003 0303 	and.w	r3, r3, #3
 8006a12:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d002      	beq.n	8006a20 <USB_HC_Halt+0x3a>
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d16c      	bne.n	8006afa <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	015a      	lsls	r2, r3, #5
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	4413      	add	r3, r2
 8006a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	0151      	lsls	r1, r2, #5
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	440a      	add	r2, r1
 8006a36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a3e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d143      	bne.n	8006ad4 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	0151      	lsls	r1, r2, #5
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	440a      	add	r2, r1
 8006a62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a6a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	0151      	lsls	r1, r2, #5
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	440a      	add	r2, r1
 8006a82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a8a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	015a      	lsls	r2, r3, #5
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	4413      	add	r3, r2
 8006a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	0151      	lsls	r1, r2, #5
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	440a      	add	r2, r1
 8006aa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006aa6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006aaa:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	617b      	str	r3, [r7, #20]
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ab8:	d81d      	bhi.n	8006af6 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	015a      	lsls	r2, r3, #5
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006acc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ad0:	d0ec      	beq.n	8006aac <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006ad2:	e080      	b.n	8006bd6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	015a      	lsls	r2, r3, #5
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	0151      	lsls	r1, r2, #5
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	440a      	add	r2, r1
 8006aea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006af2:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006af4:	e06f      	b.n	8006bd6 <USB_HC_Halt+0x1f0>
          break;
 8006af6:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006af8:	e06d      	b.n	8006bd6 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	015a      	lsls	r2, r3, #5
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	4413      	add	r3, r2
 8006b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	0151      	lsls	r1, r2, #5
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	440a      	add	r2, r1
 8006b10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b18:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d143      	bne.n	8006bb2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	015a      	lsls	r2, r3, #5
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	0151      	lsls	r1, r2, #5
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	440a      	add	r2, r1
 8006b40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b48:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	015a      	lsls	r2, r3, #5
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	4413      	add	r3, r2
 8006b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	0151      	lsls	r1, r2, #5
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	440a      	add	r2, r1
 8006b60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b68:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	015a      	lsls	r2, r3, #5
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	4413      	add	r3, r2
 8006b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	0151      	lsls	r1, r2, #5
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	440a      	add	r2, r1
 8006b80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b88:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	617b      	str	r3, [r7, #20]
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b96:	d81d      	bhi.n	8006bd4 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	015a      	lsls	r2, r3, #5
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006baa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bae:	d0ec      	beq.n	8006b8a <USB_HC_Halt+0x1a4>
 8006bb0:	e011      	b.n	8006bd6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	0151      	lsls	r1, r2, #5
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	440a      	add	r2, r1
 8006bc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bd0:	6013      	str	r3, [r2, #0]
 8006bd2:	e000      	b.n	8006bd6 <USB_HC_Halt+0x1f0>
          break;
 8006bd4:	bf00      	nop
    }
  }

  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	371c      	adds	r7, #28
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b087      	sub	sp, #28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	460b      	mov	r3, r1
 8006bee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006bf4:	78fb      	ldrb	r3, [r7, #3]
 8006bf6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	04da      	lsls	r2, r3, #19
 8006c00:	4b15      	ldr	r3, [pc, #84]	; (8006c58 <USB_DoPing+0x74>)
 8006c02:	4013      	ands	r3, r2
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	0151      	lsls	r1, r2, #5
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	440a      	add	r2, r1
 8006c0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c14:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	015a      	lsls	r2, r3, #5
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c2c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c34:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	015a      	lsls	r2, r3, #5
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c42:	461a      	mov	r2, r3
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	371c      	adds	r7, #28
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	1ff80000 	.word	0x1ff80000

08006c5c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7ff f9e3 	bl	8006038 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006c72:	2110      	movs	r1, #16
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f7ff fa1b 	bl	80060b0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7ff fa3e 	bl	80060fc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006c80:	2300      	movs	r3, #0
 8006c82:	613b      	str	r3, [r7, #16]
 8006c84:	e01f      	b.n	8006cc6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	015a      	lsls	r2, r3, #5
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c9c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ca4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cac:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	015a      	lsls	r2, r3, #5
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cba:	461a      	mov	r2, r3
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	613b      	str	r3, [r7, #16]
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	2b0f      	cmp	r3, #15
 8006cca:	d9dc      	bls.n	8006c86 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006ccc:	2300      	movs	r3, #0
 8006cce:	613b      	str	r3, [r7, #16]
 8006cd0:	e034      	b.n	8006d3c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	015a      	lsls	r2, r3, #5
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	4413      	add	r3, r2
 8006cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ce8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cf0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cf8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d06:	461a      	mov	r2, r3
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	617b      	str	r3, [r7, #20]
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d18:	d80c      	bhi.n	8006d34 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	015a      	lsls	r2, r3, #5
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	4413      	add	r3, r2
 8006d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d30:	d0ec      	beq.n	8006d0c <USB_StopHost+0xb0>
 8006d32:	e000      	b.n	8006d36 <USB_StopHost+0xda>
        break;
 8006d34:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	613b      	str	r3, [r7, #16]
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	2b0f      	cmp	r3, #15
 8006d40:	d9c7      	bls.n	8006cd2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d48:	461a      	mov	r2, r3
 8006d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d4e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f04f 32ff 	mov.w	r2, #4294967295
 8006d56:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f7ff f95c 	bl	8006016 <USB_EnableGlobalInt>

  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3718      	adds	r7, #24
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8006d68:	b590      	push	{r4, r7, lr}
 8006d6a:	b089      	sub	sp, #36	; 0x24
 8006d6c:	af04      	add	r7, sp, #16
 8006d6e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8006d70:	2302      	movs	r3, #2
 8006d72:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8006d74:	2301      	movs	r3, #1
 8006d76:	2202      	movs	r2, #2
 8006d78:	2102      	movs	r1, #2
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 fc3a 	bl	80075f4 <USBH_FindInterface>
 8006d80:	4603      	mov	r3, r0
 8006d82:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8006d84:	7bbb      	ldrb	r3, [r7, #14]
 8006d86:	2bff      	cmp	r3, #255	; 0xff
 8006d88:	f000 812a 	beq.w	8006fe0 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8006d8c:	7bbb      	ldrb	r3, [r7, #14]
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fc13 	bl	80075bc <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8006d9c:	2050      	movs	r0, #80	; 0x50
 8006d9e:	f001 fb09 	bl	80083b4 <malloc>
 8006da2:	4603      	mov	r3, r0
 8006da4:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006db0:	7bbb      	ldrb	r3, [r7, #14]
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	211a      	movs	r1, #26
 8006db6:	fb01 f303 	mul.w	r3, r1, r3
 8006dba:	4413      	add	r3, r2
 8006dbc:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	b25b      	sxtb	r3, r3
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	da15      	bge.n	8006df4 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006dc8:	7bbb      	ldrb	r3, [r7, #14]
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	211a      	movs	r1, #26
 8006dce:	fb01 f303 	mul.w	r3, r1, r3
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006dd8:	781a      	ldrb	r2, [r3, #0]
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006dde:	7bbb      	ldrb	r3, [r7, #14]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	211a      	movs	r1, #26
 8006de4:	fb01 f303 	mul.w	r3, r1, r3
 8006de8:	4413      	add	r3, r2
 8006dea:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006dee:	881a      	ldrh	r2, [r3, #0]
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	785b      	ldrb	r3, [r3, #1]
 8006df8:	4619      	mov	r1, r3
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 ff9f 	bl	8007d3e <USBH_AllocPipe>
 8006e00:	4603      	mov	r3, r0
 8006e02:	461a      	mov	r2, r3
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	7819      	ldrb	r1, [r3, #0]
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	7858      	ldrb	r0, [r3, #1]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	8952      	ldrh	r2, [r2, #10]
 8006e20:	9202      	str	r2, [sp, #8]
 8006e22:	2203      	movs	r2, #3
 8006e24:	9201      	str	r2, [sp, #4]
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	4623      	mov	r3, r4
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 ff57 	bl	8007ce0 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	2200      	movs	r2, #0
 8006e38:	4619      	mov	r1, r3
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f001 fa14 	bl	8008268 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8006e40:	2300      	movs	r3, #0
 8006e42:	2200      	movs	r2, #0
 8006e44:	210a      	movs	r1, #10
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fbd4 	bl	80075f4 <USBH_FindInterface>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8006e50:	7bbb      	ldrb	r3, [r7, #14]
 8006e52:	2bff      	cmp	r3, #255	; 0xff
 8006e54:	f000 80c4 	beq.w	8006fe0 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006e58:	7bbb      	ldrb	r3, [r7, #14]
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	211a      	movs	r1, #26
 8006e5e:	fb01 f303 	mul.w	r3, r1, r3
 8006e62:	4413      	add	r3, r2
 8006e64:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	b25b      	sxtb	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	da16      	bge.n	8006e9e <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e70:	7bbb      	ldrb	r3, [r7, #14]
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	211a      	movs	r1, #26
 8006e76:	fb01 f303 	mul.w	r3, r1, r3
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006e80:	781a      	ldrb	r2, [r3, #0]
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006e86:	7bbb      	ldrb	r3, [r7, #14]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	211a      	movs	r1, #26
 8006e8c:	fb01 f303 	mul.w	r3, r1, r3
 8006e90:	4413      	add	r3, r2
 8006e92:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006e96:	881a      	ldrh	r2, [r3, #0]
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	835a      	strh	r2, [r3, #26]
 8006e9c:	e015      	b.n	8006eca <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	211a      	movs	r1, #26
 8006ea4:	fb01 f303 	mul.w	r3, r1, r3
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006eae:	781a      	ldrb	r2, [r3, #0]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006eb4:	7bbb      	ldrb	r3, [r7, #14]
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	211a      	movs	r1, #26
 8006eba:	fb01 f303 	mul.w	r3, r1, r3
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006ec4:	881a      	ldrh	r2, [r3, #0]
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006eca:	7bbb      	ldrb	r3, [r7, #14]
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	211a      	movs	r1, #26
 8006ed0:	fb01 f303 	mul.w	r3, r1, r3
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	b25b      	sxtb	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	da16      	bge.n	8006f10 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006ee2:	7bbb      	ldrb	r3, [r7, #14]
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	211a      	movs	r1, #26
 8006ee8:	fb01 f303 	mul.w	r3, r1, r3
 8006eec:	4413      	add	r3, r2
 8006eee:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006ef2:	781a      	ldrb	r2, [r3, #0]
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006ef8:	7bbb      	ldrb	r3, [r7, #14]
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	211a      	movs	r1, #26
 8006efe:	fb01 f303 	mul.w	r3, r1, r3
 8006f02:	4413      	add	r3, r2
 8006f04:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8006f08:	881a      	ldrh	r2, [r3, #0]
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	835a      	strh	r2, [r3, #26]
 8006f0e:	e015      	b.n	8006f3c <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006f10:	7bbb      	ldrb	r3, [r7, #14]
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	211a      	movs	r1, #26
 8006f16:	fb01 f303 	mul.w	r3, r1, r3
 8006f1a:	4413      	add	r3, r2
 8006f1c:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006f20:	781a      	ldrb	r2, [r3, #0]
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006f26:	7bbb      	ldrb	r3, [r7, #14]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	211a      	movs	r1, #26
 8006f2c:	fb01 f303 	mul.w	r3, r1, r3
 8006f30:	4413      	add	r3, r2
 8006f32:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8006f36:	881a      	ldrh	r2, [r3, #0]
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	7b9b      	ldrb	r3, [r3, #14]
 8006f40:	4619      	mov	r1, r3
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fefb 	bl	8007d3e <USBH_AllocPipe>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	7bdb      	ldrb	r3, [r3, #15]
 8006f54:	4619      	mov	r1, r3
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fef1 	bl	8007d3e <USBH_AllocPipe>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	461a      	mov	r2, r3
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	7b59      	ldrb	r1, [r3, #13]
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	7b98      	ldrb	r0, [r3, #14]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	8b12      	ldrh	r2, [r2, #24]
 8006f7c:	9202      	str	r2, [sp, #8]
 8006f7e:	2202      	movs	r2, #2
 8006f80:	9201      	str	r2, [sp, #4]
 8006f82:	9300      	str	r3, [sp, #0]
 8006f84:	4623      	mov	r3, r4
 8006f86:	4602      	mov	r2, r0
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fea9 	bl	8007ce0 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	7b19      	ldrb	r1, [r3, #12]
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	7bd8      	ldrb	r0, [r3, #15]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006fa2:	68ba      	ldr	r2, [r7, #8]
 8006fa4:	8b52      	ldrh	r2, [r2, #26]
 8006fa6:	9202      	str	r2, [sp, #8]
 8006fa8:	2202      	movs	r2, #2
 8006faa:	9201      	str	r2, [sp, #4]
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	4623      	mov	r3, r4
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 fe94 	bl	8007ce0 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	7b5b      	ldrb	r3, [r3, #13]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f001 f94d 	bl	8008268 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	7b1b      	ldrb	r3, [r3, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f001 f946 	bl	8008268 <USBH_LL_SetToggle>
      status = USBH_OK;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8006fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3714      	adds	r7, #20
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd90      	pop	{r4, r7, pc}

08006fea <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b084      	sub	sp, #16
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006ff8:	69db      	ldr	r3, [r3, #28]
 8006ffa:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00e      	beq.n	8007022 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	4619      	mov	r1, r3
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fe87 	bl	8007d1e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	4619      	mov	r1, r3
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 feaf 	bl	8007d7a <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2200      	movs	r2, #0
 8007020:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	7b1b      	ldrb	r3, [r3, #12]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00e      	beq.n	8007048 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	7b1b      	ldrb	r3, [r3, #12]
 800702e:	4619      	mov	r1, r3
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 fe74 	bl	8007d1e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	7b1b      	ldrb	r3, [r3, #12]
 800703a:	4619      	mov	r1, r3
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 fe9c 	bl	8007d7a <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	7b5b      	ldrb	r3, [r3, #13]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00e      	beq.n	800706e <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	7b5b      	ldrb	r3, [r3, #13]
 8007054:	4619      	mov	r1, r3
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fe61 	bl	8007d1e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	7b5b      	ldrb	r3, [r3, #13]
 8007060:	4619      	mov	r1, r3
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fe89 	bl	8007d7a <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007074:	69db      	ldr	r3, [r3, #28]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00b      	beq.n	8007092 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007080:	69db      	ldr	r3, [r3, #28]
 8007082:	4618      	mov	r0, r3
 8007084:	f001 f99e 	bl	80083c4 <free>
    phost->pActiveClass->pData = 0U;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800708e:	2200      	movs	r2, #0
 8007090:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 80070a4:	2302      	movs	r3, #2
 80070a6:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80070ae:	69db      	ldr	r3, [r3, #28]
 80070b0:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	3340      	adds	r3, #64	; 0x40
 80070b6:	4619      	mov	r1, r3
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f8b2 	bl	8007222 <GetLineCoding>
 80070be:	4603      	mov	r3, r0
 80070c0:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 80070c2:	7bfb      	ldrb	r3, [r7, #15]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d105      	bne.n	80070d4 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80070ce:	2102      	movs	r1, #2
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	4798      	blx	r3
  }
  return status;
 80070d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
	...

080070e0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80070e8:	2301      	movs	r3, #1
 80070ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80070ec:	2300      	movs	r3, #0
 80070ee:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80070f6:	69db      	ldr	r3, [r3, #28]
 80070f8:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007100:	2b04      	cmp	r3, #4
 8007102:	d877      	bhi.n	80071f4 <USBH_CDC_Process+0x114>
 8007104:	a201      	add	r2, pc, #4	; (adr r2, 800710c <USBH_CDC_Process+0x2c>)
 8007106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710a:	bf00      	nop
 800710c:	08007121 	.word	0x08007121
 8007110:	08007127 	.word	0x08007127
 8007114:	08007157 	.word	0x08007157
 8007118:	080071cb 	.word	0x080071cb
 800711c:	080071d9 	.word	0x080071d9
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8007120:	2300      	movs	r3, #0
 8007122:	73fb      	strb	r3, [r7, #15]
    break;
 8007124:	e06d      	b.n	8007202 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800712a:	4619      	mov	r1, r3
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f897 	bl	8007260 <SetLineCoding>
 8007132:	4603      	mov	r3, r0
 8007134:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8007136:	7bbb      	ldrb	r3, [r7, #14]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d104      	bne.n	8007146 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	2202      	movs	r2, #2
 8007140:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8007144:	e058      	b.n	80071f8 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8007146:	7bbb      	ldrb	r3, [r7, #14]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d055      	beq.n	80071f8 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	2204      	movs	r2, #4
 8007150:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8007154:	e050      	b.n	80071f8 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	3340      	adds	r3, #64	; 0x40
 800715a:	4619      	mov	r1, r3
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f860 	bl	8007222 <GetLineCoding>
 8007162:	4603      	mov	r3, r0
 8007164:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8007166:	7bbb      	ldrb	r3, [r7, #14]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d126      	bne.n	80071ba <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800717e:	791b      	ldrb	r3, [r3, #4]
 8007180:	429a      	cmp	r2, r3
 8007182:	d13b      	bne.n	80071fc <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800718e:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007190:	429a      	cmp	r2, r3
 8007192:	d133      	bne.n	80071fc <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800719e:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d12b      	bne.n	80071fc <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ac:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d124      	bne.n	80071fc <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f95a 	bl	800746c <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80071b8:	e020      	b.n	80071fc <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 80071ba:	7bbb      	ldrb	r3, [r7, #14]
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d01d      	beq.n	80071fc <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	2204      	movs	r2, #4
 80071c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80071c8:	e018      	b.n	80071fc <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f867 	bl	800729e <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f8dc 	bl	800738e <CDC_ProcessReception>
    break;
 80071d6:	e014      	b.n	8007202 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 80071d8:	2100      	movs	r1, #0
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 fb08 	bl	80077f0 <USBH_ClrFeature>
 80071e0:	4603      	mov	r3, r0
 80071e2:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 80071e4:	7bbb      	ldrb	r3, [r7, #14]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10a      	bne.n	8007200 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 80071f2:	e005      	b.n	8007200 <USBH_CDC_Process+0x120>

  default:
    break;
 80071f4:	bf00      	nop
 80071f6:	e004      	b.n	8007202 <USBH_CDC_Process+0x122>
    break;
 80071f8:	bf00      	nop
 80071fa:	e002      	b.n	8007202 <USBH_CDC_Process+0x122>
    break;
 80071fc:	bf00      	nop
 80071fe:	e000      	b.n	8007202 <USBH_CDC_Process+0x122>
    break;
 8007200:	bf00      	nop

  }

  return status;
 8007202:	7bfb      	ldrb	r3, [r7, #15]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	370c      	adds	r7, #12
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr

08007222 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b082      	sub	sp, #8
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	22a1      	movs	r2, #161	; 0xa1
 8007230:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2221      	movs	r2, #33	; 0x21
 8007236:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2207      	movs	r2, #7
 8007248:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	2207      	movs	r2, #7
 800724e:	4619      	mov	r1, r3
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 faf1 	bl	8007838 <USBH_CtlReq>
 8007256:	4603      	mov	r3, r0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2221      	movs	r2, #33	; 0x21
 800726e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2220      	movs	r2, #32
 8007274:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2207      	movs	r2, #7
 8007286:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	2207      	movs	r2, #7
 800728c:	4619      	mov	r1, r3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fad2 	bl	8007838 <USBH_CtlReq>
 8007294:	4603      	mov	r3, r0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b086      	sub	sp, #24
 80072a2:	af02      	add	r7, sp, #8
 80072a4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80072ac:	69db      	ldr	r3, [r3, #28]
 80072ae:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80072b0:	2300      	movs	r3, #0
 80072b2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d002      	beq.n	80072c4 <CDC_ProcessTransmission+0x26>
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d025      	beq.n	800730e <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 80072c2:	e060      	b.n	8007386 <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	8b12      	ldrh	r2, [r2, #24]
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d90c      	bls.n	80072ea <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	69d9      	ldr	r1, [r3, #28]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	8b1a      	ldrh	r2, [r3, #24]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	7b58      	ldrb	r0, [r3, #13]
 80072dc:	2301      	movs	r3, #1
 80072de:	9300      	str	r3, [sp, #0]
 80072e0:	4603      	mov	r3, r0
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fcb9 	bl	8007c5a <USBH_BulkSendData>
 80072e8:	e00c      	b.n	8007304 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	7b58      	ldrb	r0, [r3, #13]
 80072f8:	2301      	movs	r3, #1
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	4603      	mov	r3, r0
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fcab 	bl	8007c5a <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2202      	movs	r2, #2
 8007308:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800730c:	e03b      	b.n	8007386 <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	7b5b      	ldrb	r3, [r3, #13]
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 ff7d 	bl	8008214 <USBH_LL_GetURBState>
 800731a:	4603      	mov	r3, r0
 800731c:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 800731e:	7afb      	ldrb	r3, [r7, #11]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d128      	bne.n	8007376 <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	8b12      	ldrh	r2, [r2, #24]
 800732c:	4293      	cmp	r3, r2
 800732e:	d90e      	bls.n	800734e <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	8b12      	ldrh	r2, [r2, #24]
 8007338:	1a9a      	subs	r2, r3, r2
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	8b12      	ldrh	r2, [r2, #24]
 8007346:	441a      	add	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	61da      	str	r2, [r3, #28]
 800734c:	e002      	b.n	8007354 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007358:	2b00      	cmp	r3, #0
 800735a:	d004      	beq.n	8007366 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8007364:	e00e      	b.n	8007384 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f868 	bl	8007444 <USBH_CDC_TransmitCallback>
    break;
 8007374:	e006      	b.n	8007384 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8007376:	7afb      	ldrb	r3, [r7, #11]
 8007378:	2b02      	cmp	r3, #2
 800737a:	d103      	bne.n	8007384 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8007384:	bf00      	nop
  }
}
 8007386:	bf00      	nop
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b086      	sub	sp, #24
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80073a0:	2300      	movs	r3, #0
 80073a2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80073aa:	2b03      	cmp	r3, #3
 80073ac:	d002      	beq.n	80073b4 <CDC_ProcessReception+0x26>
 80073ae:	2b04      	cmp	r3, #4
 80073b0:	d00e      	beq.n	80073d0 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 80073b2:	e043      	b.n	800743c <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	6a19      	ldr	r1, [r3, #32]
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	8b5a      	ldrh	r2, [r3, #26]
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	7b1b      	ldrb	r3, [r3, #12]
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 fc6f 	bl	8007ca4 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	2204      	movs	r2, #4
 80073ca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 80073ce:	e035      	b.n	800743c <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	7b1b      	ldrb	r3, [r3, #12]
 80073d4:	4619      	mov	r1, r3
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 ff1c 	bl	8008214 <USBH_LL_GetURBState>
 80073dc:	4603      	mov	r3, r0
 80073de:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 80073e0:	7cfb      	ldrb	r3, [r7, #19]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d129      	bne.n	800743a <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	7b1b      	ldrb	r3, [r3, #12]
 80073ea:	4619      	mov	r1, r3
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 fe7f 	bl	80080f0 <USBH_LL_GetLastXferSize>
 80073f2:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d016      	beq.n	800742c <CDC_ProcessReception+0x9e>
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	8b5b      	ldrh	r3, [r3, #26]
 8007402:	461a      	mov	r2, r3
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	4293      	cmp	r3, r2
 8007408:	d910      	bls.n	800742c <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	1ad2      	subs	r2, r2, r3
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	6a1a      	ldr	r2, [r3, #32]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	441a      	add	r2, r3
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	2203      	movs	r2, #3
 8007426:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800742a:	e006      	b.n	800743a <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	2200      	movs	r2, #0
 8007430:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f80f 	bl	8007458 <USBH_CDC_ReceiveCallback>
    break;
 800743a:	bf00      	nop
  }
}
 800743c:	bf00      	nop
 800743e:	3718      	adds	r7, #24
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]

}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]

}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]

}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	4613      	mov	r3, r2
 800748c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d101      	bne.n	8007498 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007494:	2302      	movs	r3, #2
 8007496:	e019      	b.n	80074cc <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	79fa      	ldrb	r2, [r7, #7]
 800749c:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f000 f80f 	bl	80074d4 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d003      	beq.n	80074c4 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f000 fda1 	bl	800800c <USBH_LL_Init>

  return USBH_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80074dc:	2300      	movs	r3, #0
 80074de:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80074e0:	e008      	b.n	80074f4 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	32e0      	adds	r2, #224	; 0xe0
 80074e8:	2100      	movs	r1, #0
 80074ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	3301      	adds	r3, #1
 80074f2:	60fb      	str	r3, [r7, #12]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2b0e      	cmp	r3, #14
 80074f8:	d9f3      	bls.n	80074e2 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80074fa:	2300      	movs	r3, #0
 80074fc:	60fb      	str	r3, [r7, #12]
 80074fe:	e009      	b.n	8007514 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	4413      	add	r3, r2
 8007506:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800750a:	2200      	movs	r2, #0
 800750c:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	3301      	adds	r3, #1
 8007512:	60fb      	str	r3, [r7, #12]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800751a:	d3f1      	bcc.n	8007500 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2240      	movs	r2, #64	; 0x40
 8007540:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3714      	adds	r7, #20
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr

08007566 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007566:	b480      	push	{r7}
 8007568:	b085      	sub	sp, #20
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
 800756e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8007570:	2300      	movs	r3, #0
 8007572:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d017      	beq.n	80075aa <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10f      	bne.n	80075a4 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800758a:	1c59      	adds	r1, r3, #1
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	33dc      	adds	r3, #220	; 0xdc
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	4413      	add	r3, r2
 800759a:	683a      	ldr	r2, [r7, #0]
 800759c:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	73fb      	strb	r3, [r7, #15]
 80075a2:	e004      	b.n	80075ae <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80075a4:	2302      	movs	r3, #2
 80075a6:	73fb      	strb	r3, [r7, #15]
 80075a8:	e001      	b.n	80075ae <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80075aa:	2302      	movs	r3, #2
 80075ac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3714      	adds	r7, #20
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	460b      	mov	r3, r1
 80075c6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 80075c8:	2300      	movs	r3, #0
 80075ca:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 80075d2:	78fa      	ldrb	r2, [r7, #3]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d204      	bcs.n	80075e2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	78fa      	ldrb	r2, [r7, #3]
 80075dc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 80075e0:	e001      	b.n	80075e6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 80075e2:	2302      	movs	r3, #2
 80075e4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80075e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3714      	adds	r7, #20
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b087      	sub	sp, #28
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	4608      	mov	r0, r1
 80075fe:	4611      	mov	r1, r2
 8007600:	461a      	mov	r2, r3
 8007602:	4603      	mov	r3, r0
 8007604:	70fb      	strb	r3, [r7, #3]
 8007606:	460b      	mov	r3, r1
 8007608:	70bb      	strb	r3, [r7, #2]
 800760a:	4613      	mov	r3, r2
 800760c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 800760e:	2300      	movs	r3, #0
 8007610:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007612:	2300      	movs	r3, #0
 8007614:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800761c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800761e:	e025      	b.n	800766c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007620:	7dfb      	ldrb	r3, [r7, #23]
 8007622:	221a      	movs	r2, #26
 8007624:	fb02 f303 	mul.w	r3, r2, r3
 8007628:	3308      	adds	r3, #8
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	4413      	add	r3, r2
 800762e:	3302      	adds	r3, #2
 8007630:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	795b      	ldrb	r3, [r3, #5]
 8007636:	78fa      	ldrb	r2, [r7, #3]
 8007638:	429a      	cmp	r2, r3
 800763a:	d002      	beq.n	8007642 <USBH_FindInterface+0x4e>
 800763c:	78fb      	ldrb	r3, [r7, #3]
 800763e:	2bff      	cmp	r3, #255	; 0xff
 8007640:	d111      	bne.n	8007666 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8007646:	78ba      	ldrb	r2, [r7, #2]
 8007648:	429a      	cmp	r2, r3
 800764a:	d002      	beq.n	8007652 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800764c:	78bb      	ldrb	r3, [r7, #2]
 800764e:	2bff      	cmp	r3, #255	; 0xff
 8007650:	d109      	bne.n	8007666 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8007656:	787a      	ldrb	r2, [r7, #1]
 8007658:	429a      	cmp	r2, r3
 800765a:	d002      	beq.n	8007662 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800765c:	787b      	ldrb	r3, [r7, #1]
 800765e:	2bff      	cmp	r3, #255	; 0xff
 8007660:	d101      	bne.n	8007666 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007662:	7dfb      	ldrb	r3, [r7, #23]
 8007664:	e006      	b.n	8007674 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007666:	7dfb      	ldrb	r3, [r7, #23]
 8007668:	3301      	adds	r3, #1
 800766a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800766c:	7dfb      	ldrb	r3, [r7, #23]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d9d6      	bls.n	8007620 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007672:	23ff      	movs	r3, #255	; 0xff
}
 8007674:	4618      	mov	r0, r3
 8007676:	371c      	adds	r7, #28
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 fcfb 	bl	8008084 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800768e:	2101      	movs	r1, #1
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fdd2 	bl	800823a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	683a      	ldr	r2, [r7, #0]
 80076ae:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 80076b2:	bf00      	nop
 80076b4:	370c      	adds	r7, #12
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr

080076be <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b082      	sub	sp, #8
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80076cc:	1c5a      	adds	r2, r3, #1
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 f804 	bl	80076e2 <USBH_HandleSof>
}
 80076da:	bf00      	nop
 80076dc:	3708      	adds	r7, #8
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b082      	sub	sp, #8
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b0b      	cmp	r3, #11
 80076f2:	d10a      	bne.n	800770a <USBH_HandleSof+0x28>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d005      	beq.n	800770a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	4798      	blx	r3
  }
}
 800770a:	bf00      	nop
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8007712:	b480      	push	{r7}
 8007714:	b083      	sub	sp, #12
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007722:	bf00      	nop
}
 8007724:	370c      	adds	r7, #12
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr

0800772e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800772e:	b480      	push	{r7}
 8007730:	b083      	sub	sp, #12
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800773e:	bf00      	nop
}
 8007740:	370c      	adds	r7, #12
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b082      	sub	sp, #8
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	b2db      	uxtb	r3, r3
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10f      	bne.n	800777c <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00e      	beq.n	800778c <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007774:	2104      	movs	r1, #4
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	4798      	blx	r3
 800777a:	e007      	b.n	800778c <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007782:	2b01      	cmp	r3, #1
 8007784:	d102      	bne.n	800778c <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2202      	movs	r2, #2
 800778a:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3708      	adds	r7, #8
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b082      	sub	sp, #8
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fc8b 	bl	80080ba <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	791b      	ldrb	r3, [r3, #4]
 80077a8:	4619      	mov	r1, r3
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 fae5 	bl	8007d7a <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	795b      	ldrb	r3, [r3, #5]
 80077b4:	4619      	mov	r1, r3
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 fadf 	bl	8007d7a <USBH_FreePipe>

  phost->device.is_connected = 0U;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d005      	beq.n	80077da <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80077d4:	2105      	movs	r1, #5
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 fc52 	bl	8008084 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2203      	movs	r2, #3
 80077e4:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3708      	adds	r7, #8
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	460b      	mov	r3, r1
 80077fa:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	789b      	ldrb	r3, [r3, #2]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d10f      	bne.n	8007824 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2202      	movs	r2, #2
 8007808:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2201      	movs	r2, #1
 800780e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007816:	78fb      	ldrb	r3, [r7, #3]
 8007818:	b29a      	uxth	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8007824:	2200      	movs	r2, #0
 8007826:	2100      	movs	r1, #0
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f805 	bl	8007838 <USBH_CtlReq>
 800782e:	4603      	mov	r3, r0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b086      	sub	sp, #24
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	4613      	mov	r3, r2
 8007844:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007846:	2301      	movs	r3, #1
 8007848:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	789b      	ldrb	r3, [r3, #2]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d002      	beq.n	8007858 <USBH_CtlReq+0x20>
 8007852:	2b02      	cmp	r3, #2
 8007854:	d00f      	beq.n	8007876 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8007856:	e034      	b.n	80078c2 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	88fa      	ldrh	r2, [r7, #6]
 8007862:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2201      	movs	r2, #1
 8007868:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2202      	movs	r2, #2
 800786e:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8007870:	2301      	movs	r3, #1
 8007872:	75fb      	strb	r3, [r7, #23]
    break;
 8007874:	e025      	b.n	80078c2 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f000 f828 	bl	80078cc <USBH_HandleControl>
 800787c:	4603      	mov	r3, r0
 800787e:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8007880:	7dfb      	ldrb	r3, [r7, #23]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d108      	bne.n	8007898 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2201      	movs	r2, #1
 800788a:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	75fb      	strb	r3, [r7, #23]
    break;
 8007896:	e013      	b.n	80078c0 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8007898:	7dfb      	ldrb	r3, [r7, #23]
 800789a:	2b03      	cmp	r3, #3
 800789c:	d108      	bne.n	80078b0 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2201      	movs	r2, #1
 80078a2:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80078aa:	2303      	movs	r3, #3
 80078ac:	75fb      	strb	r3, [r7, #23]
    break;
 80078ae:	e007      	b.n	80078c0 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 80078b0:	7dfb      	ldrb	r3, [r7, #23]
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d104      	bne.n	80078c0 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2201      	movs	r2, #1
 80078ba:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 80078bc:	2302      	movs	r3, #2
 80078be:	75fb      	strb	r3, [r7, #23]
    break;
 80078c0:	bf00      	nop
  }
  return status;
 80078c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3718      	adds	r7, #24
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b086      	sub	sp, #24
 80078d0:	af02      	add	r7, sp, #8
 80078d2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80078d4:	2301      	movs	r3, #1
 80078d6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80078d8:	2300      	movs	r3, #0
 80078da:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	7e1b      	ldrb	r3, [r3, #24]
 80078e0:	3b01      	subs	r3, #1
 80078e2:	2b0a      	cmp	r3, #10
 80078e4:	f200 814c 	bhi.w	8007b80 <USBH_HandleControl+0x2b4>
 80078e8:	a201      	add	r2, pc, #4	; (adr r2, 80078f0 <USBH_HandleControl+0x24>)
 80078ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ee:	bf00      	nop
 80078f0:	0800791d 	.word	0x0800791d
 80078f4:	08007937 	.word	0x08007937
 80078f8:	080079a1 	.word	0x080079a1
 80078fc:	080079c7 	.word	0x080079c7
 8007900:	080079ff 	.word	0x080079ff
 8007904:	08007a2b 	.word	0x08007a2b
 8007908:	08007a7d 	.word	0x08007a7d
 800790c:	08007a9f 	.word	0x08007a9f
 8007910:	08007adb 	.word	0x08007adb
 8007914:	08007b03 	.word	0x08007b03
 8007918:	08007b41 	.word	0x08007b41
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f103 0110 	add.w	r1, r3, #16
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	795b      	ldrb	r3, [r3, #5]
 8007926:	461a      	mov	r2, r3
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f939 	bl	8007ba0 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2202      	movs	r2, #2
 8007932:	761a      	strb	r2, [r3, #24]
    break;
 8007934:	e12f      	b.n	8007b96 <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	795b      	ldrb	r3, [r3, #5]
 800793a:	4619      	mov	r1, r3
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fc69 	bl	8008214 <USBH_LL_GetURBState>
 8007942:	4603      	mov	r3, r0
 8007944:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8007946:	7bbb      	ldrb	r3, [r7, #14]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d11e      	bne.n	800798a <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	7c1b      	ldrb	r3, [r3, #16]
 8007950:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007954:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	8adb      	ldrh	r3, [r3, #22]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00a      	beq.n	8007974 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800795e:	7b7b      	ldrb	r3, [r7, #13]
 8007960:	2b80      	cmp	r3, #128	; 0x80
 8007962:	d103      	bne.n	800796c <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2203      	movs	r2, #3
 8007968:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800796a:	e10b      	b.n	8007b84 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2205      	movs	r2, #5
 8007970:	761a      	strb	r2, [r3, #24]
    break;
 8007972:	e107      	b.n	8007b84 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8007974:	7b7b      	ldrb	r3, [r7, #13]
 8007976:	2b80      	cmp	r3, #128	; 0x80
 8007978:	d103      	bne.n	8007982 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2209      	movs	r2, #9
 800797e:	761a      	strb	r2, [r3, #24]
    break;
 8007980:	e100      	b.n	8007b84 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2207      	movs	r2, #7
 8007986:	761a      	strb	r2, [r3, #24]
    break;
 8007988:	e0fc      	b.n	8007b84 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800798a:	7bbb      	ldrb	r3, [r7, #14]
 800798c:	2b04      	cmp	r3, #4
 800798e:	d003      	beq.n	8007998 <USBH_HandleControl+0xcc>
 8007990:	7bbb      	ldrb	r3, [r7, #14]
 8007992:	2b02      	cmp	r3, #2
 8007994:	f040 80f6 	bne.w	8007b84 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	220b      	movs	r2, #11
 800799c:	761a      	strb	r2, [r3, #24]
    break;
 800799e:	e0f1      	b.n	8007b84 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6899      	ldr	r1, [r3, #8]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	899a      	ldrh	r2, [r3, #12]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	791b      	ldrb	r3, [r3, #4]
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 f930 	bl	8007c1e <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2204      	movs	r2, #4
 80079c2:	761a      	strb	r2, [r3, #24]
    break;
 80079c4:	e0e7      	b.n	8007b96 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	791b      	ldrb	r3, [r3, #4]
 80079ca:	4619      	mov	r1, r3
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 fc21 	bl	8008214 <USBH_LL_GetURBState>
 80079d2:	4603      	mov	r3, r0
 80079d4:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 80079d6:	7bbb      	ldrb	r3, [r7, #14]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d102      	bne.n	80079e2 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2209      	movs	r2, #9
 80079e0:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 80079e2:	7bbb      	ldrb	r3, [r7, #14]
 80079e4:	2b05      	cmp	r3, #5
 80079e6:	d102      	bne.n	80079ee <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 80079e8:	2303      	movs	r3, #3
 80079ea:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80079ec:	e0cc      	b.n	8007b88 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 80079ee:	7bbb      	ldrb	r3, [r7, #14]
 80079f0:	2b04      	cmp	r3, #4
 80079f2:	f040 80c9 	bne.w	8007b88 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	220b      	movs	r2, #11
 80079fa:	761a      	strb	r2, [r3, #24]
    break;
 80079fc:	e0c4      	b.n	8007b88 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6899      	ldr	r1, [r3, #8]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	899a      	ldrh	r2, [r3, #12]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	7958      	ldrb	r0, [r3, #5]
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	9300      	str	r3, [sp, #0]
 8007a0e:	4603      	mov	r3, r0
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f8df 	bl	8007bd4 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2206      	movs	r2, #6
 8007a26:	761a      	strb	r2, [r3, #24]
    break;
 8007a28:	e0b5      	b.n	8007b96 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	795b      	ldrb	r3, [r3, #5]
 8007a2e:	4619      	mov	r1, r3
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fbef 	bl	8008214 <USBH_LL_GetURBState>
 8007a36:	4603      	mov	r3, r0
 8007a38:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8007a3a:	7bbb      	ldrb	r3, [r7, #14]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d103      	bne.n	8007a48 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2207      	movs	r2, #7
 8007a44:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007a46:	e0a1      	b.n	8007b8c <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
 8007a4a:	2b05      	cmp	r3, #5
 8007a4c:	d105      	bne.n	8007a5a <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	220c      	movs	r2, #12
 8007a52:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007a54:	2303      	movs	r3, #3
 8007a56:	73fb      	strb	r3, [r7, #15]
    break;
 8007a58:	e098      	b.n	8007b8c <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007a5a:	7bbb      	ldrb	r3, [r7, #14]
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d103      	bne.n	8007a68 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2205      	movs	r2, #5
 8007a64:	761a      	strb	r2, [r3, #24]
    break;
 8007a66:	e091      	b.n	8007b8c <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8007a68:	7bbb      	ldrb	r3, [r7, #14]
 8007a6a:	2b04      	cmp	r3, #4
 8007a6c:	f040 808e 	bne.w	8007b8c <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	220b      	movs	r2, #11
 8007a74:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8007a76:	2302      	movs	r3, #2
 8007a78:	73fb      	strb	r3, [r7, #15]
    break;
 8007a7a:	e087      	b.n	8007b8c <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	791b      	ldrb	r3, [r3, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	2100      	movs	r1, #0
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f8ca 	bl	8007c1e <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2208      	movs	r2, #8
 8007a9a:	761a      	strb	r2, [r3, #24]

    break;
 8007a9c:	e07b      	b.n	8007b96 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	791b      	ldrb	r3, [r3, #4]
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 fbb5 	bl	8008214 <USBH_LL_GetURBState>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8007aae:	7bbb      	ldrb	r3, [r7, #14]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d105      	bne.n	8007ac0 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	220d      	movs	r2, #13
 8007ab8:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007aba:	2300      	movs	r3, #0
 8007abc:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007abe:	e067      	b.n	8007b90 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8007ac0:	7bbb      	ldrb	r3, [r7, #14]
 8007ac2:	2b04      	cmp	r3, #4
 8007ac4:	d103      	bne.n	8007ace <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	220b      	movs	r2, #11
 8007aca:	761a      	strb	r2, [r3, #24]
    break;
 8007acc:	e060      	b.n	8007b90 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8007ace:	7bbb      	ldrb	r3, [r7, #14]
 8007ad0:	2b05      	cmp	r3, #5
 8007ad2:	d15d      	bne.n	8007b90 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ad8:	e05a      	b.n	8007b90 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	795a      	ldrb	r2, [r3, #5]
 8007ade:	2301      	movs	r3, #1
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f873 	bl	8007bd4 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	220a      	movs	r2, #10
 8007afe:	761a      	strb	r2, [r3, #24]
    break;
 8007b00:	e049      	b.n	8007b96 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	795b      	ldrb	r3, [r3, #5]
 8007b06:	4619      	mov	r1, r3
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 fb83 	bl	8008214 <USBH_LL_GetURBState>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8007b12:	7bbb      	ldrb	r3, [r7, #14]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d105      	bne.n	8007b24 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	220d      	movs	r2, #13
 8007b20:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8007b22:	e037      	b.n	8007b94 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d103      	bne.n	8007b32 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2209      	movs	r2, #9
 8007b2e:	761a      	strb	r2, [r3, #24]
    break;
 8007b30:	e030      	b.n	8007b94 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8007b32:	7bbb      	ldrb	r3, [r7, #14]
 8007b34:	2b04      	cmp	r3, #4
 8007b36:	d12d      	bne.n	8007b94 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	220b      	movs	r2, #11
 8007b3c:	761a      	strb	r2, [r3, #24]
    break;
 8007b3e:	e029      	b.n	8007b94 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	7e5b      	ldrb	r3, [r3, #25]
 8007b44:	3301      	adds	r3, #1
 8007b46:	b2da      	uxtb	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	765a      	strb	r2, [r3, #25]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	7e5b      	ldrb	r3, [r3, #25]
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d809      	bhi.n	8007b68 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 fab0 	bl	80080ba <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8007b66:	e016      	b.n	8007b96 <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007b6e:	2106      	movs	r1, #6
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8007b7a:	2302      	movs	r3, #2
 8007b7c:	73fb      	strb	r3, [r7, #15]
    break;
 8007b7e:	e00a      	b.n	8007b96 <USBH_HandleControl+0x2ca>

  default:
    break;
 8007b80:	bf00      	nop
 8007b82:	e008      	b.n	8007b96 <USBH_HandleControl+0x2ca>
    break;
 8007b84:	bf00      	nop
 8007b86:	e006      	b.n	8007b96 <USBH_HandleControl+0x2ca>
    break;
 8007b88:	bf00      	nop
 8007b8a:	e004      	b.n	8007b96 <USBH_HandleControl+0x2ca>
    break;
 8007b8c:	bf00      	nop
 8007b8e:	e002      	b.n	8007b96 <USBH_HandleControl+0x2ca>
    break;
 8007b90:	bf00      	nop
 8007b92:	e000      	b.n	8007b96 <USBH_HandleControl+0x2ca>
    break;
 8007b94:	bf00      	nop
  }
  return status;
 8007b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b088      	sub	sp, #32
 8007ba4:	af04      	add	r7, sp, #16
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	4613      	mov	r3, r2
 8007bac:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007bae:	79f9      	ldrb	r1, [r7, #7]
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	9303      	str	r3, [sp, #12]
 8007bb4:	2308      	movs	r3, #8
 8007bb6:	9302      	str	r3, [sp, #8]
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	9301      	str	r3, [sp, #4]
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f000 faf4 	bl	80081b2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b088      	sub	sp, #32
 8007bd8:	af04      	add	r7, sp, #16
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	4611      	mov	r1, r2
 8007be0:	461a      	mov	r2, r3
 8007be2:	460b      	mov	r3, r1
 8007be4:	80fb      	strh	r3, [r7, #6]
 8007be6:	4613      	mov	r3, r2
 8007be8:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d001      	beq.n	8007bf8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007bf8:	7979      	ldrb	r1, [r7, #5]
 8007bfa:	7e3b      	ldrb	r3, [r7, #24]
 8007bfc:	9303      	str	r3, [sp, #12]
 8007bfe:	88fb      	ldrh	r3, [r7, #6]
 8007c00:	9302      	str	r3, [sp, #8]
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	9301      	str	r3, [sp, #4]
 8007c06:	2301      	movs	r3, #1
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f000 facf 	bl	80081b2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b088      	sub	sp, #32
 8007c22:	af04      	add	r7, sp, #16
 8007c24:	60f8      	str	r0, [r7, #12]
 8007c26:	60b9      	str	r1, [r7, #8]
 8007c28:	4611      	mov	r1, r2
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	80fb      	strh	r3, [r7, #6]
 8007c30:	4613      	mov	r3, r2
 8007c32:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007c34:	7979      	ldrb	r1, [r7, #5]
 8007c36:	2300      	movs	r3, #0
 8007c38:	9303      	str	r3, [sp, #12]
 8007c3a:	88fb      	ldrh	r3, [r7, #6]
 8007c3c:	9302      	str	r3, [sp, #8]
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	9301      	str	r3, [sp, #4]
 8007c42:	2301      	movs	r3, #1
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	2300      	movs	r3, #0
 8007c48:	2201      	movs	r2, #1
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f000 fab1 	bl	80081b2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007c50:	2300      	movs	r3, #0

}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b088      	sub	sp, #32
 8007c5e:	af04      	add	r7, sp, #16
 8007c60:	60f8      	str	r0, [r7, #12]
 8007c62:	60b9      	str	r1, [r7, #8]
 8007c64:	4611      	mov	r1, r2
 8007c66:	461a      	mov	r2, r3
 8007c68:	460b      	mov	r3, r1
 8007c6a:	80fb      	strh	r3, [r7, #6]
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d001      	beq.n	8007c7e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007c7e:	7979      	ldrb	r1, [r7, #5]
 8007c80:	7e3b      	ldrb	r3, [r7, #24]
 8007c82:	9303      	str	r3, [sp, #12]
 8007c84:	88fb      	ldrh	r3, [r7, #6]
 8007c86:	9302      	str	r3, [sp, #8]
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	9301      	str	r3, [sp, #4]
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	2302      	movs	r3, #2
 8007c92:	2200      	movs	r2, #0
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f000 fa8c 	bl	80081b2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3710      	adds	r7, #16
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b088      	sub	sp, #32
 8007ca8:	af04      	add	r7, sp, #16
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	4611      	mov	r1, r2
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	80fb      	strh	r3, [r7, #6]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007cba:	7979      	ldrb	r1, [r7, #5]
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	9303      	str	r3, [sp, #12]
 8007cc0:	88fb      	ldrh	r3, [r7, #6]
 8007cc2:	9302      	str	r3, [sp, #8]
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	9301      	str	r3, [sp, #4]
 8007cc8:	2301      	movs	r3, #1
 8007cca:	9300      	str	r3, [sp, #0]
 8007ccc:	2302      	movs	r3, #2
 8007cce:	2201      	movs	r2, #1
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f000 fa6e 	bl	80081b2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3710      	adds	r7, #16
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af04      	add	r7, sp, #16
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	4608      	mov	r0, r1
 8007cea:	4611      	mov	r1, r2
 8007cec:	461a      	mov	r2, r3
 8007cee:	4603      	mov	r3, r0
 8007cf0:	70fb      	strb	r3, [r7, #3]
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	70bb      	strb	r3, [r7, #2]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8007cfa:	7878      	ldrb	r0, [r7, #1]
 8007cfc:	78ba      	ldrb	r2, [r7, #2]
 8007cfe:	78f9      	ldrb	r1, [r7, #3]
 8007d00:	8b3b      	ldrh	r3, [r7, #24]
 8007d02:	9302      	str	r3, [sp, #8]
 8007d04:	7d3b      	ldrb	r3, [r7, #20]
 8007d06:	9301      	str	r3, [sp, #4]
 8007d08:	7c3b      	ldrb	r3, [r7, #16]
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fa01 	bl	8008116 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8007d14:	2300      	movs	r3, #0

}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3708      	adds	r7, #8
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b082      	sub	sp, #8
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
 8007d26:	460b      	mov	r3, r1
 8007d28:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8007d2a:	78fb      	ldrb	r3, [r7, #3]
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fa20 	bl	8008174 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007d34:	2300      	movs	r3, #0

}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3708      	adds	r7, #8
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b084      	sub	sp, #16
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
 8007d46:	460b      	mov	r3, r1
 8007d48:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f831 	bl	8007db2 <USBH_GetFreePipe>
 8007d50:	4603      	mov	r3, r0
 8007d52:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007d54:	89fb      	ldrh	r3, [r7, #14]
 8007d56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d007      	beq.n	8007d6e <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8007d5e:	78fb      	ldrb	r3, [r7, #3]
 8007d60:	89fa      	ldrh	r2, [r7, #14]
 8007d62:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	32e0      	adds	r2, #224	; 0xe0
 8007d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8007d6e:	89fb      	ldrh	r3, [r7, #14]
 8007d70:	b2db      	uxtb	r3, r3
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b083      	sub	sp, #12
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
 8007d82:	460b      	mov	r3, r1
 8007d84:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8007d86:	78fb      	ldrb	r3, [r7, #3]
 8007d88:	2b0a      	cmp	r3, #10
 8007d8a:	d80b      	bhi.n	8007da4 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8007d8c:	78fa      	ldrb	r2, [r7, #3]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	32e0      	adds	r2, #224	; 0xe0
 8007d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d96:	78fa      	ldrb	r2, [r7, #3]
 8007d98:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	32e0      	adds	r2, #224	; 0xe0
 8007da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b085      	sub	sp, #20
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	73fb      	strb	r3, [r7, #15]
 8007dc2:	e00e      	b.n	8007de2 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007dc4:	7bfa      	ldrb	r2, [r7, #15]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	32e0      	adds	r2, #224	; 0xe0
 8007dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d102      	bne.n	8007ddc <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8007dd6:	7bfb      	ldrb	r3, [r7, #15]
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	e007      	b.n	8007dec <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8007ddc:	7bfb      	ldrb	r3, [r7, #15]
 8007dde:	3301      	adds	r3, #1
 8007de0:	73fb      	strb	r3, [r7, #15]
 8007de2:	7bfb      	ldrb	r3, [r7, #15]
 8007de4:	2b0a      	cmp	r3, #10
 8007de6:	d9ed      	bls.n	8007dc4 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8007de8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3714      	adds	r7, #20
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	490e      	ldr	r1, [pc, #56]	; (8007e38 <MX_USB_HOST_Init+0x40>)
 8007e00:	480e      	ldr	r0, [pc, #56]	; (8007e3c <MX_USB_HOST_Init+0x44>)
 8007e02:	f7ff fb3d 	bl	8007480 <USBH_Init>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d001      	beq.n	8007e10 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007e0c:	f7f8 ffca 	bl	8000da4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007e10:	490b      	ldr	r1, [pc, #44]	; (8007e40 <MX_USB_HOST_Init+0x48>)
 8007e12:	480a      	ldr	r0, [pc, #40]	; (8007e3c <MX_USB_HOST_Init+0x44>)
 8007e14:	f7ff fba7 	bl	8007566 <USBH_RegisterClass>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d001      	beq.n	8007e22 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007e1e:	f7f8 ffc1 	bl	8000da4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007e22:	4806      	ldr	r0, [pc, #24]	; (8007e3c <MX_USB_HOST_Init+0x44>)
 8007e24:	f7ff fc2c 	bl	8007680 <USBH_Start>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d001      	beq.n	8007e32 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007e2e:	f7f8 ffb9 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007e32:	bf00      	nop
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	08007e45 	.word	0x08007e45
 8007e3c:	200004a0 	.word	0x200004a0
 8007e40:	2000000c 	.word	0x2000000c

08007e44 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007e50:	78fb      	ldrb	r3, [r7, #3]
 8007e52:	3b01      	subs	r3, #1
 8007e54:	2b04      	cmp	r3, #4
 8007e56:	d819      	bhi.n	8007e8c <USBH_UserProcess+0x48>
 8007e58:	a201      	add	r2, pc, #4	; (adr r2, 8007e60 <USBH_UserProcess+0x1c>)
 8007e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e5e:	bf00      	nop
 8007e60:	08007e8d 	.word	0x08007e8d
 8007e64:	08007e7d 	.word	0x08007e7d
 8007e68:	08007e8d 	.word	0x08007e8d
 8007e6c:	08007e85 	.word	0x08007e85
 8007e70:	08007e75 	.word	0x08007e75
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007e74:	4b09      	ldr	r3, [pc, #36]	; (8007e9c <USBH_UserProcess+0x58>)
 8007e76:	2203      	movs	r2, #3
 8007e78:	701a      	strb	r2, [r3, #0]
  break;
 8007e7a:	e008      	b.n	8007e8e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007e7c:	4b07      	ldr	r3, [pc, #28]	; (8007e9c <USBH_UserProcess+0x58>)
 8007e7e:	2202      	movs	r2, #2
 8007e80:	701a      	strb	r2, [r3, #0]
  break;
 8007e82:	e004      	b.n	8007e8e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007e84:	4b05      	ldr	r3, [pc, #20]	; (8007e9c <USBH_UserProcess+0x58>)
 8007e86:	2201      	movs	r2, #1
 8007e88:	701a      	strb	r2, [r3, #0]
  break;
 8007e8a:	e000      	b.n	8007e8e <USBH_UserProcess+0x4a>

  default:
  break;
 8007e8c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007e8e:	bf00      	nop
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	200000bc 	.word	0x200000bc

08007ea0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b08a      	sub	sp, #40	; 0x28
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ea8:	f107 0314 	add.w	r3, r7, #20
 8007eac:	2200      	movs	r2, #0
 8007eae:	601a      	str	r2, [r3, #0]
 8007eb0:	605a      	str	r2, [r3, #4]
 8007eb2:	609a      	str	r2, [r3, #8]
 8007eb4:	60da      	str	r2, [r3, #12]
 8007eb6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ec0:	d147      	bne.n	8007f52 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	613b      	str	r3, [r7, #16]
 8007ec6:	4b25      	ldr	r3, [pc, #148]	; (8007f5c <HAL_HCD_MspInit+0xbc>)
 8007ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eca:	4a24      	ldr	r2, [pc, #144]	; (8007f5c <HAL_HCD_MspInit+0xbc>)
 8007ecc:	f043 0301 	orr.w	r3, r3, #1
 8007ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8007ed2:	4b22      	ldr	r3, [pc, #136]	; (8007f5c <HAL_HCD_MspInit+0xbc>)
 8007ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	613b      	str	r3, [r7, #16]
 8007edc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007ede:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007eec:	f107 0314 	add.w	r3, r7, #20
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	481b      	ldr	r0, [pc, #108]	; (8007f60 <HAL_HCD_MspInit+0xc0>)
 8007ef4:	f7f9 fbe0 	bl	80016b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007ef8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007efe:	2302      	movs	r3, #2
 8007f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f02:	2300      	movs	r3, #0
 8007f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f06:	2300      	movs	r3, #0
 8007f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007f0a:	230a      	movs	r3, #10
 8007f0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f0e:	f107 0314 	add.w	r3, r7, #20
 8007f12:	4619      	mov	r1, r3
 8007f14:	4812      	ldr	r0, [pc, #72]	; (8007f60 <HAL_HCD_MspInit+0xc0>)
 8007f16:	f7f9 fbcf 	bl	80016b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007f1a:	4b10      	ldr	r3, [pc, #64]	; (8007f5c <HAL_HCD_MspInit+0xbc>)
 8007f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f1e:	4a0f      	ldr	r2, [pc, #60]	; (8007f5c <HAL_HCD_MspInit+0xbc>)
 8007f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f24:	6353      	str	r3, [r2, #52]	; 0x34
 8007f26:	2300      	movs	r3, #0
 8007f28:	60fb      	str	r3, [r7, #12]
 8007f2a:	4b0c      	ldr	r3, [pc, #48]	; (8007f5c <HAL_HCD_MspInit+0xbc>)
 8007f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f2e:	4a0b      	ldr	r2, [pc, #44]	; (8007f5c <HAL_HCD_MspInit+0xbc>)
 8007f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f34:	6453      	str	r3, [r2, #68]	; 0x44
 8007f36:	4b09      	ldr	r3, [pc, #36]	; (8007f5c <HAL_HCD_MspInit+0xbc>)
 8007f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f3e:	60fb      	str	r3, [r7, #12]
 8007f40:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007f42:	2200      	movs	r2, #0
 8007f44:	2100      	movs	r1, #0
 8007f46:	2043      	movs	r0, #67	; 0x43
 8007f48:	f7f9 fb7f 	bl	800164a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007f4c:	2043      	movs	r0, #67	; 0x43
 8007f4e:	f7f9 fb98 	bl	8001682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007f52:	bf00      	nop
 8007f54:	3728      	adds	r7, #40	; 0x28
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	40023800 	.word	0x40023800
 8007f60:	40020000 	.word	0x40020000

08007f64 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7ff fba3 	bl	80076be <USBH_LL_IncTimer>
}
 8007f78:	bf00      	nop
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7ff fbdb 	bl	800774a <USBH_LL_Connect>
}
 8007f94:	bf00      	nop
 8007f96:	3708      	adds	r7, #8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7ff fbf3 	bl	8007796 <USBH_LL_Disconnect>
}
 8007fb0:	bf00      	nop
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	70fb      	strb	r3, [r7, #3]
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007fc8:	bf00      	nop
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7ff fb95 	bl	8007712 <USBH_LL_PortEnabled>
} 
 8007fe8:	bf00      	nop
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7ff fb95 	bl	800772e <USBH_LL_PortDisabled>
} 
 8008004:	bf00      	nop
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800801a:	2b01      	cmp	r3, #1
 800801c:	d12a      	bne.n	8008074 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800801e:	4a18      	ldr	r2, [pc, #96]	; (8008080 <USBH_LL_Init+0x74>)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a15      	ldr	r2, [pc, #84]	; (8008080 <USBH_LL_Init+0x74>)
 800802a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800802e:	4b14      	ldr	r3, [pc, #80]	; (8008080 <USBH_LL_Init+0x74>)
 8008030:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008034:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008036:	4b12      	ldr	r3, [pc, #72]	; (8008080 <USBH_LL_Init+0x74>)
 8008038:	2208      	movs	r2, #8
 800803a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800803c:	4b10      	ldr	r3, [pc, #64]	; (8008080 <USBH_LL_Init+0x74>)
 800803e:	2201      	movs	r2, #1
 8008040:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008042:	4b0f      	ldr	r3, [pc, #60]	; (8008080 <USBH_LL_Init+0x74>)
 8008044:	2200      	movs	r2, #0
 8008046:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008048:	4b0d      	ldr	r3, [pc, #52]	; (8008080 <USBH_LL_Init+0x74>)
 800804a:	2202      	movs	r2, #2
 800804c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800804e:	4b0c      	ldr	r3, [pc, #48]	; (8008080 <USBH_LL_Init+0x74>)
 8008050:	2200      	movs	r2, #0
 8008052:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008054:	480a      	ldr	r0, [pc, #40]	; (8008080 <USBH_LL_Init+0x74>)
 8008056:	f7f9 fce2 	bl	8001a1e <HAL_HCD_Init>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008060:	f7f8 fea0 	bl	8000da4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008064:	4806      	ldr	r0, [pc, #24]	; (8008080 <USBH_LL_Init+0x74>)
 8008066:	f7fa f8cf 	bl	8002208 <HAL_HCD_GetCurrentFrame>
 800806a:	4603      	mov	r3, r0
 800806c:	4619      	mov	r1, r3
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f7ff fb16 	bl	80076a0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3708      	adds	r7, #8
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	2000086c 	.word	0x2000086c

08008084 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800808c:	2300      	movs	r3, #0
 800808e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008090:	2300      	movs	r3, #0
 8008092:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800809a:	4618      	mov	r0, r3
 800809c:	f7fa f84a 	bl	8002134 <HAL_HCD_Start>
 80080a0:	4603      	mov	r3, r0
 80080a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080a4:	7bfb      	ldrb	r3, [r7, #15]
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 f912 	bl	80082d0 <USBH_Get_USB_Status>
 80080ac:	4603      	mov	r3, r0
 80080ae:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80080b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b084      	sub	sp, #16
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7fa f852 	bl	800217a <HAL_HCD_Stop>
 80080d6:	4603      	mov	r3, r0
 80080d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080da:	7bfb      	ldrb	r3, [r7, #15]
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 f8f7 	bl	80082d0 <USBH_Get_USB_Status>
 80080e2:	4603      	mov	r3, r0
 80080e4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80080e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3710      	adds	r7, #16
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	460b      	mov	r3, r1
 80080fa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008102:	78fa      	ldrb	r2, [r7, #3]
 8008104:	4611      	mov	r1, r2
 8008106:	4618      	mov	r0, r3
 8008108:	f7fa f869 	bl	80021de <HAL_HCD_HC_GetXferCount>
 800810c:	4603      	mov	r3, r0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3708      	adds	r7, #8
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008116:	b590      	push	{r4, r7, lr}
 8008118:	b089      	sub	sp, #36	; 0x24
 800811a:	af04      	add	r7, sp, #16
 800811c:	6078      	str	r0, [r7, #4]
 800811e:	4608      	mov	r0, r1
 8008120:	4611      	mov	r1, r2
 8008122:	461a      	mov	r2, r3
 8008124:	4603      	mov	r3, r0
 8008126:	70fb      	strb	r3, [r7, #3]
 8008128:	460b      	mov	r3, r1
 800812a:	70bb      	strb	r3, [r7, #2]
 800812c:	4613      	mov	r3, r2
 800812e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008130:	2300      	movs	r3, #0
 8008132:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800813e:	787c      	ldrb	r4, [r7, #1]
 8008140:	78ba      	ldrb	r2, [r7, #2]
 8008142:	78f9      	ldrb	r1, [r7, #3]
 8008144:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008146:	9302      	str	r3, [sp, #8]
 8008148:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800814c:	9301      	str	r3, [sp, #4]
 800814e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008152:	9300      	str	r3, [sp, #0]
 8008154:	4623      	mov	r3, r4
 8008156:	f7f9 fcc4 	bl	8001ae2 <HAL_HCD_HC_Init>
 800815a:	4603      	mov	r3, r0
 800815c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800815e:	7bfb      	ldrb	r3, [r7, #15]
 8008160:	4618      	mov	r0, r3
 8008162:	f000 f8b5 	bl	80082d0 <USBH_Get_USB_Status>
 8008166:	4603      	mov	r3, r0
 8008168:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800816a:	7bbb      	ldrb	r3, [r7, #14]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3714      	adds	r7, #20
 8008170:	46bd      	mov	sp, r7
 8008172:	bd90      	pop	{r4, r7, pc}

08008174 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	460b      	mov	r3, r1
 800817e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008184:	2300      	movs	r3, #0
 8008186:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800818e:	78fa      	ldrb	r2, [r7, #3]
 8008190:	4611      	mov	r1, r2
 8008192:	4618      	mov	r0, r3
 8008194:	f7f9 fd3d 	bl	8001c12 <HAL_HCD_HC_Halt>
 8008198:	4603      	mov	r3, r0
 800819a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800819c:	7bfb      	ldrb	r3, [r7, #15]
 800819e:	4618      	mov	r0, r3
 80081a0:	f000 f896 	bl	80082d0 <USBH_Get_USB_Status>
 80081a4:	4603      	mov	r3, r0
 80081a6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80081a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80081b2:	b590      	push	{r4, r7, lr}
 80081b4:	b089      	sub	sp, #36	; 0x24
 80081b6:	af04      	add	r7, sp, #16
 80081b8:	6078      	str	r0, [r7, #4]
 80081ba:	4608      	mov	r0, r1
 80081bc:	4611      	mov	r1, r2
 80081be:	461a      	mov	r2, r3
 80081c0:	4603      	mov	r3, r0
 80081c2:	70fb      	strb	r3, [r7, #3]
 80081c4:	460b      	mov	r3, r1
 80081c6:	70bb      	strb	r3, [r7, #2]
 80081c8:	4613      	mov	r3, r2
 80081ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081cc:	2300      	movs	r3, #0
 80081ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081d0:	2300      	movs	r3, #0
 80081d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80081da:	787c      	ldrb	r4, [r7, #1]
 80081dc:	78ba      	ldrb	r2, [r7, #2]
 80081de:	78f9      	ldrb	r1, [r7, #3]
 80081e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80081e4:	9303      	str	r3, [sp, #12]
 80081e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081e8:	9302      	str	r3, [sp, #8]
 80081ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ec:	9301      	str	r3, [sp, #4]
 80081ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	4623      	mov	r3, r4
 80081f6:	f7f9 fd2f 	bl	8001c58 <HAL_HCD_HC_SubmitRequest>
 80081fa:	4603      	mov	r3, r0
 80081fc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80081fe:	7bfb      	ldrb	r3, [r7, #15]
 8008200:	4618      	mov	r0, r3
 8008202:	f000 f865 	bl	80082d0 <USBH_Get_USB_Status>
 8008206:	4603      	mov	r3, r0
 8008208:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800820a:	7bbb      	ldrb	r3, [r7, #14]
}
 800820c:	4618      	mov	r0, r3
 800820e:	3714      	adds	r7, #20
 8008210:	46bd      	mov	sp, r7
 8008212:	bd90      	pop	{r4, r7, pc}

08008214 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	460b      	mov	r3, r1
 800821e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008226:	78fa      	ldrb	r2, [r7, #3]
 8008228:	4611      	mov	r1, r2
 800822a:	4618      	mov	r0, r3
 800822c:	f7f9 ffc2 	bl	80021b4 <HAL_HCD_HC_GetURBState>
 8008230:	4603      	mov	r3, r0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b082      	sub	sp, #8
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
 8008242:	460b      	mov	r3, r1
 8008244:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800824c:	2b01      	cmp	r3, #1
 800824e:	d103      	bne.n	8008258 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008250:	78fb      	ldrb	r3, [r7, #3]
 8008252:	4618      	mov	r0, r3
 8008254:	f000 f868 	bl	8008328 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008258:	20c8      	movs	r0, #200	; 0xc8
 800825a:	f7f9 f8f9 	bl	8001450 <HAL_Delay>
  return USBH_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	460b      	mov	r3, r1
 8008272:	70fb      	strb	r3, [r7, #3]
 8008274:	4613      	mov	r3, r2
 8008276:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800827e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008280:	78fa      	ldrb	r2, [r7, #3]
 8008282:	68f9      	ldr	r1, [r7, #12]
 8008284:	4613      	mov	r3, r2
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4413      	add	r3, r2
 800828a:	00db      	lsls	r3, r3, #3
 800828c:	440b      	add	r3, r1
 800828e:	333b      	adds	r3, #59	; 0x3b
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00a      	beq.n	80082ac <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008296:	78fa      	ldrb	r2, [r7, #3]
 8008298:	68f9      	ldr	r1, [r7, #12]
 800829a:	4613      	mov	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	4413      	add	r3, r2
 80082a0:	00db      	lsls	r3, r3, #3
 80082a2:	440b      	add	r3, r1
 80082a4:	3350      	adds	r3, #80	; 0x50
 80082a6:	78ba      	ldrb	r2, [r7, #2]
 80082a8:	701a      	strb	r2, [r3, #0]
 80082aa:	e009      	b.n	80082c0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80082ac:	78fa      	ldrb	r2, [r7, #3]
 80082ae:	68f9      	ldr	r1, [r7, #12]
 80082b0:	4613      	mov	r3, r2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	4413      	add	r3, r2
 80082b6:	00db      	lsls	r3, r3, #3
 80082b8:	440b      	add	r3, r1
 80082ba:	3351      	adds	r3, #81	; 0x51
 80082bc:	78ba      	ldrb	r2, [r7, #2]
 80082be:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3714      	adds	r7, #20
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
	...

080082d0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	4603      	mov	r3, r0
 80082d8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082da:	2300      	movs	r3, #0
 80082dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80082de:	79fb      	ldrb	r3, [r7, #7]
 80082e0:	2b03      	cmp	r3, #3
 80082e2:	d817      	bhi.n	8008314 <USBH_Get_USB_Status+0x44>
 80082e4:	a201      	add	r2, pc, #4	; (adr r2, 80082ec <USBH_Get_USB_Status+0x1c>)
 80082e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ea:	bf00      	nop
 80082ec:	080082fd 	.word	0x080082fd
 80082f0:	08008303 	.word	0x08008303
 80082f4:	08008309 	.word	0x08008309
 80082f8:	0800830f 	.word	0x0800830f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80082fc:	2300      	movs	r3, #0
 80082fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008300:	e00b      	b.n	800831a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008302:	2302      	movs	r3, #2
 8008304:	73fb      	strb	r3, [r7, #15]
    break;
 8008306:	e008      	b.n	800831a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008308:	2301      	movs	r3, #1
 800830a:	73fb      	strb	r3, [r7, #15]
    break;
 800830c:	e005      	b.n	800831a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800830e:	2302      	movs	r3, #2
 8008310:	73fb      	strb	r3, [r7, #15]
    break;
 8008312:	e002      	b.n	800831a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008314:	2302      	movs	r3, #2
 8008316:	73fb      	strb	r3, [r7, #15]
    break;
 8008318:	bf00      	nop
  }
  return usb_status;
 800831a:	7bfb      	ldrb	r3, [r7, #15]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3714      	adds	r7, #20
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	4603      	mov	r3, r0
 8008330:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8008332:	79fb      	ldrb	r3, [r7, #7]
 8008334:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008336:	79fb      	ldrb	r3, [r7, #7]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d102      	bne.n	8008342 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800833c:	2301      	movs	r3, #1
 800833e:	73fb      	strb	r3, [r7, #15]
 8008340:	e001      	b.n	8008346 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008342:	2300      	movs	r3, #0
 8008344:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008346:	7bfb      	ldrb	r3, [r7, #15]
 8008348:	461a      	mov	r2, r3
 800834a:	2101      	movs	r1, #1
 800834c:	4803      	ldr	r0, [pc, #12]	; (800835c <MX_DriverVbusFS+0x34>)
 800834e:	f7f9 fb4d 	bl	80019ec <HAL_GPIO_WritePin>
}
 8008352:	bf00      	nop
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	40020800 	.word	0x40020800

08008360 <__errno>:
 8008360:	4b01      	ldr	r3, [pc, #4]	; (8008368 <__errno+0x8>)
 8008362:	6818      	ldr	r0, [r3, #0]
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	2000002c 	.word	0x2000002c

0800836c <__libc_init_array>:
 800836c:	b570      	push	{r4, r5, r6, lr}
 800836e:	4e0d      	ldr	r6, [pc, #52]	; (80083a4 <__libc_init_array+0x38>)
 8008370:	4c0d      	ldr	r4, [pc, #52]	; (80083a8 <__libc_init_array+0x3c>)
 8008372:	1ba4      	subs	r4, r4, r6
 8008374:	10a4      	asrs	r4, r4, #2
 8008376:	2500      	movs	r5, #0
 8008378:	42a5      	cmp	r5, r4
 800837a:	d109      	bne.n	8008390 <__libc_init_array+0x24>
 800837c:	4e0b      	ldr	r6, [pc, #44]	; (80083ac <__libc_init_array+0x40>)
 800837e:	4c0c      	ldr	r4, [pc, #48]	; (80083b0 <__libc_init_array+0x44>)
 8008380:	f000 ff78 	bl	8009274 <_init>
 8008384:	1ba4      	subs	r4, r4, r6
 8008386:	10a4      	asrs	r4, r4, #2
 8008388:	2500      	movs	r5, #0
 800838a:	42a5      	cmp	r5, r4
 800838c:	d105      	bne.n	800839a <__libc_init_array+0x2e>
 800838e:	bd70      	pop	{r4, r5, r6, pc}
 8008390:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008394:	4798      	blx	r3
 8008396:	3501      	adds	r5, #1
 8008398:	e7ee      	b.n	8008378 <__libc_init_array+0xc>
 800839a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800839e:	4798      	blx	r3
 80083a0:	3501      	adds	r5, #1
 80083a2:	e7f2      	b.n	800838a <__libc_init_array+0x1e>
 80083a4:	08009940 	.word	0x08009940
 80083a8:	08009940 	.word	0x08009940
 80083ac:	08009940 	.word	0x08009940
 80083b0:	08009944 	.word	0x08009944

080083b4 <malloc>:
 80083b4:	4b02      	ldr	r3, [pc, #8]	; (80083c0 <malloc+0xc>)
 80083b6:	4601      	mov	r1, r0
 80083b8:	6818      	ldr	r0, [r3, #0]
 80083ba:	f000 b861 	b.w	8008480 <_malloc_r>
 80083be:	bf00      	nop
 80083c0:	2000002c 	.word	0x2000002c

080083c4 <free>:
 80083c4:	4b02      	ldr	r3, [pc, #8]	; (80083d0 <free+0xc>)
 80083c6:	4601      	mov	r1, r0
 80083c8:	6818      	ldr	r0, [r3, #0]
 80083ca:	f000 b80b 	b.w	80083e4 <_free_r>
 80083ce:	bf00      	nop
 80083d0:	2000002c 	.word	0x2000002c

080083d4 <memset>:
 80083d4:	4402      	add	r2, r0
 80083d6:	4603      	mov	r3, r0
 80083d8:	4293      	cmp	r3, r2
 80083da:	d100      	bne.n	80083de <memset+0xa>
 80083dc:	4770      	bx	lr
 80083de:	f803 1b01 	strb.w	r1, [r3], #1
 80083e2:	e7f9      	b.n	80083d8 <memset+0x4>

080083e4 <_free_r>:
 80083e4:	b538      	push	{r3, r4, r5, lr}
 80083e6:	4605      	mov	r5, r0
 80083e8:	2900      	cmp	r1, #0
 80083ea:	d045      	beq.n	8008478 <_free_r+0x94>
 80083ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083f0:	1f0c      	subs	r4, r1, #4
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	bfb8      	it	lt
 80083f6:	18e4      	addlt	r4, r4, r3
 80083f8:	f000 fbc6 	bl	8008b88 <__malloc_lock>
 80083fc:	4a1f      	ldr	r2, [pc, #124]	; (800847c <_free_r+0x98>)
 80083fe:	6813      	ldr	r3, [r2, #0]
 8008400:	4610      	mov	r0, r2
 8008402:	b933      	cbnz	r3, 8008412 <_free_r+0x2e>
 8008404:	6063      	str	r3, [r4, #4]
 8008406:	6014      	str	r4, [r2, #0]
 8008408:	4628      	mov	r0, r5
 800840a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800840e:	f000 bbbc 	b.w	8008b8a <__malloc_unlock>
 8008412:	42a3      	cmp	r3, r4
 8008414:	d90c      	bls.n	8008430 <_free_r+0x4c>
 8008416:	6821      	ldr	r1, [r4, #0]
 8008418:	1862      	adds	r2, r4, r1
 800841a:	4293      	cmp	r3, r2
 800841c:	bf04      	itt	eq
 800841e:	681a      	ldreq	r2, [r3, #0]
 8008420:	685b      	ldreq	r3, [r3, #4]
 8008422:	6063      	str	r3, [r4, #4]
 8008424:	bf04      	itt	eq
 8008426:	1852      	addeq	r2, r2, r1
 8008428:	6022      	streq	r2, [r4, #0]
 800842a:	6004      	str	r4, [r0, #0]
 800842c:	e7ec      	b.n	8008408 <_free_r+0x24>
 800842e:	4613      	mov	r3, r2
 8008430:	685a      	ldr	r2, [r3, #4]
 8008432:	b10a      	cbz	r2, 8008438 <_free_r+0x54>
 8008434:	42a2      	cmp	r2, r4
 8008436:	d9fa      	bls.n	800842e <_free_r+0x4a>
 8008438:	6819      	ldr	r1, [r3, #0]
 800843a:	1858      	adds	r0, r3, r1
 800843c:	42a0      	cmp	r0, r4
 800843e:	d10b      	bne.n	8008458 <_free_r+0x74>
 8008440:	6820      	ldr	r0, [r4, #0]
 8008442:	4401      	add	r1, r0
 8008444:	1858      	adds	r0, r3, r1
 8008446:	4282      	cmp	r2, r0
 8008448:	6019      	str	r1, [r3, #0]
 800844a:	d1dd      	bne.n	8008408 <_free_r+0x24>
 800844c:	6810      	ldr	r0, [r2, #0]
 800844e:	6852      	ldr	r2, [r2, #4]
 8008450:	605a      	str	r2, [r3, #4]
 8008452:	4401      	add	r1, r0
 8008454:	6019      	str	r1, [r3, #0]
 8008456:	e7d7      	b.n	8008408 <_free_r+0x24>
 8008458:	d902      	bls.n	8008460 <_free_r+0x7c>
 800845a:	230c      	movs	r3, #12
 800845c:	602b      	str	r3, [r5, #0]
 800845e:	e7d3      	b.n	8008408 <_free_r+0x24>
 8008460:	6820      	ldr	r0, [r4, #0]
 8008462:	1821      	adds	r1, r4, r0
 8008464:	428a      	cmp	r2, r1
 8008466:	bf04      	itt	eq
 8008468:	6811      	ldreq	r1, [r2, #0]
 800846a:	6852      	ldreq	r2, [r2, #4]
 800846c:	6062      	str	r2, [r4, #4]
 800846e:	bf04      	itt	eq
 8008470:	1809      	addeq	r1, r1, r0
 8008472:	6021      	streq	r1, [r4, #0]
 8008474:	605c      	str	r4, [r3, #4]
 8008476:	e7c7      	b.n	8008408 <_free_r+0x24>
 8008478:	bd38      	pop	{r3, r4, r5, pc}
 800847a:	bf00      	nop
 800847c:	200000c0 	.word	0x200000c0

08008480 <_malloc_r>:
 8008480:	b570      	push	{r4, r5, r6, lr}
 8008482:	1ccd      	adds	r5, r1, #3
 8008484:	f025 0503 	bic.w	r5, r5, #3
 8008488:	3508      	adds	r5, #8
 800848a:	2d0c      	cmp	r5, #12
 800848c:	bf38      	it	cc
 800848e:	250c      	movcc	r5, #12
 8008490:	2d00      	cmp	r5, #0
 8008492:	4606      	mov	r6, r0
 8008494:	db01      	blt.n	800849a <_malloc_r+0x1a>
 8008496:	42a9      	cmp	r1, r5
 8008498:	d903      	bls.n	80084a2 <_malloc_r+0x22>
 800849a:	230c      	movs	r3, #12
 800849c:	6033      	str	r3, [r6, #0]
 800849e:	2000      	movs	r0, #0
 80084a0:	bd70      	pop	{r4, r5, r6, pc}
 80084a2:	f000 fb71 	bl	8008b88 <__malloc_lock>
 80084a6:	4a21      	ldr	r2, [pc, #132]	; (800852c <_malloc_r+0xac>)
 80084a8:	6814      	ldr	r4, [r2, #0]
 80084aa:	4621      	mov	r1, r4
 80084ac:	b991      	cbnz	r1, 80084d4 <_malloc_r+0x54>
 80084ae:	4c20      	ldr	r4, [pc, #128]	; (8008530 <_malloc_r+0xb0>)
 80084b0:	6823      	ldr	r3, [r4, #0]
 80084b2:	b91b      	cbnz	r3, 80084bc <_malloc_r+0x3c>
 80084b4:	4630      	mov	r0, r6
 80084b6:	f000 f8b9 	bl	800862c <_sbrk_r>
 80084ba:	6020      	str	r0, [r4, #0]
 80084bc:	4629      	mov	r1, r5
 80084be:	4630      	mov	r0, r6
 80084c0:	f000 f8b4 	bl	800862c <_sbrk_r>
 80084c4:	1c43      	adds	r3, r0, #1
 80084c6:	d124      	bne.n	8008512 <_malloc_r+0x92>
 80084c8:	230c      	movs	r3, #12
 80084ca:	6033      	str	r3, [r6, #0]
 80084cc:	4630      	mov	r0, r6
 80084ce:	f000 fb5c 	bl	8008b8a <__malloc_unlock>
 80084d2:	e7e4      	b.n	800849e <_malloc_r+0x1e>
 80084d4:	680b      	ldr	r3, [r1, #0]
 80084d6:	1b5b      	subs	r3, r3, r5
 80084d8:	d418      	bmi.n	800850c <_malloc_r+0x8c>
 80084da:	2b0b      	cmp	r3, #11
 80084dc:	d90f      	bls.n	80084fe <_malloc_r+0x7e>
 80084de:	600b      	str	r3, [r1, #0]
 80084e0:	50cd      	str	r5, [r1, r3]
 80084e2:	18cc      	adds	r4, r1, r3
 80084e4:	4630      	mov	r0, r6
 80084e6:	f000 fb50 	bl	8008b8a <__malloc_unlock>
 80084ea:	f104 000b 	add.w	r0, r4, #11
 80084ee:	1d23      	adds	r3, r4, #4
 80084f0:	f020 0007 	bic.w	r0, r0, #7
 80084f4:	1ac3      	subs	r3, r0, r3
 80084f6:	d0d3      	beq.n	80084a0 <_malloc_r+0x20>
 80084f8:	425a      	negs	r2, r3
 80084fa:	50e2      	str	r2, [r4, r3]
 80084fc:	e7d0      	b.n	80084a0 <_malloc_r+0x20>
 80084fe:	428c      	cmp	r4, r1
 8008500:	684b      	ldr	r3, [r1, #4]
 8008502:	bf16      	itet	ne
 8008504:	6063      	strne	r3, [r4, #4]
 8008506:	6013      	streq	r3, [r2, #0]
 8008508:	460c      	movne	r4, r1
 800850a:	e7eb      	b.n	80084e4 <_malloc_r+0x64>
 800850c:	460c      	mov	r4, r1
 800850e:	6849      	ldr	r1, [r1, #4]
 8008510:	e7cc      	b.n	80084ac <_malloc_r+0x2c>
 8008512:	1cc4      	adds	r4, r0, #3
 8008514:	f024 0403 	bic.w	r4, r4, #3
 8008518:	42a0      	cmp	r0, r4
 800851a:	d005      	beq.n	8008528 <_malloc_r+0xa8>
 800851c:	1a21      	subs	r1, r4, r0
 800851e:	4630      	mov	r0, r6
 8008520:	f000 f884 	bl	800862c <_sbrk_r>
 8008524:	3001      	adds	r0, #1
 8008526:	d0cf      	beq.n	80084c8 <_malloc_r+0x48>
 8008528:	6025      	str	r5, [r4, #0]
 800852a:	e7db      	b.n	80084e4 <_malloc_r+0x64>
 800852c:	200000c0 	.word	0x200000c0
 8008530:	200000c4 	.word	0x200000c4

08008534 <iprintf>:
 8008534:	b40f      	push	{r0, r1, r2, r3}
 8008536:	4b0a      	ldr	r3, [pc, #40]	; (8008560 <iprintf+0x2c>)
 8008538:	b513      	push	{r0, r1, r4, lr}
 800853a:	681c      	ldr	r4, [r3, #0]
 800853c:	b124      	cbz	r4, 8008548 <iprintf+0x14>
 800853e:	69a3      	ldr	r3, [r4, #24]
 8008540:	b913      	cbnz	r3, 8008548 <iprintf+0x14>
 8008542:	4620      	mov	r0, r4
 8008544:	f000 fa32 	bl	80089ac <__sinit>
 8008548:	ab05      	add	r3, sp, #20
 800854a:	9a04      	ldr	r2, [sp, #16]
 800854c:	68a1      	ldr	r1, [r4, #8]
 800854e:	9301      	str	r3, [sp, #4]
 8008550:	4620      	mov	r0, r4
 8008552:	f000 fb45 	bl	8008be0 <_vfiprintf_r>
 8008556:	b002      	add	sp, #8
 8008558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800855c:	b004      	add	sp, #16
 800855e:	4770      	bx	lr
 8008560:	2000002c 	.word	0x2000002c

08008564 <_puts_r>:
 8008564:	b570      	push	{r4, r5, r6, lr}
 8008566:	460e      	mov	r6, r1
 8008568:	4605      	mov	r5, r0
 800856a:	b118      	cbz	r0, 8008574 <_puts_r+0x10>
 800856c:	6983      	ldr	r3, [r0, #24]
 800856e:	b90b      	cbnz	r3, 8008574 <_puts_r+0x10>
 8008570:	f000 fa1c 	bl	80089ac <__sinit>
 8008574:	69ab      	ldr	r3, [r5, #24]
 8008576:	68ac      	ldr	r4, [r5, #8]
 8008578:	b913      	cbnz	r3, 8008580 <_puts_r+0x1c>
 800857a:	4628      	mov	r0, r5
 800857c:	f000 fa16 	bl	80089ac <__sinit>
 8008580:	4b23      	ldr	r3, [pc, #140]	; (8008610 <_puts_r+0xac>)
 8008582:	429c      	cmp	r4, r3
 8008584:	d117      	bne.n	80085b6 <_puts_r+0x52>
 8008586:	686c      	ldr	r4, [r5, #4]
 8008588:	89a3      	ldrh	r3, [r4, #12]
 800858a:	071b      	lsls	r3, r3, #28
 800858c:	d51d      	bpl.n	80085ca <_puts_r+0x66>
 800858e:	6923      	ldr	r3, [r4, #16]
 8008590:	b1db      	cbz	r3, 80085ca <_puts_r+0x66>
 8008592:	3e01      	subs	r6, #1
 8008594:	68a3      	ldr	r3, [r4, #8]
 8008596:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800859a:	3b01      	subs	r3, #1
 800859c:	60a3      	str	r3, [r4, #8]
 800859e:	b9e9      	cbnz	r1, 80085dc <_puts_r+0x78>
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	da2e      	bge.n	8008602 <_puts_r+0x9e>
 80085a4:	4622      	mov	r2, r4
 80085a6:	210a      	movs	r1, #10
 80085a8:	4628      	mov	r0, r5
 80085aa:	f000 f84f 	bl	800864c <__swbuf_r>
 80085ae:	3001      	adds	r0, #1
 80085b0:	d011      	beq.n	80085d6 <_puts_r+0x72>
 80085b2:	200a      	movs	r0, #10
 80085b4:	e011      	b.n	80085da <_puts_r+0x76>
 80085b6:	4b17      	ldr	r3, [pc, #92]	; (8008614 <_puts_r+0xb0>)
 80085b8:	429c      	cmp	r4, r3
 80085ba:	d101      	bne.n	80085c0 <_puts_r+0x5c>
 80085bc:	68ac      	ldr	r4, [r5, #8]
 80085be:	e7e3      	b.n	8008588 <_puts_r+0x24>
 80085c0:	4b15      	ldr	r3, [pc, #84]	; (8008618 <_puts_r+0xb4>)
 80085c2:	429c      	cmp	r4, r3
 80085c4:	bf08      	it	eq
 80085c6:	68ec      	ldreq	r4, [r5, #12]
 80085c8:	e7de      	b.n	8008588 <_puts_r+0x24>
 80085ca:	4621      	mov	r1, r4
 80085cc:	4628      	mov	r0, r5
 80085ce:	f000 f88f 	bl	80086f0 <__swsetup_r>
 80085d2:	2800      	cmp	r0, #0
 80085d4:	d0dd      	beq.n	8008592 <_puts_r+0x2e>
 80085d6:	f04f 30ff 	mov.w	r0, #4294967295
 80085da:	bd70      	pop	{r4, r5, r6, pc}
 80085dc:	2b00      	cmp	r3, #0
 80085de:	da04      	bge.n	80085ea <_puts_r+0x86>
 80085e0:	69a2      	ldr	r2, [r4, #24]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	dc06      	bgt.n	80085f4 <_puts_r+0x90>
 80085e6:	290a      	cmp	r1, #10
 80085e8:	d004      	beq.n	80085f4 <_puts_r+0x90>
 80085ea:	6823      	ldr	r3, [r4, #0]
 80085ec:	1c5a      	adds	r2, r3, #1
 80085ee:	6022      	str	r2, [r4, #0]
 80085f0:	7019      	strb	r1, [r3, #0]
 80085f2:	e7cf      	b.n	8008594 <_puts_r+0x30>
 80085f4:	4622      	mov	r2, r4
 80085f6:	4628      	mov	r0, r5
 80085f8:	f000 f828 	bl	800864c <__swbuf_r>
 80085fc:	3001      	adds	r0, #1
 80085fe:	d1c9      	bne.n	8008594 <_puts_r+0x30>
 8008600:	e7e9      	b.n	80085d6 <_puts_r+0x72>
 8008602:	6823      	ldr	r3, [r4, #0]
 8008604:	200a      	movs	r0, #10
 8008606:	1c5a      	adds	r2, r3, #1
 8008608:	6022      	str	r2, [r4, #0]
 800860a:	7018      	strb	r0, [r3, #0]
 800860c:	e7e5      	b.n	80085da <_puts_r+0x76>
 800860e:	bf00      	nop
 8008610:	080098c4 	.word	0x080098c4
 8008614:	080098e4 	.word	0x080098e4
 8008618:	080098a4 	.word	0x080098a4

0800861c <puts>:
 800861c:	4b02      	ldr	r3, [pc, #8]	; (8008628 <puts+0xc>)
 800861e:	4601      	mov	r1, r0
 8008620:	6818      	ldr	r0, [r3, #0]
 8008622:	f7ff bf9f 	b.w	8008564 <_puts_r>
 8008626:	bf00      	nop
 8008628:	2000002c 	.word	0x2000002c

0800862c <_sbrk_r>:
 800862c:	b538      	push	{r3, r4, r5, lr}
 800862e:	4c06      	ldr	r4, [pc, #24]	; (8008648 <_sbrk_r+0x1c>)
 8008630:	2300      	movs	r3, #0
 8008632:	4605      	mov	r5, r0
 8008634:	4608      	mov	r0, r1
 8008636:	6023      	str	r3, [r4, #0]
 8008638:	f7f8 fcf6 	bl	8001028 <_sbrk>
 800863c:	1c43      	adds	r3, r0, #1
 800863e:	d102      	bne.n	8008646 <_sbrk_r+0x1a>
 8008640:	6823      	ldr	r3, [r4, #0]
 8008642:	b103      	cbz	r3, 8008646 <_sbrk_r+0x1a>
 8008644:	602b      	str	r3, [r5, #0]
 8008646:	bd38      	pop	{r3, r4, r5, pc}
 8008648:	20000b30 	.word	0x20000b30

0800864c <__swbuf_r>:
 800864c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800864e:	460e      	mov	r6, r1
 8008650:	4614      	mov	r4, r2
 8008652:	4605      	mov	r5, r0
 8008654:	b118      	cbz	r0, 800865e <__swbuf_r+0x12>
 8008656:	6983      	ldr	r3, [r0, #24]
 8008658:	b90b      	cbnz	r3, 800865e <__swbuf_r+0x12>
 800865a:	f000 f9a7 	bl	80089ac <__sinit>
 800865e:	4b21      	ldr	r3, [pc, #132]	; (80086e4 <__swbuf_r+0x98>)
 8008660:	429c      	cmp	r4, r3
 8008662:	d12a      	bne.n	80086ba <__swbuf_r+0x6e>
 8008664:	686c      	ldr	r4, [r5, #4]
 8008666:	69a3      	ldr	r3, [r4, #24]
 8008668:	60a3      	str	r3, [r4, #8]
 800866a:	89a3      	ldrh	r3, [r4, #12]
 800866c:	071a      	lsls	r2, r3, #28
 800866e:	d52e      	bpl.n	80086ce <__swbuf_r+0x82>
 8008670:	6923      	ldr	r3, [r4, #16]
 8008672:	b363      	cbz	r3, 80086ce <__swbuf_r+0x82>
 8008674:	6923      	ldr	r3, [r4, #16]
 8008676:	6820      	ldr	r0, [r4, #0]
 8008678:	1ac0      	subs	r0, r0, r3
 800867a:	6963      	ldr	r3, [r4, #20]
 800867c:	b2f6      	uxtb	r6, r6
 800867e:	4283      	cmp	r3, r0
 8008680:	4637      	mov	r7, r6
 8008682:	dc04      	bgt.n	800868e <__swbuf_r+0x42>
 8008684:	4621      	mov	r1, r4
 8008686:	4628      	mov	r0, r5
 8008688:	f000 f926 	bl	80088d8 <_fflush_r>
 800868c:	bb28      	cbnz	r0, 80086da <__swbuf_r+0x8e>
 800868e:	68a3      	ldr	r3, [r4, #8]
 8008690:	3b01      	subs	r3, #1
 8008692:	60a3      	str	r3, [r4, #8]
 8008694:	6823      	ldr	r3, [r4, #0]
 8008696:	1c5a      	adds	r2, r3, #1
 8008698:	6022      	str	r2, [r4, #0]
 800869a:	701e      	strb	r6, [r3, #0]
 800869c:	6963      	ldr	r3, [r4, #20]
 800869e:	3001      	adds	r0, #1
 80086a0:	4283      	cmp	r3, r0
 80086a2:	d004      	beq.n	80086ae <__swbuf_r+0x62>
 80086a4:	89a3      	ldrh	r3, [r4, #12]
 80086a6:	07db      	lsls	r3, r3, #31
 80086a8:	d519      	bpl.n	80086de <__swbuf_r+0x92>
 80086aa:	2e0a      	cmp	r6, #10
 80086ac:	d117      	bne.n	80086de <__swbuf_r+0x92>
 80086ae:	4621      	mov	r1, r4
 80086b0:	4628      	mov	r0, r5
 80086b2:	f000 f911 	bl	80088d8 <_fflush_r>
 80086b6:	b190      	cbz	r0, 80086de <__swbuf_r+0x92>
 80086b8:	e00f      	b.n	80086da <__swbuf_r+0x8e>
 80086ba:	4b0b      	ldr	r3, [pc, #44]	; (80086e8 <__swbuf_r+0x9c>)
 80086bc:	429c      	cmp	r4, r3
 80086be:	d101      	bne.n	80086c4 <__swbuf_r+0x78>
 80086c0:	68ac      	ldr	r4, [r5, #8]
 80086c2:	e7d0      	b.n	8008666 <__swbuf_r+0x1a>
 80086c4:	4b09      	ldr	r3, [pc, #36]	; (80086ec <__swbuf_r+0xa0>)
 80086c6:	429c      	cmp	r4, r3
 80086c8:	bf08      	it	eq
 80086ca:	68ec      	ldreq	r4, [r5, #12]
 80086cc:	e7cb      	b.n	8008666 <__swbuf_r+0x1a>
 80086ce:	4621      	mov	r1, r4
 80086d0:	4628      	mov	r0, r5
 80086d2:	f000 f80d 	bl	80086f0 <__swsetup_r>
 80086d6:	2800      	cmp	r0, #0
 80086d8:	d0cc      	beq.n	8008674 <__swbuf_r+0x28>
 80086da:	f04f 37ff 	mov.w	r7, #4294967295
 80086de:	4638      	mov	r0, r7
 80086e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086e2:	bf00      	nop
 80086e4:	080098c4 	.word	0x080098c4
 80086e8:	080098e4 	.word	0x080098e4
 80086ec:	080098a4 	.word	0x080098a4

080086f0 <__swsetup_r>:
 80086f0:	4b32      	ldr	r3, [pc, #200]	; (80087bc <__swsetup_r+0xcc>)
 80086f2:	b570      	push	{r4, r5, r6, lr}
 80086f4:	681d      	ldr	r5, [r3, #0]
 80086f6:	4606      	mov	r6, r0
 80086f8:	460c      	mov	r4, r1
 80086fa:	b125      	cbz	r5, 8008706 <__swsetup_r+0x16>
 80086fc:	69ab      	ldr	r3, [r5, #24]
 80086fe:	b913      	cbnz	r3, 8008706 <__swsetup_r+0x16>
 8008700:	4628      	mov	r0, r5
 8008702:	f000 f953 	bl	80089ac <__sinit>
 8008706:	4b2e      	ldr	r3, [pc, #184]	; (80087c0 <__swsetup_r+0xd0>)
 8008708:	429c      	cmp	r4, r3
 800870a:	d10f      	bne.n	800872c <__swsetup_r+0x3c>
 800870c:	686c      	ldr	r4, [r5, #4]
 800870e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008712:	b29a      	uxth	r2, r3
 8008714:	0715      	lsls	r5, r2, #28
 8008716:	d42c      	bmi.n	8008772 <__swsetup_r+0x82>
 8008718:	06d0      	lsls	r0, r2, #27
 800871a:	d411      	bmi.n	8008740 <__swsetup_r+0x50>
 800871c:	2209      	movs	r2, #9
 800871e:	6032      	str	r2, [r6, #0]
 8008720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008724:	81a3      	strh	r3, [r4, #12]
 8008726:	f04f 30ff 	mov.w	r0, #4294967295
 800872a:	e03e      	b.n	80087aa <__swsetup_r+0xba>
 800872c:	4b25      	ldr	r3, [pc, #148]	; (80087c4 <__swsetup_r+0xd4>)
 800872e:	429c      	cmp	r4, r3
 8008730:	d101      	bne.n	8008736 <__swsetup_r+0x46>
 8008732:	68ac      	ldr	r4, [r5, #8]
 8008734:	e7eb      	b.n	800870e <__swsetup_r+0x1e>
 8008736:	4b24      	ldr	r3, [pc, #144]	; (80087c8 <__swsetup_r+0xd8>)
 8008738:	429c      	cmp	r4, r3
 800873a:	bf08      	it	eq
 800873c:	68ec      	ldreq	r4, [r5, #12]
 800873e:	e7e6      	b.n	800870e <__swsetup_r+0x1e>
 8008740:	0751      	lsls	r1, r2, #29
 8008742:	d512      	bpl.n	800876a <__swsetup_r+0x7a>
 8008744:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008746:	b141      	cbz	r1, 800875a <__swsetup_r+0x6a>
 8008748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800874c:	4299      	cmp	r1, r3
 800874e:	d002      	beq.n	8008756 <__swsetup_r+0x66>
 8008750:	4630      	mov	r0, r6
 8008752:	f7ff fe47 	bl	80083e4 <_free_r>
 8008756:	2300      	movs	r3, #0
 8008758:	6363      	str	r3, [r4, #52]	; 0x34
 800875a:	89a3      	ldrh	r3, [r4, #12]
 800875c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008760:	81a3      	strh	r3, [r4, #12]
 8008762:	2300      	movs	r3, #0
 8008764:	6063      	str	r3, [r4, #4]
 8008766:	6923      	ldr	r3, [r4, #16]
 8008768:	6023      	str	r3, [r4, #0]
 800876a:	89a3      	ldrh	r3, [r4, #12]
 800876c:	f043 0308 	orr.w	r3, r3, #8
 8008770:	81a3      	strh	r3, [r4, #12]
 8008772:	6923      	ldr	r3, [r4, #16]
 8008774:	b94b      	cbnz	r3, 800878a <__swsetup_r+0x9a>
 8008776:	89a3      	ldrh	r3, [r4, #12]
 8008778:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800877c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008780:	d003      	beq.n	800878a <__swsetup_r+0x9a>
 8008782:	4621      	mov	r1, r4
 8008784:	4630      	mov	r0, r6
 8008786:	f000 f9bf 	bl	8008b08 <__smakebuf_r>
 800878a:	89a2      	ldrh	r2, [r4, #12]
 800878c:	f012 0301 	ands.w	r3, r2, #1
 8008790:	d00c      	beq.n	80087ac <__swsetup_r+0xbc>
 8008792:	2300      	movs	r3, #0
 8008794:	60a3      	str	r3, [r4, #8]
 8008796:	6963      	ldr	r3, [r4, #20]
 8008798:	425b      	negs	r3, r3
 800879a:	61a3      	str	r3, [r4, #24]
 800879c:	6923      	ldr	r3, [r4, #16]
 800879e:	b953      	cbnz	r3, 80087b6 <__swsetup_r+0xc6>
 80087a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087a4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80087a8:	d1ba      	bne.n	8008720 <__swsetup_r+0x30>
 80087aa:	bd70      	pop	{r4, r5, r6, pc}
 80087ac:	0792      	lsls	r2, r2, #30
 80087ae:	bf58      	it	pl
 80087b0:	6963      	ldrpl	r3, [r4, #20]
 80087b2:	60a3      	str	r3, [r4, #8]
 80087b4:	e7f2      	b.n	800879c <__swsetup_r+0xac>
 80087b6:	2000      	movs	r0, #0
 80087b8:	e7f7      	b.n	80087aa <__swsetup_r+0xba>
 80087ba:	bf00      	nop
 80087bc:	2000002c 	.word	0x2000002c
 80087c0:	080098c4 	.word	0x080098c4
 80087c4:	080098e4 	.word	0x080098e4
 80087c8:	080098a4 	.word	0x080098a4

080087cc <__sflush_r>:
 80087cc:	898a      	ldrh	r2, [r1, #12]
 80087ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087d2:	4605      	mov	r5, r0
 80087d4:	0710      	lsls	r0, r2, #28
 80087d6:	460c      	mov	r4, r1
 80087d8:	d458      	bmi.n	800888c <__sflush_r+0xc0>
 80087da:	684b      	ldr	r3, [r1, #4]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	dc05      	bgt.n	80087ec <__sflush_r+0x20>
 80087e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	dc02      	bgt.n	80087ec <__sflush_r+0x20>
 80087e6:	2000      	movs	r0, #0
 80087e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087ee:	2e00      	cmp	r6, #0
 80087f0:	d0f9      	beq.n	80087e6 <__sflush_r+0x1a>
 80087f2:	2300      	movs	r3, #0
 80087f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80087f8:	682f      	ldr	r7, [r5, #0]
 80087fa:	6a21      	ldr	r1, [r4, #32]
 80087fc:	602b      	str	r3, [r5, #0]
 80087fe:	d032      	beq.n	8008866 <__sflush_r+0x9a>
 8008800:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008802:	89a3      	ldrh	r3, [r4, #12]
 8008804:	075a      	lsls	r2, r3, #29
 8008806:	d505      	bpl.n	8008814 <__sflush_r+0x48>
 8008808:	6863      	ldr	r3, [r4, #4]
 800880a:	1ac0      	subs	r0, r0, r3
 800880c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800880e:	b10b      	cbz	r3, 8008814 <__sflush_r+0x48>
 8008810:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008812:	1ac0      	subs	r0, r0, r3
 8008814:	2300      	movs	r3, #0
 8008816:	4602      	mov	r2, r0
 8008818:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800881a:	6a21      	ldr	r1, [r4, #32]
 800881c:	4628      	mov	r0, r5
 800881e:	47b0      	blx	r6
 8008820:	1c43      	adds	r3, r0, #1
 8008822:	89a3      	ldrh	r3, [r4, #12]
 8008824:	d106      	bne.n	8008834 <__sflush_r+0x68>
 8008826:	6829      	ldr	r1, [r5, #0]
 8008828:	291d      	cmp	r1, #29
 800882a:	d848      	bhi.n	80088be <__sflush_r+0xf2>
 800882c:	4a29      	ldr	r2, [pc, #164]	; (80088d4 <__sflush_r+0x108>)
 800882e:	40ca      	lsrs	r2, r1
 8008830:	07d6      	lsls	r6, r2, #31
 8008832:	d544      	bpl.n	80088be <__sflush_r+0xf2>
 8008834:	2200      	movs	r2, #0
 8008836:	6062      	str	r2, [r4, #4]
 8008838:	04d9      	lsls	r1, r3, #19
 800883a:	6922      	ldr	r2, [r4, #16]
 800883c:	6022      	str	r2, [r4, #0]
 800883e:	d504      	bpl.n	800884a <__sflush_r+0x7e>
 8008840:	1c42      	adds	r2, r0, #1
 8008842:	d101      	bne.n	8008848 <__sflush_r+0x7c>
 8008844:	682b      	ldr	r3, [r5, #0]
 8008846:	b903      	cbnz	r3, 800884a <__sflush_r+0x7e>
 8008848:	6560      	str	r0, [r4, #84]	; 0x54
 800884a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800884c:	602f      	str	r7, [r5, #0]
 800884e:	2900      	cmp	r1, #0
 8008850:	d0c9      	beq.n	80087e6 <__sflush_r+0x1a>
 8008852:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008856:	4299      	cmp	r1, r3
 8008858:	d002      	beq.n	8008860 <__sflush_r+0x94>
 800885a:	4628      	mov	r0, r5
 800885c:	f7ff fdc2 	bl	80083e4 <_free_r>
 8008860:	2000      	movs	r0, #0
 8008862:	6360      	str	r0, [r4, #52]	; 0x34
 8008864:	e7c0      	b.n	80087e8 <__sflush_r+0x1c>
 8008866:	2301      	movs	r3, #1
 8008868:	4628      	mov	r0, r5
 800886a:	47b0      	blx	r6
 800886c:	1c41      	adds	r1, r0, #1
 800886e:	d1c8      	bne.n	8008802 <__sflush_r+0x36>
 8008870:	682b      	ldr	r3, [r5, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d0c5      	beq.n	8008802 <__sflush_r+0x36>
 8008876:	2b1d      	cmp	r3, #29
 8008878:	d001      	beq.n	800887e <__sflush_r+0xb2>
 800887a:	2b16      	cmp	r3, #22
 800887c:	d101      	bne.n	8008882 <__sflush_r+0xb6>
 800887e:	602f      	str	r7, [r5, #0]
 8008880:	e7b1      	b.n	80087e6 <__sflush_r+0x1a>
 8008882:	89a3      	ldrh	r3, [r4, #12]
 8008884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008888:	81a3      	strh	r3, [r4, #12]
 800888a:	e7ad      	b.n	80087e8 <__sflush_r+0x1c>
 800888c:	690f      	ldr	r7, [r1, #16]
 800888e:	2f00      	cmp	r7, #0
 8008890:	d0a9      	beq.n	80087e6 <__sflush_r+0x1a>
 8008892:	0793      	lsls	r3, r2, #30
 8008894:	680e      	ldr	r6, [r1, #0]
 8008896:	bf08      	it	eq
 8008898:	694b      	ldreq	r3, [r1, #20]
 800889a:	600f      	str	r7, [r1, #0]
 800889c:	bf18      	it	ne
 800889e:	2300      	movne	r3, #0
 80088a0:	eba6 0807 	sub.w	r8, r6, r7
 80088a4:	608b      	str	r3, [r1, #8]
 80088a6:	f1b8 0f00 	cmp.w	r8, #0
 80088aa:	dd9c      	ble.n	80087e6 <__sflush_r+0x1a>
 80088ac:	4643      	mov	r3, r8
 80088ae:	463a      	mov	r2, r7
 80088b0:	6a21      	ldr	r1, [r4, #32]
 80088b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80088b4:	4628      	mov	r0, r5
 80088b6:	47b0      	blx	r6
 80088b8:	2800      	cmp	r0, #0
 80088ba:	dc06      	bgt.n	80088ca <__sflush_r+0xfe>
 80088bc:	89a3      	ldrh	r3, [r4, #12]
 80088be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088c2:	81a3      	strh	r3, [r4, #12]
 80088c4:	f04f 30ff 	mov.w	r0, #4294967295
 80088c8:	e78e      	b.n	80087e8 <__sflush_r+0x1c>
 80088ca:	4407      	add	r7, r0
 80088cc:	eba8 0800 	sub.w	r8, r8, r0
 80088d0:	e7e9      	b.n	80088a6 <__sflush_r+0xda>
 80088d2:	bf00      	nop
 80088d4:	20400001 	.word	0x20400001

080088d8 <_fflush_r>:
 80088d8:	b538      	push	{r3, r4, r5, lr}
 80088da:	690b      	ldr	r3, [r1, #16]
 80088dc:	4605      	mov	r5, r0
 80088de:	460c      	mov	r4, r1
 80088e0:	b1db      	cbz	r3, 800891a <_fflush_r+0x42>
 80088e2:	b118      	cbz	r0, 80088ec <_fflush_r+0x14>
 80088e4:	6983      	ldr	r3, [r0, #24]
 80088e6:	b90b      	cbnz	r3, 80088ec <_fflush_r+0x14>
 80088e8:	f000 f860 	bl	80089ac <__sinit>
 80088ec:	4b0c      	ldr	r3, [pc, #48]	; (8008920 <_fflush_r+0x48>)
 80088ee:	429c      	cmp	r4, r3
 80088f0:	d109      	bne.n	8008906 <_fflush_r+0x2e>
 80088f2:	686c      	ldr	r4, [r5, #4]
 80088f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088f8:	b17b      	cbz	r3, 800891a <_fflush_r+0x42>
 80088fa:	4621      	mov	r1, r4
 80088fc:	4628      	mov	r0, r5
 80088fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008902:	f7ff bf63 	b.w	80087cc <__sflush_r>
 8008906:	4b07      	ldr	r3, [pc, #28]	; (8008924 <_fflush_r+0x4c>)
 8008908:	429c      	cmp	r4, r3
 800890a:	d101      	bne.n	8008910 <_fflush_r+0x38>
 800890c:	68ac      	ldr	r4, [r5, #8]
 800890e:	e7f1      	b.n	80088f4 <_fflush_r+0x1c>
 8008910:	4b05      	ldr	r3, [pc, #20]	; (8008928 <_fflush_r+0x50>)
 8008912:	429c      	cmp	r4, r3
 8008914:	bf08      	it	eq
 8008916:	68ec      	ldreq	r4, [r5, #12]
 8008918:	e7ec      	b.n	80088f4 <_fflush_r+0x1c>
 800891a:	2000      	movs	r0, #0
 800891c:	bd38      	pop	{r3, r4, r5, pc}
 800891e:	bf00      	nop
 8008920:	080098c4 	.word	0x080098c4
 8008924:	080098e4 	.word	0x080098e4
 8008928:	080098a4 	.word	0x080098a4

0800892c <std>:
 800892c:	2300      	movs	r3, #0
 800892e:	b510      	push	{r4, lr}
 8008930:	4604      	mov	r4, r0
 8008932:	e9c0 3300 	strd	r3, r3, [r0]
 8008936:	6083      	str	r3, [r0, #8]
 8008938:	8181      	strh	r1, [r0, #12]
 800893a:	6643      	str	r3, [r0, #100]	; 0x64
 800893c:	81c2      	strh	r2, [r0, #14]
 800893e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008942:	6183      	str	r3, [r0, #24]
 8008944:	4619      	mov	r1, r3
 8008946:	2208      	movs	r2, #8
 8008948:	305c      	adds	r0, #92	; 0x5c
 800894a:	f7ff fd43 	bl	80083d4 <memset>
 800894e:	4b05      	ldr	r3, [pc, #20]	; (8008964 <std+0x38>)
 8008950:	6263      	str	r3, [r4, #36]	; 0x24
 8008952:	4b05      	ldr	r3, [pc, #20]	; (8008968 <std+0x3c>)
 8008954:	62a3      	str	r3, [r4, #40]	; 0x28
 8008956:	4b05      	ldr	r3, [pc, #20]	; (800896c <std+0x40>)
 8008958:	62e3      	str	r3, [r4, #44]	; 0x2c
 800895a:	4b05      	ldr	r3, [pc, #20]	; (8008970 <std+0x44>)
 800895c:	6224      	str	r4, [r4, #32]
 800895e:	6323      	str	r3, [r4, #48]	; 0x30
 8008960:	bd10      	pop	{r4, pc}
 8008962:	bf00      	nop
 8008964:	0800911d 	.word	0x0800911d
 8008968:	0800913f 	.word	0x0800913f
 800896c:	08009177 	.word	0x08009177
 8008970:	0800919b 	.word	0x0800919b

08008974 <_cleanup_r>:
 8008974:	4901      	ldr	r1, [pc, #4]	; (800897c <_cleanup_r+0x8>)
 8008976:	f000 b885 	b.w	8008a84 <_fwalk_reent>
 800897a:	bf00      	nop
 800897c:	080088d9 	.word	0x080088d9

08008980 <__sfmoreglue>:
 8008980:	b570      	push	{r4, r5, r6, lr}
 8008982:	1e4a      	subs	r2, r1, #1
 8008984:	2568      	movs	r5, #104	; 0x68
 8008986:	4355      	muls	r5, r2
 8008988:	460e      	mov	r6, r1
 800898a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800898e:	f7ff fd77 	bl	8008480 <_malloc_r>
 8008992:	4604      	mov	r4, r0
 8008994:	b140      	cbz	r0, 80089a8 <__sfmoreglue+0x28>
 8008996:	2100      	movs	r1, #0
 8008998:	e9c0 1600 	strd	r1, r6, [r0]
 800899c:	300c      	adds	r0, #12
 800899e:	60a0      	str	r0, [r4, #8]
 80089a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80089a4:	f7ff fd16 	bl	80083d4 <memset>
 80089a8:	4620      	mov	r0, r4
 80089aa:	bd70      	pop	{r4, r5, r6, pc}

080089ac <__sinit>:
 80089ac:	6983      	ldr	r3, [r0, #24]
 80089ae:	b510      	push	{r4, lr}
 80089b0:	4604      	mov	r4, r0
 80089b2:	bb33      	cbnz	r3, 8008a02 <__sinit+0x56>
 80089b4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80089b8:	6503      	str	r3, [r0, #80]	; 0x50
 80089ba:	4b12      	ldr	r3, [pc, #72]	; (8008a04 <__sinit+0x58>)
 80089bc:	4a12      	ldr	r2, [pc, #72]	; (8008a08 <__sinit+0x5c>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6282      	str	r2, [r0, #40]	; 0x28
 80089c2:	4298      	cmp	r0, r3
 80089c4:	bf04      	itt	eq
 80089c6:	2301      	moveq	r3, #1
 80089c8:	6183      	streq	r3, [r0, #24]
 80089ca:	f000 f81f 	bl	8008a0c <__sfp>
 80089ce:	6060      	str	r0, [r4, #4]
 80089d0:	4620      	mov	r0, r4
 80089d2:	f000 f81b 	bl	8008a0c <__sfp>
 80089d6:	60a0      	str	r0, [r4, #8]
 80089d8:	4620      	mov	r0, r4
 80089da:	f000 f817 	bl	8008a0c <__sfp>
 80089de:	2200      	movs	r2, #0
 80089e0:	60e0      	str	r0, [r4, #12]
 80089e2:	2104      	movs	r1, #4
 80089e4:	6860      	ldr	r0, [r4, #4]
 80089e6:	f7ff ffa1 	bl	800892c <std>
 80089ea:	2201      	movs	r2, #1
 80089ec:	2109      	movs	r1, #9
 80089ee:	68a0      	ldr	r0, [r4, #8]
 80089f0:	f7ff ff9c 	bl	800892c <std>
 80089f4:	2202      	movs	r2, #2
 80089f6:	2112      	movs	r1, #18
 80089f8:	68e0      	ldr	r0, [r4, #12]
 80089fa:	f7ff ff97 	bl	800892c <std>
 80089fe:	2301      	movs	r3, #1
 8008a00:	61a3      	str	r3, [r4, #24]
 8008a02:	bd10      	pop	{r4, pc}
 8008a04:	080098a0 	.word	0x080098a0
 8008a08:	08008975 	.word	0x08008975

08008a0c <__sfp>:
 8008a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a0e:	4b1b      	ldr	r3, [pc, #108]	; (8008a7c <__sfp+0x70>)
 8008a10:	681e      	ldr	r6, [r3, #0]
 8008a12:	69b3      	ldr	r3, [r6, #24]
 8008a14:	4607      	mov	r7, r0
 8008a16:	b913      	cbnz	r3, 8008a1e <__sfp+0x12>
 8008a18:	4630      	mov	r0, r6
 8008a1a:	f7ff ffc7 	bl	80089ac <__sinit>
 8008a1e:	3648      	adds	r6, #72	; 0x48
 8008a20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008a24:	3b01      	subs	r3, #1
 8008a26:	d503      	bpl.n	8008a30 <__sfp+0x24>
 8008a28:	6833      	ldr	r3, [r6, #0]
 8008a2a:	b133      	cbz	r3, 8008a3a <__sfp+0x2e>
 8008a2c:	6836      	ldr	r6, [r6, #0]
 8008a2e:	e7f7      	b.n	8008a20 <__sfp+0x14>
 8008a30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008a34:	b16d      	cbz	r5, 8008a52 <__sfp+0x46>
 8008a36:	3468      	adds	r4, #104	; 0x68
 8008a38:	e7f4      	b.n	8008a24 <__sfp+0x18>
 8008a3a:	2104      	movs	r1, #4
 8008a3c:	4638      	mov	r0, r7
 8008a3e:	f7ff ff9f 	bl	8008980 <__sfmoreglue>
 8008a42:	6030      	str	r0, [r6, #0]
 8008a44:	2800      	cmp	r0, #0
 8008a46:	d1f1      	bne.n	8008a2c <__sfp+0x20>
 8008a48:	230c      	movs	r3, #12
 8008a4a:	603b      	str	r3, [r7, #0]
 8008a4c:	4604      	mov	r4, r0
 8008a4e:	4620      	mov	r0, r4
 8008a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a52:	4b0b      	ldr	r3, [pc, #44]	; (8008a80 <__sfp+0x74>)
 8008a54:	6665      	str	r5, [r4, #100]	; 0x64
 8008a56:	e9c4 5500 	strd	r5, r5, [r4]
 8008a5a:	60a5      	str	r5, [r4, #8]
 8008a5c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008a60:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008a64:	2208      	movs	r2, #8
 8008a66:	4629      	mov	r1, r5
 8008a68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008a6c:	f7ff fcb2 	bl	80083d4 <memset>
 8008a70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008a74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008a78:	e7e9      	b.n	8008a4e <__sfp+0x42>
 8008a7a:	bf00      	nop
 8008a7c:	080098a0 	.word	0x080098a0
 8008a80:	ffff0001 	.word	0xffff0001

08008a84 <_fwalk_reent>:
 8008a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a88:	4680      	mov	r8, r0
 8008a8a:	4689      	mov	r9, r1
 8008a8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a90:	2600      	movs	r6, #0
 8008a92:	b914      	cbnz	r4, 8008a9a <_fwalk_reent+0x16>
 8008a94:	4630      	mov	r0, r6
 8008a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a9a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008a9e:	3f01      	subs	r7, #1
 8008aa0:	d501      	bpl.n	8008aa6 <_fwalk_reent+0x22>
 8008aa2:	6824      	ldr	r4, [r4, #0]
 8008aa4:	e7f5      	b.n	8008a92 <_fwalk_reent+0xe>
 8008aa6:	89ab      	ldrh	r3, [r5, #12]
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d907      	bls.n	8008abc <_fwalk_reent+0x38>
 8008aac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	d003      	beq.n	8008abc <_fwalk_reent+0x38>
 8008ab4:	4629      	mov	r1, r5
 8008ab6:	4640      	mov	r0, r8
 8008ab8:	47c8      	blx	r9
 8008aba:	4306      	orrs	r6, r0
 8008abc:	3568      	adds	r5, #104	; 0x68
 8008abe:	e7ee      	b.n	8008a9e <_fwalk_reent+0x1a>

08008ac0 <__swhatbuf_r>:
 8008ac0:	b570      	push	{r4, r5, r6, lr}
 8008ac2:	460e      	mov	r6, r1
 8008ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ac8:	2900      	cmp	r1, #0
 8008aca:	b096      	sub	sp, #88	; 0x58
 8008acc:	4614      	mov	r4, r2
 8008ace:	461d      	mov	r5, r3
 8008ad0:	da07      	bge.n	8008ae2 <__swhatbuf_r+0x22>
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	602b      	str	r3, [r5, #0]
 8008ad6:	89b3      	ldrh	r3, [r6, #12]
 8008ad8:	061a      	lsls	r2, r3, #24
 8008ada:	d410      	bmi.n	8008afe <__swhatbuf_r+0x3e>
 8008adc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ae0:	e00e      	b.n	8008b00 <__swhatbuf_r+0x40>
 8008ae2:	466a      	mov	r2, sp
 8008ae4:	f000 fb80 	bl	80091e8 <_fstat_r>
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	dbf2      	blt.n	8008ad2 <__swhatbuf_r+0x12>
 8008aec:	9a01      	ldr	r2, [sp, #4]
 8008aee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008af2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008af6:	425a      	negs	r2, r3
 8008af8:	415a      	adcs	r2, r3
 8008afa:	602a      	str	r2, [r5, #0]
 8008afc:	e7ee      	b.n	8008adc <__swhatbuf_r+0x1c>
 8008afe:	2340      	movs	r3, #64	; 0x40
 8008b00:	2000      	movs	r0, #0
 8008b02:	6023      	str	r3, [r4, #0]
 8008b04:	b016      	add	sp, #88	; 0x58
 8008b06:	bd70      	pop	{r4, r5, r6, pc}

08008b08 <__smakebuf_r>:
 8008b08:	898b      	ldrh	r3, [r1, #12]
 8008b0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b0c:	079d      	lsls	r5, r3, #30
 8008b0e:	4606      	mov	r6, r0
 8008b10:	460c      	mov	r4, r1
 8008b12:	d507      	bpl.n	8008b24 <__smakebuf_r+0x1c>
 8008b14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b18:	6023      	str	r3, [r4, #0]
 8008b1a:	6123      	str	r3, [r4, #16]
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	6163      	str	r3, [r4, #20]
 8008b20:	b002      	add	sp, #8
 8008b22:	bd70      	pop	{r4, r5, r6, pc}
 8008b24:	ab01      	add	r3, sp, #4
 8008b26:	466a      	mov	r2, sp
 8008b28:	f7ff ffca 	bl	8008ac0 <__swhatbuf_r>
 8008b2c:	9900      	ldr	r1, [sp, #0]
 8008b2e:	4605      	mov	r5, r0
 8008b30:	4630      	mov	r0, r6
 8008b32:	f7ff fca5 	bl	8008480 <_malloc_r>
 8008b36:	b948      	cbnz	r0, 8008b4c <__smakebuf_r+0x44>
 8008b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b3c:	059a      	lsls	r2, r3, #22
 8008b3e:	d4ef      	bmi.n	8008b20 <__smakebuf_r+0x18>
 8008b40:	f023 0303 	bic.w	r3, r3, #3
 8008b44:	f043 0302 	orr.w	r3, r3, #2
 8008b48:	81a3      	strh	r3, [r4, #12]
 8008b4a:	e7e3      	b.n	8008b14 <__smakebuf_r+0xc>
 8008b4c:	4b0d      	ldr	r3, [pc, #52]	; (8008b84 <__smakebuf_r+0x7c>)
 8008b4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008b50:	89a3      	ldrh	r3, [r4, #12]
 8008b52:	6020      	str	r0, [r4, #0]
 8008b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b58:	81a3      	strh	r3, [r4, #12]
 8008b5a:	9b00      	ldr	r3, [sp, #0]
 8008b5c:	6163      	str	r3, [r4, #20]
 8008b5e:	9b01      	ldr	r3, [sp, #4]
 8008b60:	6120      	str	r0, [r4, #16]
 8008b62:	b15b      	cbz	r3, 8008b7c <__smakebuf_r+0x74>
 8008b64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b68:	4630      	mov	r0, r6
 8008b6a:	f000 fb4f 	bl	800920c <_isatty_r>
 8008b6e:	b128      	cbz	r0, 8008b7c <__smakebuf_r+0x74>
 8008b70:	89a3      	ldrh	r3, [r4, #12]
 8008b72:	f023 0303 	bic.w	r3, r3, #3
 8008b76:	f043 0301 	orr.w	r3, r3, #1
 8008b7a:	81a3      	strh	r3, [r4, #12]
 8008b7c:	89a3      	ldrh	r3, [r4, #12]
 8008b7e:	431d      	orrs	r5, r3
 8008b80:	81a5      	strh	r5, [r4, #12]
 8008b82:	e7cd      	b.n	8008b20 <__smakebuf_r+0x18>
 8008b84:	08008975 	.word	0x08008975

08008b88 <__malloc_lock>:
 8008b88:	4770      	bx	lr

08008b8a <__malloc_unlock>:
 8008b8a:	4770      	bx	lr

08008b8c <__sfputc_r>:
 8008b8c:	6893      	ldr	r3, [r2, #8]
 8008b8e:	3b01      	subs	r3, #1
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	b410      	push	{r4}
 8008b94:	6093      	str	r3, [r2, #8]
 8008b96:	da08      	bge.n	8008baa <__sfputc_r+0x1e>
 8008b98:	6994      	ldr	r4, [r2, #24]
 8008b9a:	42a3      	cmp	r3, r4
 8008b9c:	db01      	blt.n	8008ba2 <__sfputc_r+0x16>
 8008b9e:	290a      	cmp	r1, #10
 8008ba0:	d103      	bne.n	8008baa <__sfputc_r+0x1e>
 8008ba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ba6:	f7ff bd51 	b.w	800864c <__swbuf_r>
 8008baa:	6813      	ldr	r3, [r2, #0]
 8008bac:	1c58      	adds	r0, r3, #1
 8008bae:	6010      	str	r0, [r2, #0]
 8008bb0:	7019      	strb	r1, [r3, #0]
 8008bb2:	4608      	mov	r0, r1
 8008bb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <__sfputs_r>:
 8008bba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bbc:	4606      	mov	r6, r0
 8008bbe:	460f      	mov	r7, r1
 8008bc0:	4614      	mov	r4, r2
 8008bc2:	18d5      	adds	r5, r2, r3
 8008bc4:	42ac      	cmp	r4, r5
 8008bc6:	d101      	bne.n	8008bcc <__sfputs_r+0x12>
 8008bc8:	2000      	movs	r0, #0
 8008bca:	e007      	b.n	8008bdc <__sfputs_r+0x22>
 8008bcc:	463a      	mov	r2, r7
 8008bce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	f7ff ffda 	bl	8008b8c <__sfputc_r>
 8008bd8:	1c43      	adds	r3, r0, #1
 8008bda:	d1f3      	bne.n	8008bc4 <__sfputs_r+0xa>
 8008bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008be0 <_vfiprintf_r>:
 8008be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be4:	460c      	mov	r4, r1
 8008be6:	b09d      	sub	sp, #116	; 0x74
 8008be8:	4617      	mov	r7, r2
 8008bea:	461d      	mov	r5, r3
 8008bec:	4606      	mov	r6, r0
 8008bee:	b118      	cbz	r0, 8008bf8 <_vfiprintf_r+0x18>
 8008bf0:	6983      	ldr	r3, [r0, #24]
 8008bf2:	b90b      	cbnz	r3, 8008bf8 <_vfiprintf_r+0x18>
 8008bf4:	f7ff feda 	bl	80089ac <__sinit>
 8008bf8:	4b7c      	ldr	r3, [pc, #496]	; (8008dec <_vfiprintf_r+0x20c>)
 8008bfa:	429c      	cmp	r4, r3
 8008bfc:	d158      	bne.n	8008cb0 <_vfiprintf_r+0xd0>
 8008bfe:	6874      	ldr	r4, [r6, #4]
 8008c00:	89a3      	ldrh	r3, [r4, #12]
 8008c02:	0718      	lsls	r0, r3, #28
 8008c04:	d55e      	bpl.n	8008cc4 <_vfiprintf_r+0xe4>
 8008c06:	6923      	ldr	r3, [r4, #16]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d05b      	beq.n	8008cc4 <_vfiprintf_r+0xe4>
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c10:	2320      	movs	r3, #32
 8008c12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c16:	2330      	movs	r3, #48	; 0x30
 8008c18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c1c:	9503      	str	r5, [sp, #12]
 8008c1e:	f04f 0b01 	mov.w	fp, #1
 8008c22:	46b8      	mov	r8, r7
 8008c24:	4645      	mov	r5, r8
 8008c26:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008c2a:	b10b      	cbz	r3, 8008c30 <_vfiprintf_r+0x50>
 8008c2c:	2b25      	cmp	r3, #37	; 0x25
 8008c2e:	d154      	bne.n	8008cda <_vfiprintf_r+0xfa>
 8008c30:	ebb8 0a07 	subs.w	sl, r8, r7
 8008c34:	d00b      	beq.n	8008c4e <_vfiprintf_r+0x6e>
 8008c36:	4653      	mov	r3, sl
 8008c38:	463a      	mov	r2, r7
 8008c3a:	4621      	mov	r1, r4
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	f7ff ffbc 	bl	8008bba <__sfputs_r>
 8008c42:	3001      	adds	r0, #1
 8008c44:	f000 80c2 	beq.w	8008dcc <_vfiprintf_r+0x1ec>
 8008c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c4a:	4453      	add	r3, sl
 8008c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c4e:	f898 3000 	ldrb.w	r3, [r8]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	f000 80ba 	beq.w	8008dcc <_vfiprintf_r+0x1ec>
 8008c58:	2300      	movs	r3, #0
 8008c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c62:	9304      	str	r3, [sp, #16]
 8008c64:	9307      	str	r3, [sp, #28]
 8008c66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c6a:	931a      	str	r3, [sp, #104]	; 0x68
 8008c6c:	46a8      	mov	r8, r5
 8008c6e:	2205      	movs	r2, #5
 8008c70:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008c74:	485e      	ldr	r0, [pc, #376]	; (8008df0 <_vfiprintf_r+0x210>)
 8008c76:	f7f7 faab 	bl	80001d0 <memchr>
 8008c7a:	9b04      	ldr	r3, [sp, #16]
 8008c7c:	bb78      	cbnz	r0, 8008cde <_vfiprintf_r+0xfe>
 8008c7e:	06d9      	lsls	r1, r3, #27
 8008c80:	bf44      	itt	mi
 8008c82:	2220      	movmi	r2, #32
 8008c84:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008c88:	071a      	lsls	r2, r3, #28
 8008c8a:	bf44      	itt	mi
 8008c8c:	222b      	movmi	r2, #43	; 0x2b
 8008c8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008c92:	782a      	ldrb	r2, [r5, #0]
 8008c94:	2a2a      	cmp	r2, #42	; 0x2a
 8008c96:	d02a      	beq.n	8008cee <_vfiprintf_r+0x10e>
 8008c98:	9a07      	ldr	r2, [sp, #28]
 8008c9a:	46a8      	mov	r8, r5
 8008c9c:	2000      	movs	r0, #0
 8008c9e:	250a      	movs	r5, #10
 8008ca0:	4641      	mov	r1, r8
 8008ca2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ca6:	3b30      	subs	r3, #48	; 0x30
 8008ca8:	2b09      	cmp	r3, #9
 8008caa:	d969      	bls.n	8008d80 <_vfiprintf_r+0x1a0>
 8008cac:	b360      	cbz	r0, 8008d08 <_vfiprintf_r+0x128>
 8008cae:	e024      	b.n	8008cfa <_vfiprintf_r+0x11a>
 8008cb0:	4b50      	ldr	r3, [pc, #320]	; (8008df4 <_vfiprintf_r+0x214>)
 8008cb2:	429c      	cmp	r4, r3
 8008cb4:	d101      	bne.n	8008cba <_vfiprintf_r+0xda>
 8008cb6:	68b4      	ldr	r4, [r6, #8]
 8008cb8:	e7a2      	b.n	8008c00 <_vfiprintf_r+0x20>
 8008cba:	4b4f      	ldr	r3, [pc, #316]	; (8008df8 <_vfiprintf_r+0x218>)
 8008cbc:	429c      	cmp	r4, r3
 8008cbe:	bf08      	it	eq
 8008cc0:	68f4      	ldreq	r4, [r6, #12]
 8008cc2:	e79d      	b.n	8008c00 <_vfiprintf_r+0x20>
 8008cc4:	4621      	mov	r1, r4
 8008cc6:	4630      	mov	r0, r6
 8008cc8:	f7ff fd12 	bl	80086f0 <__swsetup_r>
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	d09d      	beq.n	8008c0c <_vfiprintf_r+0x2c>
 8008cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd4:	b01d      	add	sp, #116	; 0x74
 8008cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cda:	46a8      	mov	r8, r5
 8008cdc:	e7a2      	b.n	8008c24 <_vfiprintf_r+0x44>
 8008cde:	4a44      	ldr	r2, [pc, #272]	; (8008df0 <_vfiprintf_r+0x210>)
 8008ce0:	1a80      	subs	r0, r0, r2
 8008ce2:	fa0b f000 	lsl.w	r0, fp, r0
 8008ce6:	4318      	orrs	r0, r3
 8008ce8:	9004      	str	r0, [sp, #16]
 8008cea:	4645      	mov	r5, r8
 8008cec:	e7be      	b.n	8008c6c <_vfiprintf_r+0x8c>
 8008cee:	9a03      	ldr	r2, [sp, #12]
 8008cf0:	1d11      	adds	r1, r2, #4
 8008cf2:	6812      	ldr	r2, [r2, #0]
 8008cf4:	9103      	str	r1, [sp, #12]
 8008cf6:	2a00      	cmp	r2, #0
 8008cf8:	db01      	blt.n	8008cfe <_vfiprintf_r+0x11e>
 8008cfa:	9207      	str	r2, [sp, #28]
 8008cfc:	e004      	b.n	8008d08 <_vfiprintf_r+0x128>
 8008cfe:	4252      	negs	r2, r2
 8008d00:	f043 0302 	orr.w	r3, r3, #2
 8008d04:	9207      	str	r2, [sp, #28]
 8008d06:	9304      	str	r3, [sp, #16]
 8008d08:	f898 3000 	ldrb.w	r3, [r8]
 8008d0c:	2b2e      	cmp	r3, #46	; 0x2e
 8008d0e:	d10e      	bne.n	8008d2e <_vfiprintf_r+0x14e>
 8008d10:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008d14:	2b2a      	cmp	r3, #42	; 0x2a
 8008d16:	d138      	bne.n	8008d8a <_vfiprintf_r+0x1aa>
 8008d18:	9b03      	ldr	r3, [sp, #12]
 8008d1a:	1d1a      	adds	r2, r3, #4
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	9203      	str	r2, [sp, #12]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	bfb8      	it	lt
 8008d24:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d28:	f108 0802 	add.w	r8, r8, #2
 8008d2c:	9305      	str	r3, [sp, #20]
 8008d2e:	4d33      	ldr	r5, [pc, #204]	; (8008dfc <_vfiprintf_r+0x21c>)
 8008d30:	f898 1000 	ldrb.w	r1, [r8]
 8008d34:	2203      	movs	r2, #3
 8008d36:	4628      	mov	r0, r5
 8008d38:	f7f7 fa4a 	bl	80001d0 <memchr>
 8008d3c:	b140      	cbz	r0, 8008d50 <_vfiprintf_r+0x170>
 8008d3e:	2340      	movs	r3, #64	; 0x40
 8008d40:	1b40      	subs	r0, r0, r5
 8008d42:	fa03 f000 	lsl.w	r0, r3, r0
 8008d46:	9b04      	ldr	r3, [sp, #16]
 8008d48:	4303      	orrs	r3, r0
 8008d4a:	f108 0801 	add.w	r8, r8, #1
 8008d4e:	9304      	str	r3, [sp, #16]
 8008d50:	f898 1000 	ldrb.w	r1, [r8]
 8008d54:	482a      	ldr	r0, [pc, #168]	; (8008e00 <_vfiprintf_r+0x220>)
 8008d56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d5a:	2206      	movs	r2, #6
 8008d5c:	f108 0701 	add.w	r7, r8, #1
 8008d60:	f7f7 fa36 	bl	80001d0 <memchr>
 8008d64:	2800      	cmp	r0, #0
 8008d66:	d037      	beq.n	8008dd8 <_vfiprintf_r+0x1f8>
 8008d68:	4b26      	ldr	r3, [pc, #152]	; (8008e04 <_vfiprintf_r+0x224>)
 8008d6a:	bb1b      	cbnz	r3, 8008db4 <_vfiprintf_r+0x1d4>
 8008d6c:	9b03      	ldr	r3, [sp, #12]
 8008d6e:	3307      	adds	r3, #7
 8008d70:	f023 0307 	bic.w	r3, r3, #7
 8008d74:	3308      	adds	r3, #8
 8008d76:	9303      	str	r3, [sp, #12]
 8008d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d7a:	444b      	add	r3, r9
 8008d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d7e:	e750      	b.n	8008c22 <_vfiprintf_r+0x42>
 8008d80:	fb05 3202 	mla	r2, r5, r2, r3
 8008d84:	2001      	movs	r0, #1
 8008d86:	4688      	mov	r8, r1
 8008d88:	e78a      	b.n	8008ca0 <_vfiprintf_r+0xc0>
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	f108 0801 	add.w	r8, r8, #1
 8008d90:	9305      	str	r3, [sp, #20]
 8008d92:	4619      	mov	r1, r3
 8008d94:	250a      	movs	r5, #10
 8008d96:	4640      	mov	r0, r8
 8008d98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d9c:	3a30      	subs	r2, #48	; 0x30
 8008d9e:	2a09      	cmp	r2, #9
 8008da0:	d903      	bls.n	8008daa <_vfiprintf_r+0x1ca>
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d0c3      	beq.n	8008d2e <_vfiprintf_r+0x14e>
 8008da6:	9105      	str	r1, [sp, #20]
 8008da8:	e7c1      	b.n	8008d2e <_vfiprintf_r+0x14e>
 8008daa:	fb05 2101 	mla	r1, r5, r1, r2
 8008dae:	2301      	movs	r3, #1
 8008db0:	4680      	mov	r8, r0
 8008db2:	e7f0      	b.n	8008d96 <_vfiprintf_r+0x1b6>
 8008db4:	ab03      	add	r3, sp, #12
 8008db6:	9300      	str	r3, [sp, #0]
 8008db8:	4622      	mov	r2, r4
 8008dba:	4b13      	ldr	r3, [pc, #76]	; (8008e08 <_vfiprintf_r+0x228>)
 8008dbc:	a904      	add	r1, sp, #16
 8008dbe:	4630      	mov	r0, r6
 8008dc0:	f3af 8000 	nop.w
 8008dc4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008dc8:	4681      	mov	r9, r0
 8008dca:	d1d5      	bne.n	8008d78 <_vfiprintf_r+0x198>
 8008dcc:	89a3      	ldrh	r3, [r4, #12]
 8008dce:	065b      	lsls	r3, r3, #25
 8008dd0:	f53f af7e 	bmi.w	8008cd0 <_vfiprintf_r+0xf0>
 8008dd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dd6:	e77d      	b.n	8008cd4 <_vfiprintf_r+0xf4>
 8008dd8:	ab03      	add	r3, sp, #12
 8008dda:	9300      	str	r3, [sp, #0]
 8008ddc:	4622      	mov	r2, r4
 8008dde:	4b0a      	ldr	r3, [pc, #40]	; (8008e08 <_vfiprintf_r+0x228>)
 8008de0:	a904      	add	r1, sp, #16
 8008de2:	4630      	mov	r0, r6
 8008de4:	f000 f888 	bl	8008ef8 <_printf_i>
 8008de8:	e7ec      	b.n	8008dc4 <_vfiprintf_r+0x1e4>
 8008dea:	bf00      	nop
 8008dec:	080098c4 	.word	0x080098c4
 8008df0:	08009904 	.word	0x08009904
 8008df4:	080098e4 	.word	0x080098e4
 8008df8:	080098a4 	.word	0x080098a4
 8008dfc:	0800990a 	.word	0x0800990a
 8008e00:	0800990e 	.word	0x0800990e
 8008e04:	00000000 	.word	0x00000000
 8008e08:	08008bbb 	.word	0x08008bbb

08008e0c <_printf_common>:
 8008e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e10:	4691      	mov	r9, r2
 8008e12:	461f      	mov	r7, r3
 8008e14:	688a      	ldr	r2, [r1, #8]
 8008e16:	690b      	ldr	r3, [r1, #16]
 8008e18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	bfb8      	it	lt
 8008e20:	4613      	movlt	r3, r2
 8008e22:	f8c9 3000 	str.w	r3, [r9]
 8008e26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e2a:	4606      	mov	r6, r0
 8008e2c:	460c      	mov	r4, r1
 8008e2e:	b112      	cbz	r2, 8008e36 <_printf_common+0x2a>
 8008e30:	3301      	adds	r3, #1
 8008e32:	f8c9 3000 	str.w	r3, [r9]
 8008e36:	6823      	ldr	r3, [r4, #0]
 8008e38:	0699      	lsls	r1, r3, #26
 8008e3a:	bf42      	ittt	mi
 8008e3c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008e40:	3302      	addmi	r3, #2
 8008e42:	f8c9 3000 	strmi.w	r3, [r9]
 8008e46:	6825      	ldr	r5, [r4, #0]
 8008e48:	f015 0506 	ands.w	r5, r5, #6
 8008e4c:	d107      	bne.n	8008e5e <_printf_common+0x52>
 8008e4e:	f104 0a19 	add.w	sl, r4, #25
 8008e52:	68e3      	ldr	r3, [r4, #12]
 8008e54:	f8d9 2000 	ldr.w	r2, [r9]
 8008e58:	1a9b      	subs	r3, r3, r2
 8008e5a:	42ab      	cmp	r3, r5
 8008e5c:	dc28      	bgt.n	8008eb0 <_printf_common+0xa4>
 8008e5e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008e62:	6822      	ldr	r2, [r4, #0]
 8008e64:	3300      	adds	r3, #0
 8008e66:	bf18      	it	ne
 8008e68:	2301      	movne	r3, #1
 8008e6a:	0692      	lsls	r2, r2, #26
 8008e6c:	d42d      	bmi.n	8008eca <_printf_common+0xbe>
 8008e6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e72:	4639      	mov	r1, r7
 8008e74:	4630      	mov	r0, r6
 8008e76:	47c0      	blx	r8
 8008e78:	3001      	adds	r0, #1
 8008e7a:	d020      	beq.n	8008ebe <_printf_common+0xb2>
 8008e7c:	6823      	ldr	r3, [r4, #0]
 8008e7e:	68e5      	ldr	r5, [r4, #12]
 8008e80:	f8d9 2000 	ldr.w	r2, [r9]
 8008e84:	f003 0306 	and.w	r3, r3, #6
 8008e88:	2b04      	cmp	r3, #4
 8008e8a:	bf08      	it	eq
 8008e8c:	1aad      	subeq	r5, r5, r2
 8008e8e:	68a3      	ldr	r3, [r4, #8]
 8008e90:	6922      	ldr	r2, [r4, #16]
 8008e92:	bf0c      	ite	eq
 8008e94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e98:	2500      	movne	r5, #0
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	bfc4      	itt	gt
 8008e9e:	1a9b      	subgt	r3, r3, r2
 8008ea0:	18ed      	addgt	r5, r5, r3
 8008ea2:	f04f 0900 	mov.w	r9, #0
 8008ea6:	341a      	adds	r4, #26
 8008ea8:	454d      	cmp	r5, r9
 8008eaa:	d11a      	bne.n	8008ee2 <_printf_common+0xd6>
 8008eac:	2000      	movs	r0, #0
 8008eae:	e008      	b.n	8008ec2 <_printf_common+0xb6>
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	4652      	mov	r2, sl
 8008eb4:	4639      	mov	r1, r7
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	47c0      	blx	r8
 8008eba:	3001      	adds	r0, #1
 8008ebc:	d103      	bne.n	8008ec6 <_printf_common+0xba>
 8008ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ec6:	3501      	adds	r5, #1
 8008ec8:	e7c3      	b.n	8008e52 <_printf_common+0x46>
 8008eca:	18e1      	adds	r1, r4, r3
 8008ecc:	1c5a      	adds	r2, r3, #1
 8008ece:	2030      	movs	r0, #48	; 0x30
 8008ed0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ed4:	4422      	add	r2, r4
 8008ed6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008eda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ede:	3302      	adds	r3, #2
 8008ee0:	e7c5      	b.n	8008e6e <_printf_common+0x62>
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	4622      	mov	r2, r4
 8008ee6:	4639      	mov	r1, r7
 8008ee8:	4630      	mov	r0, r6
 8008eea:	47c0      	blx	r8
 8008eec:	3001      	adds	r0, #1
 8008eee:	d0e6      	beq.n	8008ebe <_printf_common+0xb2>
 8008ef0:	f109 0901 	add.w	r9, r9, #1
 8008ef4:	e7d8      	b.n	8008ea8 <_printf_common+0x9c>
	...

08008ef8 <_printf_i>:
 8008ef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008efc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008f00:	460c      	mov	r4, r1
 8008f02:	7e09      	ldrb	r1, [r1, #24]
 8008f04:	b085      	sub	sp, #20
 8008f06:	296e      	cmp	r1, #110	; 0x6e
 8008f08:	4617      	mov	r7, r2
 8008f0a:	4606      	mov	r6, r0
 8008f0c:	4698      	mov	r8, r3
 8008f0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f10:	f000 80b3 	beq.w	800907a <_printf_i+0x182>
 8008f14:	d822      	bhi.n	8008f5c <_printf_i+0x64>
 8008f16:	2963      	cmp	r1, #99	; 0x63
 8008f18:	d036      	beq.n	8008f88 <_printf_i+0x90>
 8008f1a:	d80a      	bhi.n	8008f32 <_printf_i+0x3a>
 8008f1c:	2900      	cmp	r1, #0
 8008f1e:	f000 80b9 	beq.w	8009094 <_printf_i+0x19c>
 8008f22:	2958      	cmp	r1, #88	; 0x58
 8008f24:	f000 8083 	beq.w	800902e <_printf_i+0x136>
 8008f28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f2c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008f30:	e032      	b.n	8008f98 <_printf_i+0xa0>
 8008f32:	2964      	cmp	r1, #100	; 0x64
 8008f34:	d001      	beq.n	8008f3a <_printf_i+0x42>
 8008f36:	2969      	cmp	r1, #105	; 0x69
 8008f38:	d1f6      	bne.n	8008f28 <_printf_i+0x30>
 8008f3a:	6820      	ldr	r0, [r4, #0]
 8008f3c:	6813      	ldr	r3, [r2, #0]
 8008f3e:	0605      	lsls	r5, r0, #24
 8008f40:	f103 0104 	add.w	r1, r3, #4
 8008f44:	d52a      	bpl.n	8008f9c <_printf_i+0xa4>
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	6011      	str	r1, [r2, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	da03      	bge.n	8008f56 <_printf_i+0x5e>
 8008f4e:	222d      	movs	r2, #45	; 0x2d
 8008f50:	425b      	negs	r3, r3
 8008f52:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008f56:	486f      	ldr	r0, [pc, #444]	; (8009114 <_printf_i+0x21c>)
 8008f58:	220a      	movs	r2, #10
 8008f5a:	e039      	b.n	8008fd0 <_printf_i+0xd8>
 8008f5c:	2973      	cmp	r1, #115	; 0x73
 8008f5e:	f000 809d 	beq.w	800909c <_printf_i+0x1a4>
 8008f62:	d808      	bhi.n	8008f76 <_printf_i+0x7e>
 8008f64:	296f      	cmp	r1, #111	; 0x6f
 8008f66:	d020      	beq.n	8008faa <_printf_i+0xb2>
 8008f68:	2970      	cmp	r1, #112	; 0x70
 8008f6a:	d1dd      	bne.n	8008f28 <_printf_i+0x30>
 8008f6c:	6823      	ldr	r3, [r4, #0]
 8008f6e:	f043 0320 	orr.w	r3, r3, #32
 8008f72:	6023      	str	r3, [r4, #0]
 8008f74:	e003      	b.n	8008f7e <_printf_i+0x86>
 8008f76:	2975      	cmp	r1, #117	; 0x75
 8008f78:	d017      	beq.n	8008faa <_printf_i+0xb2>
 8008f7a:	2978      	cmp	r1, #120	; 0x78
 8008f7c:	d1d4      	bne.n	8008f28 <_printf_i+0x30>
 8008f7e:	2378      	movs	r3, #120	; 0x78
 8008f80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f84:	4864      	ldr	r0, [pc, #400]	; (8009118 <_printf_i+0x220>)
 8008f86:	e055      	b.n	8009034 <_printf_i+0x13c>
 8008f88:	6813      	ldr	r3, [r2, #0]
 8008f8a:	1d19      	adds	r1, r3, #4
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	6011      	str	r1, [r2, #0]
 8008f90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e08c      	b.n	80090b6 <_printf_i+0x1be>
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	6011      	str	r1, [r2, #0]
 8008fa0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008fa4:	bf18      	it	ne
 8008fa6:	b21b      	sxthne	r3, r3
 8008fa8:	e7cf      	b.n	8008f4a <_printf_i+0x52>
 8008faa:	6813      	ldr	r3, [r2, #0]
 8008fac:	6825      	ldr	r5, [r4, #0]
 8008fae:	1d18      	adds	r0, r3, #4
 8008fb0:	6010      	str	r0, [r2, #0]
 8008fb2:	0628      	lsls	r0, r5, #24
 8008fb4:	d501      	bpl.n	8008fba <_printf_i+0xc2>
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	e002      	b.n	8008fc0 <_printf_i+0xc8>
 8008fba:	0668      	lsls	r0, r5, #25
 8008fbc:	d5fb      	bpl.n	8008fb6 <_printf_i+0xbe>
 8008fbe:	881b      	ldrh	r3, [r3, #0]
 8008fc0:	4854      	ldr	r0, [pc, #336]	; (8009114 <_printf_i+0x21c>)
 8008fc2:	296f      	cmp	r1, #111	; 0x6f
 8008fc4:	bf14      	ite	ne
 8008fc6:	220a      	movne	r2, #10
 8008fc8:	2208      	moveq	r2, #8
 8008fca:	2100      	movs	r1, #0
 8008fcc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008fd0:	6865      	ldr	r5, [r4, #4]
 8008fd2:	60a5      	str	r5, [r4, #8]
 8008fd4:	2d00      	cmp	r5, #0
 8008fd6:	f2c0 8095 	blt.w	8009104 <_printf_i+0x20c>
 8008fda:	6821      	ldr	r1, [r4, #0]
 8008fdc:	f021 0104 	bic.w	r1, r1, #4
 8008fe0:	6021      	str	r1, [r4, #0]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d13d      	bne.n	8009062 <_printf_i+0x16a>
 8008fe6:	2d00      	cmp	r5, #0
 8008fe8:	f040 808e 	bne.w	8009108 <_printf_i+0x210>
 8008fec:	4665      	mov	r5, ip
 8008fee:	2a08      	cmp	r2, #8
 8008ff0:	d10b      	bne.n	800900a <_printf_i+0x112>
 8008ff2:	6823      	ldr	r3, [r4, #0]
 8008ff4:	07db      	lsls	r3, r3, #31
 8008ff6:	d508      	bpl.n	800900a <_printf_i+0x112>
 8008ff8:	6923      	ldr	r3, [r4, #16]
 8008ffa:	6862      	ldr	r2, [r4, #4]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	bfde      	ittt	le
 8009000:	2330      	movle	r3, #48	; 0x30
 8009002:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009006:	f105 35ff 	addle.w	r5, r5, #4294967295
 800900a:	ebac 0305 	sub.w	r3, ip, r5
 800900e:	6123      	str	r3, [r4, #16]
 8009010:	f8cd 8000 	str.w	r8, [sp]
 8009014:	463b      	mov	r3, r7
 8009016:	aa03      	add	r2, sp, #12
 8009018:	4621      	mov	r1, r4
 800901a:	4630      	mov	r0, r6
 800901c:	f7ff fef6 	bl	8008e0c <_printf_common>
 8009020:	3001      	adds	r0, #1
 8009022:	d14d      	bne.n	80090c0 <_printf_i+0x1c8>
 8009024:	f04f 30ff 	mov.w	r0, #4294967295
 8009028:	b005      	add	sp, #20
 800902a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800902e:	4839      	ldr	r0, [pc, #228]	; (8009114 <_printf_i+0x21c>)
 8009030:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009034:	6813      	ldr	r3, [r2, #0]
 8009036:	6821      	ldr	r1, [r4, #0]
 8009038:	1d1d      	adds	r5, r3, #4
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	6015      	str	r5, [r2, #0]
 800903e:	060a      	lsls	r2, r1, #24
 8009040:	d50b      	bpl.n	800905a <_printf_i+0x162>
 8009042:	07ca      	lsls	r2, r1, #31
 8009044:	bf44      	itt	mi
 8009046:	f041 0120 	orrmi.w	r1, r1, #32
 800904a:	6021      	strmi	r1, [r4, #0]
 800904c:	b91b      	cbnz	r3, 8009056 <_printf_i+0x15e>
 800904e:	6822      	ldr	r2, [r4, #0]
 8009050:	f022 0220 	bic.w	r2, r2, #32
 8009054:	6022      	str	r2, [r4, #0]
 8009056:	2210      	movs	r2, #16
 8009058:	e7b7      	b.n	8008fca <_printf_i+0xd2>
 800905a:	064d      	lsls	r5, r1, #25
 800905c:	bf48      	it	mi
 800905e:	b29b      	uxthmi	r3, r3
 8009060:	e7ef      	b.n	8009042 <_printf_i+0x14a>
 8009062:	4665      	mov	r5, ip
 8009064:	fbb3 f1f2 	udiv	r1, r3, r2
 8009068:	fb02 3311 	mls	r3, r2, r1, r3
 800906c:	5cc3      	ldrb	r3, [r0, r3]
 800906e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009072:	460b      	mov	r3, r1
 8009074:	2900      	cmp	r1, #0
 8009076:	d1f5      	bne.n	8009064 <_printf_i+0x16c>
 8009078:	e7b9      	b.n	8008fee <_printf_i+0xf6>
 800907a:	6813      	ldr	r3, [r2, #0]
 800907c:	6825      	ldr	r5, [r4, #0]
 800907e:	6961      	ldr	r1, [r4, #20]
 8009080:	1d18      	adds	r0, r3, #4
 8009082:	6010      	str	r0, [r2, #0]
 8009084:	0628      	lsls	r0, r5, #24
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	d501      	bpl.n	800908e <_printf_i+0x196>
 800908a:	6019      	str	r1, [r3, #0]
 800908c:	e002      	b.n	8009094 <_printf_i+0x19c>
 800908e:	066a      	lsls	r2, r5, #25
 8009090:	d5fb      	bpl.n	800908a <_printf_i+0x192>
 8009092:	8019      	strh	r1, [r3, #0]
 8009094:	2300      	movs	r3, #0
 8009096:	6123      	str	r3, [r4, #16]
 8009098:	4665      	mov	r5, ip
 800909a:	e7b9      	b.n	8009010 <_printf_i+0x118>
 800909c:	6813      	ldr	r3, [r2, #0]
 800909e:	1d19      	adds	r1, r3, #4
 80090a0:	6011      	str	r1, [r2, #0]
 80090a2:	681d      	ldr	r5, [r3, #0]
 80090a4:	6862      	ldr	r2, [r4, #4]
 80090a6:	2100      	movs	r1, #0
 80090a8:	4628      	mov	r0, r5
 80090aa:	f7f7 f891 	bl	80001d0 <memchr>
 80090ae:	b108      	cbz	r0, 80090b4 <_printf_i+0x1bc>
 80090b0:	1b40      	subs	r0, r0, r5
 80090b2:	6060      	str	r0, [r4, #4]
 80090b4:	6863      	ldr	r3, [r4, #4]
 80090b6:	6123      	str	r3, [r4, #16]
 80090b8:	2300      	movs	r3, #0
 80090ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090be:	e7a7      	b.n	8009010 <_printf_i+0x118>
 80090c0:	6923      	ldr	r3, [r4, #16]
 80090c2:	462a      	mov	r2, r5
 80090c4:	4639      	mov	r1, r7
 80090c6:	4630      	mov	r0, r6
 80090c8:	47c0      	blx	r8
 80090ca:	3001      	adds	r0, #1
 80090cc:	d0aa      	beq.n	8009024 <_printf_i+0x12c>
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	079b      	lsls	r3, r3, #30
 80090d2:	d413      	bmi.n	80090fc <_printf_i+0x204>
 80090d4:	68e0      	ldr	r0, [r4, #12]
 80090d6:	9b03      	ldr	r3, [sp, #12]
 80090d8:	4298      	cmp	r0, r3
 80090da:	bfb8      	it	lt
 80090dc:	4618      	movlt	r0, r3
 80090de:	e7a3      	b.n	8009028 <_printf_i+0x130>
 80090e0:	2301      	movs	r3, #1
 80090e2:	464a      	mov	r2, r9
 80090e4:	4639      	mov	r1, r7
 80090e6:	4630      	mov	r0, r6
 80090e8:	47c0      	blx	r8
 80090ea:	3001      	adds	r0, #1
 80090ec:	d09a      	beq.n	8009024 <_printf_i+0x12c>
 80090ee:	3501      	adds	r5, #1
 80090f0:	68e3      	ldr	r3, [r4, #12]
 80090f2:	9a03      	ldr	r2, [sp, #12]
 80090f4:	1a9b      	subs	r3, r3, r2
 80090f6:	42ab      	cmp	r3, r5
 80090f8:	dcf2      	bgt.n	80090e0 <_printf_i+0x1e8>
 80090fa:	e7eb      	b.n	80090d4 <_printf_i+0x1dc>
 80090fc:	2500      	movs	r5, #0
 80090fe:	f104 0919 	add.w	r9, r4, #25
 8009102:	e7f5      	b.n	80090f0 <_printf_i+0x1f8>
 8009104:	2b00      	cmp	r3, #0
 8009106:	d1ac      	bne.n	8009062 <_printf_i+0x16a>
 8009108:	7803      	ldrb	r3, [r0, #0]
 800910a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800910e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009112:	e76c      	b.n	8008fee <_printf_i+0xf6>
 8009114:	08009915 	.word	0x08009915
 8009118:	08009926 	.word	0x08009926

0800911c <__sread>:
 800911c:	b510      	push	{r4, lr}
 800911e:	460c      	mov	r4, r1
 8009120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009124:	f000 f894 	bl	8009250 <_read_r>
 8009128:	2800      	cmp	r0, #0
 800912a:	bfab      	itete	ge
 800912c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800912e:	89a3      	ldrhlt	r3, [r4, #12]
 8009130:	181b      	addge	r3, r3, r0
 8009132:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009136:	bfac      	ite	ge
 8009138:	6563      	strge	r3, [r4, #84]	; 0x54
 800913a:	81a3      	strhlt	r3, [r4, #12]
 800913c:	bd10      	pop	{r4, pc}

0800913e <__swrite>:
 800913e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009142:	461f      	mov	r7, r3
 8009144:	898b      	ldrh	r3, [r1, #12]
 8009146:	05db      	lsls	r3, r3, #23
 8009148:	4605      	mov	r5, r0
 800914a:	460c      	mov	r4, r1
 800914c:	4616      	mov	r6, r2
 800914e:	d505      	bpl.n	800915c <__swrite+0x1e>
 8009150:	2302      	movs	r3, #2
 8009152:	2200      	movs	r2, #0
 8009154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009158:	f000 f868 	bl	800922c <_lseek_r>
 800915c:	89a3      	ldrh	r3, [r4, #12]
 800915e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009162:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009166:	81a3      	strh	r3, [r4, #12]
 8009168:	4632      	mov	r2, r6
 800916a:	463b      	mov	r3, r7
 800916c:	4628      	mov	r0, r5
 800916e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009172:	f000 b817 	b.w	80091a4 <_write_r>

08009176 <__sseek>:
 8009176:	b510      	push	{r4, lr}
 8009178:	460c      	mov	r4, r1
 800917a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800917e:	f000 f855 	bl	800922c <_lseek_r>
 8009182:	1c43      	adds	r3, r0, #1
 8009184:	89a3      	ldrh	r3, [r4, #12]
 8009186:	bf15      	itete	ne
 8009188:	6560      	strne	r0, [r4, #84]	; 0x54
 800918a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800918e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009192:	81a3      	strheq	r3, [r4, #12]
 8009194:	bf18      	it	ne
 8009196:	81a3      	strhne	r3, [r4, #12]
 8009198:	bd10      	pop	{r4, pc}

0800919a <__sclose>:
 800919a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800919e:	f000 b813 	b.w	80091c8 <_close_r>
	...

080091a4 <_write_r>:
 80091a4:	b538      	push	{r3, r4, r5, lr}
 80091a6:	4c07      	ldr	r4, [pc, #28]	; (80091c4 <_write_r+0x20>)
 80091a8:	4605      	mov	r5, r0
 80091aa:	4608      	mov	r0, r1
 80091ac:	4611      	mov	r1, r2
 80091ae:	2200      	movs	r2, #0
 80091b0:	6022      	str	r2, [r4, #0]
 80091b2:	461a      	mov	r2, r3
 80091b4:	f7f7 fc0f 	bl	80009d6 <_write>
 80091b8:	1c43      	adds	r3, r0, #1
 80091ba:	d102      	bne.n	80091c2 <_write_r+0x1e>
 80091bc:	6823      	ldr	r3, [r4, #0]
 80091be:	b103      	cbz	r3, 80091c2 <_write_r+0x1e>
 80091c0:	602b      	str	r3, [r5, #0]
 80091c2:	bd38      	pop	{r3, r4, r5, pc}
 80091c4:	20000b30 	.word	0x20000b30

080091c8 <_close_r>:
 80091c8:	b538      	push	{r3, r4, r5, lr}
 80091ca:	4c06      	ldr	r4, [pc, #24]	; (80091e4 <_close_r+0x1c>)
 80091cc:	2300      	movs	r3, #0
 80091ce:	4605      	mov	r5, r0
 80091d0:	4608      	mov	r0, r1
 80091d2:	6023      	str	r3, [r4, #0]
 80091d4:	f7f7 fef3 	bl	8000fbe <_close>
 80091d8:	1c43      	adds	r3, r0, #1
 80091da:	d102      	bne.n	80091e2 <_close_r+0x1a>
 80091dc:	6823      	ldr	r3, [r4, #0]
 80091de:	b103      	cbz	r3, 80091e2 <_close_r+0x1a>
 80091e0:	602b      	str	r3, [r5, #0]
 80091e2:	bd38      	pop	{r3, r4, r5, pc}
 80091e4:	20000b30 	.word	0x20000b30

080091e8 <_fstat_r>:
 80091e8:	b538      	push	{r3, r4, r5, lr}
 80091ea:	4c07      	ldr	r4, [pc, #28]	; (8009208 <_fstat_r+0x20>)
 80091ec:	2300      	movs	r3, #0
 80091ee:	4605      	mov	r5, r0
 80091f0:	4608      	mov	r0, r1
 80091f2:	4611      	mov	r1, r2
 80091f4:	6023      	str	r3, [r4, #0]
 80091f6:	f7f7 feee 	bl	8000fd6 <_fstat>
 80091fa:	1c43      	adds	r3, r0, #1
 80091fc:	d102      	bne.n	8009204 <_fstat_r+0x1c>
 80091fe:	6823      	ldr	r3, [r4, #0]
 8009200:	b103      	cbz	r3, 8009204 <_fstat_r+0x1c>
 8009202:	602b      	str	r3, [r5, #0]
 8009204:	bd38      	pop	{r3, r4, r5, pc}
 8009206:	bf00      	nop
 8009208:	20000b30 	.word	0x20000b30

0800920c <_isatty_r>:
 800920c:	b538      	push	{r3, r4, r5, lr}
 800920e:	4c06      	ldr	r4, [pc, #24]	; (8009228 <_isatty_r+0x1c>)
 8009210:	2300      	movs	r3, #0
 8009212:	4605      	mov	r5, r0
 8009214:	4608      	mov	r0, r1
 8009216:	6023      	str	r3, [r4, #0]
 8009218:	f7f7 feed 	bl	8000ff6 <_isatty>
 800921c:	1c43      	adds	r3, r0, #1
 800921e:	d102      	bne.n	8009226 <_isatty_r+0x1a>
 8009220:	6823      	ldr	r3, [r4, #0]
 8009222:	b103      	cbz	r3, 8009226 <_isatty_r+0x1a>
 8009224:	602b      	str	r3, [r5, #0]
 8009226:	bd38      	pop	{r3, r4, r5, pc}
 8009228:	20000b30 	.word	0x20000b30

0800922c <_lseek_r>:
 800922c:	b538      	push	{r3, r4, r5, lr}
 800922e:	4c07      	ldr	r4, [pc, #28]	; (800924c <_lseek_r+0x20>)
 8009230:	4605      	mov	r5, r0
 8009232:	4608      	mov	r0, r1
 8009234:	4611      	mov	r1, r2
 8009236:	2200      	movs	r2, #0
 8009238:	6022      	str	r2, [r4, #0]
 800923a:	461a      	mov	r2, r3
 800923c:	f7f7 fee6 	bl	800100c <_lseek>
 8009240:	1c43      	adds	r3, r0, #1
 8009242:	d102      	bne.n	800924a <_lseek_r+0x1e>
 8009244:	6823      	ldr	r3, [r4, #0]
 8009246:	b103      	cbz	r3, 800924a <_lseek_r+0x1e>
 8009248:	602b      	str	r3, [r5, #0]
 800924a:	bd38      	pop	{r3, r4, r5, pc}
 800924c:	20000b30 	.word	0x20000b30

08009250 <_read_r>:
 8009250:	b538      	push	{r3, r4, r5, lr}
 8009252:	4c07      	ldr	r4, [pc, #28]	; (8009270 <_read_r+0x20>)
 8009254:	4605      	mov	r5, r0
 8009256:	4608      	mov	r0, r1
 8009258:	4611      	mov	r1, r2
 800925a:	2200      	movs	r2, #0
 800925c:	6022      	str	r2, [r4, #0]
 800925e:	461a      	mov	r2, r3
 8009260:	f7f7 fe90 	bl	8000f84 <_read>
 8009264:	1c43      	adds	r3, r0, #1
 8009266:	d102      	bne.n	800926e <_read_r+0x1e>
 8009268:	6823      	ldr	r3, [r4, #0]
 800926a:	b103      	cbz	r3, 800926e <_read_r+0x1e>
 800926c:	602b      	str	r3, [r5, #0]
 800926e:	bd38      	pop	{r3, r4, r5, pc}
 8009270:	20000b30 	.word	0x20000b30

08009274 <_init>:
 8009274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009276:	bf00      	nop
 8009278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800927a:	bc08      	pop	{r3}
 800927c:	469e      	mov	lr, r3
 800927e:	4770      	bx	lr

08009280 <_fini>:
 8009280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009282:	bf00      	nop
 8009284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009286:	bc08      	pop	{r3}
 8009288:	469e      	mov	lr, r3
 800928a:	4770      	bx	lr
